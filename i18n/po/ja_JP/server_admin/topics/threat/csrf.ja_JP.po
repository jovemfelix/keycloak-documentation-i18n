# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ===
#: source/server_admin/topics/threat/csrf.adoc:2
#, no-wrap
msgid "CSRF Attacks"
msgstr "CSRF攻撃"

#. type: Plain text
#: source/server_admin/topics/threat/csrf.adoc:7
msgid ""
"Cross-site request forgery (CSRF) is a web-based attack whereby HTTP "
"requests are transmitted from a user that the web site trusts or has "
"authenticated with(e.g. via HTTP redirects or HTML forms).  Any site that "
"uses cookie based authentication is vulnerable to these types of attacks.  "
"These attacks are mitigated by matching a state cookie against a posted form"
" or query parameter."
msgstr ""
"クロスサイト・リクエスト・フォージェリ（CSRF）は、ウェブサイトが信頼するユーザーまたは（HTTPリダイレクトやHTMLフォームを介して）認証されたユーザーからHTTPリクエストが送信される、ウェブベースの攻撃です。Cookieベースの認証を使用するサイトは、これらの種類の攻撃に対して脆弱です。これらの攻撃は、ポストされたフォームまたはクエリー・パラメーターと状態Cookieを照合することによって緩和されます。"

#. type: Plain text
#: source/server_admin/topics/threat/csrf.adoc:10
msgid ""
"The OAuth 2.0 login specification requires that a state cookie be used and "
"matched against a transmitted state parameter.  {project_name} fully "
"implements this part of the specification so all logins are protected."
msgstr ""
"OAuth "
"2.0ログイン仕様では、状態Cookieを使用し、送信された状態パラメーターと照合する必要があります。{project_name}は仕様のこの部分を完全に実装しているので、すべてのログインが保護されます。"

#. type: Plain text
#: source/server_admin/topics/threat/csrf.adoc:15
msgid ""
"The {project_name} Admin Console is a pure JavaScript/HTML5 application that"
" makes REST calls to the backend {project_name} admin REST API.  These calls"
" all require bearer token authentication and are made via JavaScript Ajax "
"calls.  CSRF does not apply here.  The admin REST API can also be configured"
" to validate the CORS origins as well."
msgstr ""
"{project_name}管理コンソールは、バックエンドの{project_name}管理REST "
"APIに対してREST呼び出しを行う純粋なJavaScript/HTML5アプリケーションです。これらの呼び出しはすべてベアラー・トークン認証を必要とし、JavaScript"
" Ajax呼び出しによって行われます。CSRFはここでは適用されません。管理REST APIは、CORS "
"Originを検証するように設定することもできます。"

#. type: Plain text
#: source/server_admin/topics/threat/csrf.adoc:18
msgid ""
"The only part of {project_name} that really falls into CSRF is the user "
"account management pages.  To mitigate this {project_name} sets a state "
"cookie and also embeds the value of this state cookie within hidden form "
"fields or query parameters in action links.  This query or form parameter is"
" checked against the state cookie to verify that the call was made by the "
"user."
msgstr ""
"CSRFに実際に該当する{project_name}の唯一の部分は、ユーザー・アカウント管理ページです。これを緩和するため、{project_name}は状態Cookieを設定し、この状態Cookieの値をhiddenフォーム・フィールドまたはアクション・リンクのクエリー・パラメーターに埋め込みます。このクエリーまたはフォームのパラメーターは、状態Cookieと照合されて、呼び出しがユーザーによって行われたことを検証します。"
