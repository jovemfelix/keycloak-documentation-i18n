# Japanese translations for keycloak-documentation-i18n package
# Copyright (C) 2017 Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
msgid "On Linux:"
msgstr ""

#. type: Plain text
msgid "On Windows:"
msgstr ""

#. type: Plain text
msgid "Usually a user will first start an authenticated session by providing credentials, then perform some CRUD operations."
msgstr ""

#. type: Plain text
msgid "For example on Linux:"
msgstr ""

#. type: Plain text
msgid "Or on Windows:"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Working with alternative configurations"
msgstr ""

#. type: Plain text
msgid "Make sure to not make a config file visible to other users on the system as it contains access tokens, and secrets that should be kept private."
msgstr ""

#. type: Plain text
msgid "For example:"
msgstr ""

#. type: Title ==
#, fuzzy, no-wrap
#| msgid "Admin Console"
msgid "Admin CLI"
msgstr "管理コンソール"

#. type: Plain text
msgid "Admin CLI is a Technology Preview feature and is not fully supported."
msgstr ""

#. type: Plain text
msgid "In previous chapters we have described how to use the {project_name} Admin Console to perform administrative tasks.  All those tasks can also be performed from command line by using Admin CLI command line tool."
msgstr ""

#. type: Title ===
#, fuzzy, no-wrap
#| msgid "Installing and Booting"
msgid "Installing Admin CLI"
msgstr "インストールと起動"

#. type: Plain text
msgid "Admin CLI is packaged inside {project_name} Server distribution. You can find execution scripts inside `bin` directory."
msgstr ""

#. type: Plain text
msgid "The Linux script is called `kcadm.sh`, and the one for Windows is called `kcadm.bat`."
msgstr ""

#. type: Plain text
msgid "In order to setup the client to be used from any location on the filesystem you may want to add {project_name} server directory to your PATH."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ export PATH=$PATH:$KEYCLOAK_HOME/bin\n"
"    $ kcadm.sh\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    c:\\> set PATH=%PATH%;%KEYCLOAK_HOME%\\bin\n"
"    c:\\> kcadm\n"
msgstr ""

#. type: Plain text
msgid "To avoid unnecessary repetition the rest of this document will only give Windows examples in places where difference in command line is more than just in `kcadm` command name."
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Using Admin CLI"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ kcadm.sh config credentials --server http://localhost:8080/auth --realm demo --user admin --client admin\n"
"    $ kcadm.sh create realms -s realm=demorealm -s enabled=true -o\n"
"    $ CID=$(kcadm.sh create clients -r demorealm -s clientId=my_client -s 'redirectUris=[\"http://localhost:8980/myapp/*\"]' -i)\n"
"    $ kcadm.sh get clients/$CID/installation/providers/keycloak-oidc-keycloak-json\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    c:\\> kcadm config credentials --server http://localhost:8080/auth --realm demo --user admin --client admin\n"
"    c:\\> kcadm create realms -s realm=demorealm -s enabled=true -o\n"
"    c:\\> kcadm create clients -r demorealm -s clientId=my_client -s \"redirectUris=[\\\"http://localhost:8980/myapp/*\\\"]\" -i > clientid.txt\n"
"    c:\\> set /p CID=<clientid.txt\n"
"    c:\\> kcadm get clients/%CID%/installation/providers/keycloak-oidc-keycloak-json\n"
msgstr ""

#. type: Plain text
msgid "In a production environment {project_name} has to be accessed with `https:` to avoid exposing tokens to network sniffers. If server's certificate is not issued by one of the trusted CAs that are included in Java's default certificate truststore, then you will need to prepare a truststore.jks file, and instruct `Admin CLI` to use it."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh config truststore --trustpass $PASSWORD ~/.keycloak/truststore.jks\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm config truststore --trustpass %PASSWORD% %HOMEPATH%\\.keycloak\\truststore.jks\n"
msgstr ""

#. type: Title ===
#, fuzzy, no-wrap
#| msgid "Authentication"
msgid "Authenticating"
msgstr "認証"

#. type: Plain text
msgid "Admin CLI works by making HTTP requests to Admin REST endpoints. Access to them is protected and requires authentication."
msgstr ""

#. type: Plain text
msgid "When logging in with `Admin CLI` you specify a server endpoint url, and a realm. Then you specify a username, or alternatively you can only specify a client id, which will result in special service account being used. In the first case, a password for the specified user has to be used at login. In the latter case there is no user password - only client secret or a `Signed JWT` is used."
msgstr ""

#. type: Plain text
msgid "The account that logs in needs to have proper permissions in order to be able to invoke Admin REST API operations.  Specifically - `realm-admin` role of `realm-management` client is required for user to administer the realm within which the user is defined."
msgstr ""

#. type: Plain text
msgid "There are two primary mechanisms to authenticate. One is by using `kcadm config credentials` to start an authenticated session:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin\n"
msgstr ""

#. type: Plain text
msgid "This approach maintains an authenticated session between `kcadm` command invocations by saving the obtained access token, and associated refresh token, possibly other secrets as well in a private configuration file. By default this file is called `kcadm.config` and is located under user's home directory - it's full pathname is `$HOME/.keycloak/kcadm.config` (on Windows it's `%HOMEPATH%\\.keycloak\\kcadm.config`).  The file can be named something else by using `-c, --config` option."
msgstr ""

#. type: Plain text
msgid "See <<_working_with_alternative_configurations, next chapter>> for more info on configuration file."
msgstr ""

#. type: Plain text
msgid "Another approach is to authenticate with each command invocation for the duration of that invocation only. This approach results in more load on the server, and more time spent with round-trips obtaining tokens, but has a benefit of not needing to save any tokens between invocations, thus nothing is saved to disk."
msgstr ""

#. type: Plain text
msgid "For example, when performing an operation we specify all the information required for authentication:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms --no-config --server http://localhost:8080/auth --realm master --user admin --password admin\n"
msgstr ""

#. type: Plain text
msgid "See built-in help for more information on using `Admin CLI`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh help\n"
msgstr ""

#. type: Plain text
msgid "See `kcadm.sh config credentials --help` for more information about starting an authenticated session."
msgstr ""

#. type: Plain text
msgid "By default, `Admin CLI` automatically maintains a configuration file at a default location - `.keycloak/kcadm.config` under user's home directory."
msgstr ""

#. type: Plain text
msgid "You can use `--config` option at any time to point to a different file / location. This way you can maintain multiple authenticated sessions in parallel. It is safest to perform operations tied to a single config file from a single thread."
msgstr ""

#. type: Plain text
msgid "You may want to avoid storing any secrets at all inside a config file for the price of less convenience and having to do more token requests.  In that case you can use `--no-config` option with all your commands. You will have to specify all authentication info with each `kcadm` invocation."
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Basic operations, and resource URIs"
msgstr ""

#. type: Plain text
msgid "Admin CLI allows you to perform CRUD operations against Admin REST API endpoints in quite a generic way, with additional commands that simplify performing certain actions."
msgstr ""

#. type: Plain text
msgid "Main usage pattern is the following:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ kcadm.sh create ENDPOINT [ARGUMENTS]\n"
"    $ kcadm.sh get ENDPOINT [ARGUMENTS]\n"
"    $ kcadm.sh update ENDPOINT [ARGUMENTS]\n"
"    $ kcadm.sh delete ENDPOINT [ARGUMENTS]\n"
msgstr ""

#. type: Plain text
msgid "Where operations `create`, `get`, `update`, and `delete` are mapped to HTTP verbs POST, GET, PUT, and DELETE, respectively.  ENDPOINT is a target resource URI, and can either be absolute - starting with 'http:' or 'https:', or relative - used to compose an absolute URL of the following format:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    SERVER_URI/admin/realms/REALM/ENDPOINT\n"
msgstr ""

#. type: Plain text
msgid "For example, if the server we authenticate against is `http://localhost:8080/auth`, and realm is `master`, then using `users` as ENDPOINT will result in the following resource URL: `http://localhost:8080/auth/admin/realms/master/users`."
msgstr ""

#. type: Plain text
msgid "If we set ENDPOINT to `clients` the effective resource URI would be: `http://localhost:8080/auth/admin/realms/master/clients`."
msgstr ""

#. type: Plain text
msgid "There is `realms` endpoint which is treated slightly differently since it is the container for realms. It resolves simply to:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    SERVER_URI/admin/realms\n"
msgstr ""

#. type: Plain text
msgid "There is also `serverinfo` which is treated the same way since it is independent of realms."
msgstr ""

#. type: Plain text
msgid "When authenticating as a user with realm-admin powers you may need to perform operations on multiple different realms. In that case you can specify `-r, --target-realm` option to tell explicitly which realm the operation should be executed against.  Instead of using REALM as specified via `--realm` option of `kcadm.sh config credentials`, the TARGET_REALM will be used:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    SERVER_URI/admin/realms/TARGET_REALM/ENDPOINT\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin\n"
"    $ kcadm.sh create users -s username=testuser -s enabled=true -r demorealm\n"
msgstr ""

#. type: Plain text
msgid "In this example we first start a session authenticated as `admin` user in `master` realm. Then we perform a POST call against the following resource URL:"
msgstr ""

#. type: Plain text
#, fuzzy, no-wrap
#| msgid "http://localhost:8080/auth/realms/demo/account"
msgid "    http://localhost:8080/auth/admin/realms/demorealm/users\n"
msgstr "http://localhost:8080/auth/realms/demo/account"

#. type: Title ===
#, no-wrap
msgid "Realm operations"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New Realm"
msgid "Creating a new realm"
msgstr "新規レルムの作成"

#. type: Plain text
msgid "A new realm can be created by specifying individual attributes on command line. They will be converted into a JSON document and sent to the server:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create realms -s realm=demorealm -s enabled=true\n"
msgstr ""

#. type: Plain text
msgid "Realm is not enabled by default. By enabling it, it can be used for authentication immediately."
msgstr ""

#. type: Plain text
msgid "A description for a new object can be in JSON format as well:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create realms -f demorealm.json\n"
msgstr ""

#. type: Plain text
msgid "JSON document with realm attributes can be sent directly from file or piped to standard input."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ kcadm.sh create realms -f - << EOF\n"
"    { \"realm\": \"demorealm\", \"enabled\": true }\n"
"    EOF\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> echo { \"realm\": \"demorealm\", \"enabled\": true } | kcadm create realms -f -\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing existing realms"
msgstr ""

#. type: Plain text
msgid "The following will return a list of all the realms:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms\n"
msgstr ""

#. type: Plain text
msgid "Note, that the list of realms returned is additionally filtered on the server to only return realms the user has permissions for."
msgstr ""

#. type: Plain text
msgid "Often that is too much information as we may only be interested in realm name, or - for example - if it is enabled or not.  You can specify the attributes to return by using `--fields` option:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms --fields realm,enabled\n"
msgstr ""

#. type: Plain text
msgid "You may even display the result as comma separated values:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms --fields realm --format csv --noquotes\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New Realm"
msgid "Getting a specific realm"
msgstr "新規レルムの作成"

#. type: Plain text
msgid "As is common for REST web services, in order to get an individual item of a collection, append an id to collection URI:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms/master\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New Realm"
msgid "Updating a realm"
msgstr "新規レルムの作成"

#. type: Plain text
msgid "There are several options when updating any resource. You can first get current state of resource, and save it into a file, then edit that file, and send it to server for update. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ kcadm.sh get realms/demorealm > demorealm.json\n"
"    $ vi demorealm.json\n"
"    $ kcadm.sh update realms/demorealm -f demorealm.json\n"
msgstr ""

#. type: Plain text
msgid "This way the resource on the server will be updated with all the attributes in the sent JSON document."
msgstr ""

#. type: Plain text
msgid "Another option is to perform the update on-the-fly using `-s, --set` options to set new values:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update realms/demorealm -s enabled=false\n"
msgstr ""

#. type: Plain text
msgid "That would only update `enabled` attribute to `false`."
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New Realm"
msgid "Deleting a realm"
msgstr "新規レルムの作成"

#. type: Plain text
msgid "It's very simple to delete a realm:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete realms/demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Turning on all login page options for the realm"
msgstr ""

#. type: Plain text
msgid "Set the attributes controlling specific capabilities to `true`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update realms/demorealm -s registrationAllowed=true -s registrationEmailAsUsername=true -s rememberMe=true -s verifyEmail=true -s resetPasswordAllowed=true -s editUsernameAllowed=true\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing the realm keys"
msgstr ""

#. type: Plain text
msgid "It's very simple to list the realm keys for a specific realm:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get keys -r demorealm\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New Realm"
msgid "Generating new realm keys"
msgstr "新規レルムの作成"

#. type: Plain text
msgid "To add a new RSA generated keypair, first get `id` of the target realm. For example, to get `id` for a realm whose `realm` attribute is 'demorealm':"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms/demorealm --fields id --format csv --noquotes\n"
msgstr ""

#. type: Plain text
msgid "Then add a new key provider with higher priority than any of the existing providers as revealed by `kcadm.sh get keys -r demorealm`:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=rsa-generated -s providerId=rsa-generated -s providerType=org.keycloak.keys.KeyProvider -s parentId=959844c1-d149-41d7-8359-6aa527fca0b0 -s 'config.priority=[\"101\"]' -s 'config.enabled=[\"true\"]' -s 'config.active=[\"true\"]' -s 'config.keySize=[\"2048\"]'\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm create components -r demorealm -s name=rsa-generated -s providerId=rsa-generated -s providerType=org.keycloak.keys.KeyProvider -s parentId=959844c1-d149-41d7-8359-6aa527fca0b0 -s \"config.priority=[\\\"101\\\"]\" -s \"config.enabled=[\\\"true\\\"]\" -s \"config.active=[\\\"true\\\"]\" -s \"config.keySize=[\\\"2048\\\"]\"\n"
msgstr ""

#. type: Plain text
msgid "Attribute `parentId` should be set to the value of target realm's `id`."
msgstr ""

#. type: Plain text
msgid "The newly added key should now become the active key as revealed by `kcadm.sh get keys -r demorealm`."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding new realm keys from Java Key Store file"
msgstr ""

#. type: Plain text
msgid "To add a new keypair already prepared as a JKS file on the server, add a new key provider as follows:"
msgstr ""

#. type: Plain text
msgid "For exmple on Linux:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=java-keystore -s providerId=java-keystore -s providerType=org.keycloak.keys.KeyProvider -s parentId=959844c1-d149-41d7-8359-6aa527fca0b0 -s 'config.priority=[\"101\"]' -s 'config.enabled=[\"true\"]' -s 'config.active=[\"true\"]' -s 'config.keystore=[\"/opt/keycloak/keystore.jks\"]' -s 'config.keystorePassword=[\"secret\"]' -s 'config.keyPassword=[\"secret\"]' -s 'config.alias=[\"localhost\"]'\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm create components -r demorealm -s name=java-keystore -s providerId=java-keystore -s providerType=org.keycloak.keys.KeyProvider -s parentId=959844c1-d149-41d7-8359-6aa527fca0b0 -s \"config.priority=[\\\"101\\\"]\" -s \"config.enabled=[\\\"true\\\"]\" -s \"config.active=[\\\"true\\\"]\" -s \"config.keystore=[\\\"/opt/keycloak/keystore.jks\\\"]\" -s \"config.keystorePassword=[\\\"secret\\\"]\" -s \"config.keyPassword=[\\\"secret\\\"]\" -s \"config.alias=[\\\"localhost\\\"]\"\n"
msgstr ""

#. type: Plain text
msgid "And change attribute values for `keystore`, `keystorePassword`, `keyPassword`, and `alias` to match your specific keystore."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Making key passive or disabling it"
msgstr ""

#. type: Plain text
msgid "Identify the key you wish to make passive:"
msgstr ""

#. type: Plain text
msgid "Use `providerId` attribute of the key to construct an endpoint uri - `components/PROVIDER_ID`."
msgstr ""

#. type: Plain text
msgid "Then perform an `update`. For example on Linux:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update components/PROVIDER_ID -r demorealm -s 'config.active=[\"false\"]'\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm update components/PROVIDER_ID -r demorealm -s \"config.active=[\\\"false\\\"]\"\n"
msgstr ""

#. type: Plain text
msgid "Analogously, other key attributes can be updated."
msgstr ""

#. type: Plain text
msgid "To disable the key set new `enabled` value, for example: `'config.enabled=[\"false\"]'`"
msgstr ""

#. type: Plain text
msgid "To change key's priority set new `priority` value, for example: `'config.priority=[\"110\"]'`"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Deleting an old key"
msgstr ""

#. type: Plain text
msgid "Make sure that the key you are deleting has been passive for some time, and then disabled for some time in order to prevent any existing tokens held by applications and users from abruptly failing to work."
msgstr ""

#. type: Plain text
msgid "Use the `providerId` of that key to perform a delete. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete components/PROVIDER_ID -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring event logging for a realm"
msgstr ""

#. type: Plain text
msgid "Use `update` against `events/config` endpoint."
msgstr ""

#. type: Plain text
msgid "Attribute 'eventsListeners' sets the list of EventListenerProviderFactory 'id's specifying all the event listeners receiving events.  Separately from that there are attributes that control a built-in event storage which allows querying of past events via Admin REST API.  There is separate control over logging of service calls - 'eventsEnabled', and auditing events triggered during Admin Console or Admin REST API - 'adminEventsEnabled'.  You may want to limit the time when old events expire so that your database doesn't get filled up - 'eventsExpiration' is set to time-to-live expressed in seconds."
msgstr ""

#. type: Plain text
msgid "For example, this is how you set a built-in event listener that will receive all the events and log them through jboss-logging (error events are logged as `WARN`, others as `DEBUG`, using a logger called `org.keycloak.events`):"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update events/config -r demorealm -s 'eventsListeners=[\"jboss-logging\"]'\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm update events/config -r demorealm -s \"eventsListeners=[\\\"jboss-logging\\\"]\"\n"
msgstr ""

#. type: Plain text
msgid "This is how you turn on storage of all available ERROR events - not auditing events - for 2 days so they can be retrieved via Admin REST:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update events/config -r demorealm -s eventsEnabled=true -s 'enabledEventTypes=[\"LOGIN_ERROR\",\"REGISTER_ERROR\",\"LOGOUT_ERROR\",\"CODE_TO_TOKEN_ERROR\",\"CLIENT_LOGIN_ERROR\",\"FEDERATED_IDENTITY_LINK_ERROR\",\"REMOVE_FEDERATED_IDENTITY_ERROR\",\"UPDATE_EMAIL_ERROR\",\"UPDATE_PROFILE_ERROR\",\"UPDATE_PASSWORD_ERROR\",\"UPDATE_TOTP_ERROR\",\"VERIFY_EMAIL_ERROR\",\"REMOVE_TOTP_ERROR\",\"SEND_VERIFY_EMAIL_ERROR\",\"SEND_RESET_PASSWORD_ERROR\",\"SEND_IDENTITY_PROVIDER_LINK_ERROR\",\"RESET_PASSWORD_ERROR\",\"IDENTITY_PROVIDER_FIRST_LOGIN_ERROR\",\"IDENTITY_PROVIDER_POST_LOGIN_ERROR\",\"CUSTOM_REQUIRED_ACTION_ERROR\",\"EXECUTE_ACTIONS_ERROR\",\"CLIENT_REGISTER_ERROR\",\"CLIENT_UPDATE_ERROR\",\"CLIENT_DELETE_ERROR\"]' -s eventsExpiration=172800\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm update events/config -r demorealm -s eventsEnabled=true -s \"enabledEventTypes=[\\\"LOGIN_ERROR\\\",\\\"REGISTER_ERROR\\\",\\\"LOGOUT_ERROR\\\",\\\"CODE_TO_TOKEN_ERROR\\\",\\\"CLIENT_LOGIN_ERROR\\\",\\\"FEDERATED_IDENTITY_LINK_ERROR\\\",\\\"REMOVE_FEDERATED_IDENTITY_ERROR\\\",\\\"UPDATE_EMAIL_ERROR\\\",\\\"UPDATE_PROFILE_ERROR\\\",\\\"UPDATE_PASSWORD_ERROR\\\",\\\"UPDATE_TOTP_ERROR\\\",\\\"VERIFY_EMAIL_ERROR\\\",\\\"REMOVE_TOTP_ERROR\\\",\\\"SEND_VERIFY_EMAIL_ERROR\\\",\\\"SEND_RESET_PASSWORD_ERROR\\\",\\\"SEND_IDENTITY_PROVIDER_LINK_ERROR\\\",\\\"RESET_PASSWORD_ERROR\\\",\\\"IDENTITY_PROVIDER_FIRST_LOGIN_ERROR\\\",\\\"IDENTITY_PROVIDER_POST_LOGIN_ERROR\\\",\\\"CUSTOM_REQUIRED_ACTION_ERROR\\\",\\\"EXECUTE_ACTIONS_ERROR\\\",\\\"CLIENT_REGISTER_ERROR\\\",\\\"CLIENT_UPDATE_ERROR\\\",\\\"CLIENT_DELETE_ERROR\\\"]\" -s eventsExpiration=172800\n"
msgstr ""

#. type: Plain text
msgid "This is how you reset stored event types to `all available event types` - setting to empty list is the same as enumerating all:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update events/config -r demorealm -s enabledEventTypes=[]\n"
msgstr ""

#. type: Plain text
msgid "And this is how you turn on auditing events:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update events/config -r demorealm -s adminEventsEnabled=true -s adminEventsDetailsEnabled=true\n"
msgstr ""

#. type: Plain text
msgid "Here is how you get the last 100 events - they are ordered from newest to oldest:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get events --offset 0 --limit 100\n"
msgstr ""

#. type: Plain text
msgid "Here is how you delete all saved events:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm delete events\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Flushing the caches"
msgstr ""

#. type: Plain text
msgid "Use `create` operation, and one of the following endpoints: `clear-realm-cache`, `clear-user-cache`, `clear-keys-cache`."
msgstr ""

#. type: Plain text
msgid "Set `realm` to the same value as target realm."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create clear-realm-cache -r demorealm -s realm=demorealm\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create clear-user-cache -r demorealm -s realm=demorealm\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create clear-keys-cache -r demorealm -s realm=demorealm\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Role operations"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a Realm and User"
msgid "Creating a realm role"
msgstr "レルムとユーザーの作成"

#. type: Plain text
#, fuzzy
#| msgid "To create a new realm, complete the following steps:"
msgid "To create a realm role use `roles` endpoint:"
msgstr "新規レルムを作成するには、以下の手順に従います。"

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create roles -r demorealm -s name=user -s 'description=Regular user with limited set of permissions'\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Creating a client role"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "To create a client role identify the client first - use `get` to list available clients:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get clients -r demorealm --fields id,clientId\n"
msgstr ""

#. type: Plain text
msgid "Then create a new role by using client's `id` attribute to construct an endpoint uri - `clients/ID/roles`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create clients/a95b6af3-0bdc-4878-ae2e-6d61a4eca9a0/roles -r demorealm -s name=editor -s 'description=Editor can edit, and publish any article'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing realm roles"
msgstr ""

#. type: Plain text
msgid "To list existing realm roles use `get` command:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get roles -r demorealm\n"
msgstr ""

#. type: Plain text
msgid "You can also use `get-roles` command:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing client roles"
msgstr ""

#. type: Plain text
msgid "Use special `get-roles` command, passing it either `clientId` (via `--cclientid` option) or `id` (via `--cid` option) to identify the client, and list defined roles:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --cclientid realm-management\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting a specific realm role"
msgstr ""

#. type: Plain text
msgid "Use `get` command, and role `name` to construct an endpoint uri for a specific realm role - `roles/ROLE_NAME`"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get roles/user -r demorealm\n"
msgstr ""

#. type: Plain text
msgid "Where `user` is the name of existing role."
msgstr ""

#. type: Plain text
msgid "Alternatively, use special `get-roles` command, passing it role `name` (via `--rolename` option) or `id` (via `--roleid` option)."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "   $ kcadm.sh get-roles -r demorealm --rolename user\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting a specific client role"
msgstr ""

#. type: Plain text
msgid "Use special `get-roles` command, passing it either `clientId` (via `--cclientid` option) or `id` (via `--cid` option) to identify the client, and passing it either role `name` (via `--rolename` option) or 'id' (via --roleid) to identify a specific client role:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --cclientid realm-management --rolename manage-clients\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a Realm and User"
msgid "Updating a realm role"
msgstr "レルムとユーザーの作成"

#. type: Plain text
msgid "Use `update` operation with the same endpoint uri as for getting a specific realm role. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update roles/user -r demorealm -s 'description=Role representing a regular user'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Updating a client role"
msgstr ""

#. type: Plain text
msgid "Use `update` operation with the same endpoint uri as for getting a specific client role. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update clients/a95b6af3-0bdc-4878-ae2e-6d61a4eca9a0/roles/editor -r demorealm -s 'description=User that can edit, and publish articles'\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a Realm and User"
msgid "Deleting a realm role"
msgstr "レルムとユーザーの作成"

#. type: Plain text
msgid "Use `delete` operation with the same endpoint uri as for getting a specific realm role. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete roles/user -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Deleting a client role"
msgstr ""

#. type: Plain text
msgid "Use `delete` operation with the same endpoint uri as for getting a specific client role. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete clients/a95b6af3-0bdc-4878-ae2e-6d61a4eca9a0/roles/editor -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing assigned, available and effective realm roles for a composite role"
msgstr ""

#. type: Plain text
msgid "There is a dedicated `get-roles` command to simplify listing of both realm and client roles. It is an extension of `get` command thus it behaves like `get` command with additional semantics for listing roles."
msgstr ""

#. type: Plain text
msgid "To list *assigned* realm roles for the composite role you can specify the target composite role by either `name` (via --rname option) or `id` (via --rid option)."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --rname testrole\n"
msgstr ""

#. type: Plain text
msgid "To list *effective* realm roles, use additional `--effective` option."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --rname testrole --effective\n"
msgstr ""

#. type: Plain text
msgid "To list realm roles that can still be added to the composite role, use `--available` option instead."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --rname testrole --available\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing assigned, available, and effective client roles for a composite role"
msgstr ""

#. type: Plain text
msgid "You can again use `get-roles` command to simplify listing of roles."
msgstr ""

#. type: Plain text
msgid "To list *assigned* client roles for the composite role you can specify the target composite role by either `name` (via --rname option)  or `id` (via --rid option), and client by either `clientId` (via --cclientid option) or `id` (via --cid option)."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --rname testrole --cclientid realm-management\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --rname testrole --cclientid realm-management --effective\n"
msgstr ""

#. type: Plain text
msgid "To list realm roles that can still be added to the target composite role, use `--available` option instead."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --rname testrole --cclientid realm-management --available\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding realm roles to a composite role"
msgstr ""

#. type: Plain text
msgid "There is a dedicated `add-roles` command that can be used for adding both realm roles and client roles."
msgstr ""

#. type: Plain text
msgid "For example, to add 'user' role to composite role 'testrole' :"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh add-roles --rname testrole --rolename user -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing realm roles from a composite role"
msgstr ""

#. type: Plain text
msgid "There is a dedicated `remove-roles` command that can be used to remove both realm roles and client roles."
msgstr ""

#. type: Plain text
msgid "For example, to remove 'user' role from target composite role 'testrole':"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh remove-roles --rname testrole --rolename user -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding client roles to a composite role"
msgstr ""

#. type: Plain text
msgid "There is a dedicated `add-roles` operation that can be used for adding both realm roles and client roles."
msgstr ""

#. type: Plain text
msgid "For example, to add to `testrole` composite role two roles defined on client `realm-management` - `create-client` role and `view-users` role:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh add-roles -r demorealm --rname testrole --cclientid realm-management --rolename create-client --rolename view-users\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing client roles from a composite role"
msgstr ""

#. type: Plain text
msgid "There is a dedicated `remove-roles` operation that can be used for removing both realm roles and client roles."
msgstr ""

#. type: Plain text
msgid "For example, to remove from `testrole` composite role two roles defined on client `realm management` - `create-client` role and `view-users` role:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh remove-roles -r demorealm --rname testrole --cclientid realm-management --rolename create-client --rolename view-users\n"
msgstr ""

#. type: Title ===
#, fuzzy, no-wrap
#| msgid "Client Registration"
msgid "Client operations"
msgstr "クライアントの登録"

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Creating a client"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "A new client can be created by using `create` command against `clients` endpoint. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create clients -r demorealm -s clientId=myapp -s enabled=true\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing clients"
msgstr ""

#. type: Plain text
msgid "It's very easy to list existing clients. For example:"
msgstr ""

#. type: Plain text
msgid "Here we filter the output to only list `id`, and `clientId` attributes."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting a specific client"
msgstr ""

#. type: Plain text
msgid "Use client's `id` to construct an endpoint uri targeting specific client - `clients/ID`. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get clients/c7b8547f-e748-4333-95d0-410b76b3f4a3 -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting adapter configuration file (keycloak.json) for specific client"
msgstr ""

#. type: Plain text
msgid "Use client's `id` to construct an endpoint uri targeting specific client - `clients/ID/installation/providers/keycloak-oidc-keycloak-json`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get clients/c7b8547f-e748-4333-95d0-410b76b3f4a3/installation/providers/keycloak-oidc-keycloak-json -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting Wildfly subsystem adapter configuration for specific client"
msgstr ""

#. type: Plain text
msgid "Use client's `id` to construct an endpoint uri targeting specific client - `clients/ID/installation/providers/keycloak-oidc-jboss-subsystem`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get clients/c7b8547f-e748-4333-95d0-410b76b3f4a3/installation/providers/keycloak-oidc-jboss-subsystem -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Updating a client"
msgstr ""

#. type: Plain text
msgid "Use `update` operation with the same endpoint uri as for getting a specific client. For example on Linux:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update clients/c7b8547f-e748-4333-95d0-410b76b3f4a3 -r demorealm -s enabled=false -s publicClient=true -s 'redirectUris=[\"http://localhost:8080/myapp/*\"]' -s baseUrl=http://localhost:8080/myapp -s adminUrl=http://localhost:8080/myapp\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm update clients/c7b8547f-e748-4333-95d0-410b76b3f4a3 -r demorealm -s enabled=false -s publicClient=true -s \"redirectUris=[\\\"http://localhost:8080/myapp/*\\\"]\" -s baseUrl=http://localhost:8080/myapp -s adminUrl=http://localhost:8080/myapp\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Deleting a client"
msgstr ""

#. type: Plain text
msgid "Use `delete` operation with the same endpoint uri as for getting a specific client. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete clients/c7b8547f-e748-4333-95d0-410b76b3f4a3 -r demorealm\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "User operations"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Creating a user"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "A new user can be created using the `create` command against the `users` endpoint. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create users -r demorealm -s username=testuser -s enabled=true\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing users"
msgstr ""

#. type: Plain text
msgid "Use `users` endpoint to list users. Number of users may be large, and you may want to limit how many are returned:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get users -r demorealm --offset 0 --limit 1000\n"
msgstr ""

#. type: Plain text
msgid "It's also possible to filter users by `username`, `firstName`, `lastName`, or `email`. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    $ kcadm.sh get users -r demorealm -q email=google.com\n"
"    $ kcadm.sh get users -r demorealm -q username=testuser\n"
msgstr ""

#. type: Plain text
msgid "Note that filtering doesn't use exact matching. For example, the above would match the value of `username` attribute against '\\*testuser*' pattern."
msgstr ""

#. type: Plain text
msgid "You can also filter across multiple attributes by specifying multiple `-q` options, which would return only users that match condition for all the attributes."
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Getting a specific user"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "Use user `id` to compose an endpoint uri matching a specific user - `users/USER_ID`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get users/0ba7a3fd-6fd8-48cd-a60b-2e8fd82d56e2 -r demorealm\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Updating a user"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "Use `update` operation with the same endpoint uri as for getting a specific user. For example on Linux:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update users/0ba7a3fd-6fd8-48cd-a60b-2e8fd82d56e2 -r demorealm -s 'requiredActions=[\"VERIFY_EMAIL\",\"UPDATE_PROFILE\",\"CONFIGURE_TOTP\",\"UPDATE_PASSWORD\"]'\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    c:\\> kcadm update users/0ba7a3fd-6fd8-48cd-a60b-2e8fd82d56e2 -r demorealm -s \"requiredActions=[\\\"VERIFY_EMAIL\\\",\\\"UPDATE_PROFILE\\\",\\\"CONFIGURE_TOTP\\\",\\\"UPDATE_PASSWORD\\\"]\"\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Deleting a user"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "Use `delete` operation with the same endpoint uri as for getting a specific user. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete users/0ba7a3fd-6fd8-48cd-a60b-2e8fd82d56e2 -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Resetting user's password"
msgstr ""

#. type: Plain text
msgid "There is a dedicated `set-password` command specifically to reset user's password. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh set-password -r demorealm --username testuser --password NEWPASSWORD --temporary\n"
msgstr ""

#. type: Plain text
msgid "That will set a temporary password for the user, which they will have to change the next time they login."
msgstr ""

#. type: Plain text
msgid "You can use `--userid` if you want to specify the user by using `id` attribute."
msgstr ""

#. type: Plain text
msgid "The same can be achieved using the `update` operation against an endpoint constructed from one for getting a specific user - `users/USER_ID/reset-password`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update users/0ba7a3fd-6fd8-48cd-a60b-2e8fd82d56e2/reset-password -r demorealm -s type=password -s value=NEWPASSWORD -s temporary=true -n\n"
msgstr ""

#. type: Plain text
msgid "The last parameter (`-n`) forces a so called 'no-merge' update which performs a PUT only, without first doing a GET to retrieve current state of the resource. In this case it is necessary since `reset-password` endpoint doesn't support GET."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing assigned, available, and effective realm roles for a user"
msgstr ""

#. type: Plain text
msgid "To list *assigned* realm roles for the user you can specify the target user by either `username` or `id`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --uusername testuser\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --uusername testuser --effective\n"
msgstr ""

#. type: Plain text
msgid "To list realm roles that can still be added to the user, use `--available` option instead."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --uusername testuser --available\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing assigned, available, and effective client roles for a user"
msgstr ""

#. type: Plain text
msgid "To list *assigned* client roles for the user you can specify the target user by either `username` (via --uusername option) or `id` (via --uid option), and client by either `clientId` (via --cclientid option) or `id` (via --cid option)."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --uusername testuser --cclientid realm-management\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --uusername testuser --cclientid realm-management --effective\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --uusername testuser --cclientid realm-management --available\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding realm roles to a user"
msgstr ""

#. type: Plain text
msgid "For example, to add 'user' role to user 'testuser' :"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh add-roles --username testuser --rolename user -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing realm roles from a user"
msgstr ""

#. type: Plain text
msgid "For example, to remove 'user' role from user 'testuser':"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh remove-roles --username testuser --rolename user -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding client roles to a user"
msgstr ""

#. type: Plain text
msgid "For example, to add to user `testuser` two roles defined on client `realm management` - `create-client` role and `view-users` role:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh add-roles -r demorealm --uusername testuser --cclientid realm-management --rolename create-client --rolename view-users\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing client roles from a user"
msgstr ""

#. type: Plain text
msgid "For example, to remove from user `testuser` two roles defined on client `realm management` - `create-client` role and `view-users` role:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh remove-roles -r demorealm --uusername testuser --cclientid realm-management --rolename create-client --rolename view-users\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing user's sessions"
msgstr ""

#. type: Plain text
msgid "First identify user's `id` then use it to compose an endpoint uri - `users/ID/sessions`."
msgstr ""

#. type: Plain text
msgid "Now use `get` to retrieve a list of user's sessions."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $kcadm get users/6da5ab89-3397-4205-afaa-e201ff638f9e/sessions\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Logging out user from specific session"
msgstr ""

#. type: Plain text
msgid "To invalidate a session you only need session's `id`. You can get it by listing user's sessions."
msgstr ""

#. type: Plain text
msgid "Use session's `id` to compose an endpoint uri - `sessions/ID`."
msgstr ""

#. type: Plain text
msgid "The use `delete` to invalidate it. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete sessions/d0eaa7cc-8c5d-489d-811a-69d3c4ec84d1\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Logging out user from all sessions"
msgstr ""

#. type: Plain text
msgid "You need user's `id` to construct an endpoint uri - `users/ID/logout`."
msgstr ""

#. type: Plain text
msgid "Use 'create' to send logout-from-all-sessions request:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create users/6da5ab89-3397-4205-afaa-e201ff638f9e/logout -r demorealm -s realm=demorealm -s user=6da5ab89-3397-4205-afaa-e201ff638f9e\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Group operations"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Creating a group"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "Use `create` operation, and `groups` endpoint to create a new group:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create groups -r demorealm -s name=Group\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing groups"
msgstr ""

#. type: Plain text
msgid "Use `get` operation, and `groups` endpoint to list groups:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get groups -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting a specific group"
msgstr ""

#. type: Plain text
msgid "Use group's `id` to construct an endpoint uri - groups/GROUP_ID:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get groups/51204821-0580-46db-8f2d-27106c6b5ded -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Updating a group"
msgstr ""

#. type: Plain text
msgid "Use `update` operation with the same endpoint uri as for getting a specific group. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update groups/51204821-0580-46db-8f2d-27106c6b5ded -s 'attributes.email=[\"group@example.com\"]' -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Deleting a group"
msgstr ""

#. type: Plain text
msgid "Use `delete` operation with the same endpoint uri as for getting a specific group. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete groups/51204821-0580-46db-8f2d-27106c6b5ded -r demorealm\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Creating a New User"
msgid "Creating a sub-group"
msgstr "新規ユーザーの作成"

#. type: Plain text
msgid "Find 'id' of the parent group - by listing groups for example. Use that `id` to construct an endpoint uri - groups/GROUP_ID/children:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create groups/51204821-0580-46db-8f2d-27106c6b5ded/children -r demorealm -s name=SubGroup\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Moving a group under another group"
msgstr ""

#. type: Plain text
msgid "Find 'id' of existing parent group, and of existing child group. Use parent group's `id` to construct and endpoint uri - groups/PARENT_GROUP_ID/children."
msgstr ""

#. type: Plain text
msgid "Make 'create' operation against this endpoint, and pass child group `id` as JSON body. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create groups/51204821-0580-46db-8f2d-27106c6b5ded/children -r demorealm -s id=08d410c6-d585-4059-bb07-54dcb92c5094\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Get groups for specific user"
msgstr ""

#. type: Plain text
msgid "To get user's membership in groups, use user's `id` to compose a resource URI - `users/USER_ID/groups`"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get users/b544f379-5fc4-49e5-8a8d-5cfb71f46f53/groups -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding user to a group"
msgstr ""

#. type: Plain text
msgid "To join user to a group use `update` operation against a resource uri composed from user's `id`, and group's `id` - users/USER_ID/groups/GROUP_ID."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update users/b544f379-5fc4-49e5-8a8d-5cfb71f46f53/groups/ce01117a-7426-4670-a29a-5c118056fe20 -r demorealm -s realm=demorealm -s userId=b544f379-5fc4-49e5-8a8d-5cfb71f46f53 -s groupId=ce01117a-7426-4670-a29a-5c118056fe20 -n\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing user from a group"
msgstr ""

#. type: Plain text
msgid "To remove user from a group use `delete` operation against the same resource uri as used for adding user to a group - users/USER_ID/groups/GROUP_ID."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete users/b544f379-5fc4-49e5-8a8d-5cfb71f46f53/groups/ce01117a-7426-4670-a29a-5c118056fe20 -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing assigned, available, and effective realm roles for a group"
msgstr ""

#. type: Plain text
msgid "There is a dedicated 'get-roles' command to simplify listing of roles. It is an extension of `get` command thus it behaves like `get` command with additional semantics for listing roles."
msgstr ""

#. type: Plain text
msgid "To list *assigned* realm roles for the group you can specify the target group by `name` (via `--gname` option), `path` (via `--gpath` option), or `id` (via `--gid` option)."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --gname Group\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --gname Group --effective\n"
msgstr ""

#. type: Plain text
msgid "To list realm roles that can still be added to the group, use `--available` option instead."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --gname Group --available\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing assigned, available, and effective client roles for a group"
msgstr ""

#. type: Plain text
msgid "A dedicated 'get-roles' command can be used to list for both realm roles and client roles."
msgstr ""

#. type: Plain text
msgid "To list *assigned* client roles for the user you can specify the target group by either `name` (via --gname option) or `id` (via `--gid` option), and client by either `clientId` (via `--cclientid` option) or `id` (via `--id` option)."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --gname Group --cclientid realm-management\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --gname Group --cclientid realm-management --effective\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get-roles -r demorealm --gname Group --cclientid realm-management --available\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Identity Providers operations"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing available identity providers"
msgstr ""

#. type: Plain text
msgid "Use `serverinfo` endpoint to list available identity providers. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get serverinfo -r demorealm --fields 'identityProviders(*)'\n"
msgstr ""

#. type: Plain text
msgid "Note that `serverinfo` endpoint is handled similarly to `realms` endpoint in that it is not resolved into resource URI as relative to target realm."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Listing configured identity providers"
msgstr ""

#. type: Plain text
msgid "Use `identity-provider/instances` endpoint. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get identity-provider/instances -r demorealm --fields alias,providerId,enabled\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting a specific configured identity provider"
msgstr ""

#. type: Plain text
msgid "To get a specific identity provider use an `alias` attribute of identity provider to construct an endpoint uri - `identity-provider/instances/ALIAS`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get identity-provider/instances/facebook -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing a specific configured identity provider"
msgstr ""

#. type: Plain text
msgid "Use `delete` operation with the same endpoint uri as for getting a specific configured identity provider. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete identity-provider/instances/facebook -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a Keycloak OpenID Connect identity provider"
msgstr ""

#. type: Plain text
msgid "For Keycloak OpenID Connect use `keycloak-oidc` as `providerId` when creating a new identity provider instance."
msgstr ""

#. type: Plain text
msgid "Provide config attributes `authorizationUrl`, `tokenUrl`, `clientId`, and `clientSecret`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=keycloak-oidc -s providerId=keycloak-oidc -s enabled=true -s 'config.useJwksUrl=\"true\"' -s config.authorizationUrl=http://localhost:8180/auth/realms/demorealm/protocol/openid-connect/auth -s config.tokenUrl=http://localhost:8180/auth/realms/demorealm/protocol/openid-connect/token -s config.clientId=demo-oidc-provider -s config.clientSecret=secret\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring an OpenID Connect identity provider"
msgstr ""

#. type: Plain text
msgid "You configure the generic OpenID Connect provider the same way as Keycloak OpenID Connect provider, except that you set `providerId` attribute value to `oidc`."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a SAML 2 identity provider"
msgstr ""

#. type: Plain text
msgid "Use `saml` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `singleSignOnServiceUrl`, `nameIDPolicyFormat`, and `signatureAlgorithm`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=saml -s providerId=saml -s enabled=true -s 'config.useJwksUrl=\"true\"' -s config.singleSignOnServiceUrl=http://localhost:8180/auth/realms/saml-broker-realm/protocol/saml -s config.nameIDPolicyFormat=urn:oasis:names:tc:SAML:2.0:nameid-format:persistent -s config.signatureAlgorithm=RSA_SHA256\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a Facebook identity provider"
msgstr ""

#. type: Plain text
msgid "Use `facebook` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId` and `clientSecret` as obtained from Facebook Developers application configuration page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=facebook -s providerId=facebook -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=FACEBOOK_CLIENT_ID -s config.clientSecret=FACEBOOK_CLIENT_SECRET\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a Google identity provider"
msgstr ""

#. type: Plain text
msgid "Use `google` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId` and `clientSecret` as obtained from Google Developers application configuration page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=google -s providerId=google -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=GOOGLE_CLIENT_ID -s config.clientSecret=GOOGLE_CLIENT_SECRET\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a Twitter identity provider"
msgstr ""

#. type: Plain text
msgid "Use `twitter` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId` and `clientSecret` as obtained from Twitter Application Management application configuration page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=google -s providerId=google -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=TWITTER_API_KEY -s config.clientSecret=TWITTER_API_SECRET\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a GitHub identity provider"
msgstr ""

#. type: Plain text
msgid "Use `github` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId` and `clientSecret` as obtained from GitHub Developer Application Settings page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=github -s providerId=github -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=GITHUB_CLIENT_ID -s config.clientSecret=GITHUB_CLIENT_SECRET\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a LinkedIn identity provider"
msgstr ""

#. type: Plain text
msgid "Use `linkedin` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId` and `clientSecret` as obtained from LinkedIn Developer Console application page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=linkedin -s providerId=linkedin -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=LINKEDIN_CLIENT_ID -s config.clientSecret=LINKEDIN_CLIENT_SECRET\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a Microsoft Live identity provider"
msgstr ""

#. type: Plain text
msgid "Use `microsoft` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId` and `clientSecret` as obtained from Microsoft Application Registration Portal page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=microsoft -s providerId=microsoft -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=MICROSOFT_APP_ID -s config.clientSecret=MICROSOFT_PASSWORD\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a StackOverflow identity provider"
msgstr ""

#. type: Plain text
msgid "Use `stackoverflow` as `providerId` when creating a new identity provider instance. Provide `config` attributes - `clientId`, `clientSecret` and `key` as obtained from Stack Apps OAuth page for your application."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create identity-provider/instances -r demorealm -s alias=stackoverflow -s providerId=stackoverflow -s enabled=true  -s 'config.useJwksUrl=\"true\"' -s config.clientId=STACKAPPS_CLIENT_ID -s config.clientSecret=STACKAPPS_CLIENT_SECRET -s config.key=STACKAPPS_KEY\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Storage Providers operations"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a Kerberos storage provider"
msgstr ""

#. type: Plain text
msgid "Use `create` against `user-federation/instances` endpoint. Specify `kerberos` as a value of `providerName` attribute."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create user-federation/instances -r demorealm -s providerName=kerberos -s priority=0 -s config.debug=false -s config.allowPasswordAuthentication=true -s 'config.editMode=\"UNSYNCED\"' -s config.updateProfileFirstLogin=true -s config.allowKerberosAuthentication=true -s 'config.kerberosRealm=\"KEYCLOAK.ORG\"' -s 'config.keyTab=\"http.keytab\"' -s 'config.serverPrincipal=\"HTTP/localhost@KEYCLOAK.ORG\"'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring an LDAP user storage provider"
msgstr ""

#. type: Plain text
msgid "Use `create` against `components` endpoint. Specify `ldap` as a value of `providerId` attribute, and `org.keycloak.storage.UserStorageProvider` as value of `providerType` attribute. Provide realm `id` as value of `parentId` attribute."
msgstr ""

#. type: Plain text
msgid "For example, to create a Kerberos integrated LDAP provider:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=kerberos-ldap-provider -s providerId=ldap -s providerType=org.keycloak.storage.UserStorageProvider -s parentId=3d9c572b-8f33-483f-98a6-8bb421667867  -s 'config.priority=[\"1\"]' -s 'config.fullSyncPeriod=[\"-1\"]' -s 'config.changedSyncPeriod=[\"-1\"]' -s 'config.cachePolicy=[\"DEFAULT\"]' -s config.evictionDay=[] -s config.evictionHour=[] -s config.evictionMinute=[] -s config.maxLifespan=[] -s 'config.batchSizeForSync=[\"1000\"]' -s 'config.editMode=[\"WRITABLE\"]' -s 'config.syncRegistrations=[\"false\"]' -s 'config.vendor=[\"other\"]' -s 'config.usernameLDAPAttribute=[\"uid\"]' -s 'config.rdnLDAPAttribute=[\"uid\"]' -s 'config.uuidLDAPAttribute=[\"entryUUID\"]' -s 'config.userObjectClasses=[\"inetOrgPerson, organizationalPerson\"]' -s 'config.connectionUrl=[\"ldap://localhost:10389\"]'  -s 'config.usersDn=[\"ou=People,dc=keycloak,dc=org\"]' -s 'config.authType=[\"simple\"]' -s 'config.bindDn=[\"uid=admin,ou=system\"]' -s 'config.bindCredential=[\"secret\"]' -s 'config.searchScope=[\"1\"]' -s 'config.useTruststoreSpi=[\"ldapsOnly\"]' -s 'config.connectionPooling=[\"true\"]' -s 'config.pagination=[\"true\"]' -s 'config.allowKerberosAuthentication=[\"true\"]' -s 'config.serverPrincipal=[\"HTTP/localhost@KEYCLOAK.ORG\"]' -s 'config.keyTab=[\"http.keytab\"]' -s 'config.kerberosRealm=[\"KEYCLOAK.ORG\"]' -s 'config.debug=[\"true\"]' -s 'config.useKerberosForPasswordAuthentication=[\"true\"]'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Removing a user storage provider instance"
msgstr ""

#. type: Plain text
msgid "Use storage provider instance's `id` attribute to compose an endpoint uri - `components/ID`."
msgstr ""

#. type: Plain text
msgid "Perform `delete` operation against this endpoint. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh delete components/3d9c572b-8f33-483f-98a6-8bb421667867 -r demorealm\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Triggering synchronization of all users for specific user storage provider"
msgstr ""

#. type: Plain text
msgid "Use storage provider's `id` attribute to compose an endpoint uri - user-storage/ID_OF_USER_STORAGE_INSTANCE/sync Add `action=triggerFullSync` query parameter and use `create`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create user-storage/b7c63d02-b62a-4fc1-977c-947d6a09e1ea/sync?action=triggerFullSync\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Triggering synchronization of changed users for specific user storage provider"
msgstr ""

#. type: Plain text
msgid "Use storage provider's `id` attribute to compose an endpoint uri - user-storage/ID_OF_USER_STORAGE_INSTANCE/sync Add `action=triggerChangedUsersSync` query parameter and use `create`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create user-storage/b7c63d02-b62a-4fc1-977c-947d6a09e1ea/sync?action=triggerChangedUsersSync\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Test LDAP user storage connectivity"
msgstr ""

#. type: Plain text
msgid "Perform `get` operation against `testLDAPConnection` endpoint. Provide query parameters `bindCredential`, `bindDn`, `connectionUrl`, and `useTruststoreSpi`, and set `action` query parameter to `testConnection`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get testLDAPConnection -q action=testConnection -q bindCredential=secret -q bindDn=uid=admin,ou=system -q connectionUrl=ldap://localhost:10389 -q useTruststoreSpi=ldapsOnly\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Test LDAP user storage authentication"
msgstr ""

#. type: Plain text
msgid "Perform `get` operation against `testLDAPConnection` endpoint. Provide query parameters `bindCredential`, `bindDn`, `connectionUrl`, and `useTruststoreSpi`, and set `action` query parameter to `testAuthentication`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get testLDAPConnection -q action=testAuthentication -q bindCredential=secret -q bindDn=uid=admin,ou=system -q connectionUrl=ldap://localhost:10389 -q useTruststoreSpi=ldapsOnly\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Adding mappers"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding a hardcoded role LDAP mapper"
msgstr ""

#. type: Plain text
msgid "Use `create` against `components` endpoint. Set `providerType` attribute to `org.keycloak.storage.ldap.mappers.LDAPStorageMapper`. Set `parentId` attribute to `id` of LDAP provider instance.  Set `providerId` attribute to `hardcoded-ldap-role-mapper`. Make sure to provide a value of `role` config parameter."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=hardcoded-ldap-role-mapper -s providerId=hardcoded-ldap-role-mapper -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper -s parentId=b7c63d02-b62a-4fc1-977c-947d6a09e1ea -s 'config.role=[\"realm-management.create-client\"]'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding a MS Active Directory mapper"
msgstr ""

#. type: Plain text
msgid "Use `create` against `components` endpoint. Set `providerType` attribute to `org.keycloak.storage.ldap.mappers.LDAPStorageMapper`. Set `parentId` attribute to `id` of LDAP provider instance.  Set `providerId` attribute to `msad-user-account-control-mapper`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=msad-user-account-control-mapper -s providerId=msad-user-account-control-mapper -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper -s parentId=b7c63d02-b62a-4fc1-977c-947d6a09e1ea\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding a user attribute LDAP mapper"
msgstr ""

#. type: Plain text
msgid "Use `create` against `components` endpoint. Set `providerType` attribute to `org.keycloak.storage.ldap.mappers.LDAPStorageMapper`. Set `parentId` attribute to `id` of LDAP provider instance.  Set `providerId` attribute to `user-attribute-ldap-mapper`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=user-attribute-ldap-mapper -s providerId=user-attribute-ldap-mapper -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper -s parentId=b7c63d02-b62a-4fc1-977c-947d6a09e1ea -s 'config.\"user.model.attribute\"=[\"email\"]' -s 'config.\"ldap.attribute\"=[\"mail\"]' -s 'config.\"read.only\"=[\"false\"]' -s 'config.\"always.read.value.from.ldap\"=[\"false\"]' -s 'config.\"is.mandatory.in.ldap\"=[\"false\"]'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding a group LDAP mapper"
msgstr ""

#. type: Plain text
msgid "Use `create` against `components` endpoint. Set `providerType` attribute to `org.keycloak.storage.ldap.mappers.LDAPStorageMapper`. Set `parentId` attribute to `id` of LDAP provider instance.  Set `providerId` attribute to `group-ldap-mapper`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=group-ldap-mapper -s providerId=group-ldap-mapper -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper -s parentId=b7c63d02-b62a-4fc1-977c-947d6a09e1ea -s 'config.\"groups.dn\"=[]' -s 'config.\"group.name.ldap.attribute\"=[\"cn\"]' -s 'config.\"group.object.classes\"=[\"groupOfNames\"]' -s 'config.\"preserve.group.inheritance\"=[\"true\"]' -s 'config.\"membership.ldap.attribute\"=[\"member\"]' -s 'config.\"membership.attribute.type\"=[\"DN\"]' -s 'config.\"groups.ldap.filter\"=[]' -s 'config.mode=[\"LDAP_ONLY\"]' -s 'config.\"user.roles.retrieve.strategy\"=[\"LOAD_GROUPS_BY_MEMBER_ATTRIBUTE\"]' -s 'config.\"mapped.group.attributes\"=[\"admins-group\"]' -s 'config.\"drop.non.existing.groups.during.sync\"=[\"false\"]' -s 'config.roles=[\"admins\"]' -s 'config.groups=[\"admins-group\"]' -s 'config.group=[]' -s 'config.preserve=[\"true\"]' -s 'config.membership=[\"member\"]'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Adding a full name LDAP mapper"
msgstr ""

#. type: Plain text
msgid "Use `create` against `components` endpoint. Set `providerType` attribute to `org.keycloak.storage.ldap.mappers.LDAPStorageMapper`. Set `parentId` attribute to `id` of LDAP provider instance.  Set `providerId` attribute to `full-name-ldap-mapper`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh create components -r demorealm -s name=full-name-ldap-mapper -s providerId=full-name-ldap-mapper -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper -s parentId=b7c63d02-b62a-4fc1-977c-947d6a09e1ea -s 'config.\"ldap.full.name.attribute\"=[\"cn\"]' -s 'config.\"read.only\"=[\"false\"]' -s 'config.\"write.only\"=[\"true\"]'\n"
msgstr ""

#. type: Title ===
#, fuzzy, no-wrap
#| msgid "Authentication"
msgid "Authentication operations"
msgstr "認証"

#. type: Labeled list
#, no-wrap
msgid "Setting a password policy"
msgstr ""

#. type: Plain text
msgid "Set realm's `passwordPolicy` attribute to an enumeration expression including specific policy provider id, and an optional configuration:"
msgstr ""

#. type: Plain text
msgid "For example, to set password policy to 20000 hash iterations, requiring at least one special character, at least one uppercase character, at least one digit character, not be equal to user's `username`, and be at least 8 characters long you would use the following:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update realms/demorealm -s 'passwordPolicy=\"hashIterations and specialChars and upperCase and digits and notUsername and length\"'\n"
msgstr ""

#. type: Plain text
msgid "If you want want to use values different from defaults, pass configuration in brackets."
msgstr ""

#. type: Plain text
msgid "For example, to set password policy to 25000 hash iterations, requiring at least two special characters, at least two uppercase characters, at least two lowercase characters, at least two digits, be at least nine characters long, not be equal to user's username, and not repeat for at least four changes back:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh update realms/demorealm -s 'passwordPolicy=\"hashIterations(25000) and specialChars(2) and upperCase(2) and lowerCase(2) and digits(2) and length(9) and notUsername and passwordHistory(4)\"'\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Getting the current password policy"
msgstr ""

#. type: Plain text
msgid "Get current realm configuration and filter out everything but `passwordPolicy` attribute."
msgstr ""

#. type: Plain text
msgid "For example, to display `passwordPolicy` for demorealm:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get realms/demorealm --fields passwordPolicy\n"
msgstr ""

#. type: Labeled list
#, fuzzy, no-wrap
#| msgid "Authentication"
msgid "Listing authentication flows"
msgstr "認証"

#. type: Plain text
msgid "Use `get` operation against `authentication/flows` endpoint. For example:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    $ kcadm.sh get authentication/flows -r demorealm\n"
msgstr ""
