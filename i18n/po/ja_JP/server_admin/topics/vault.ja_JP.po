# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hiroyuki Wada <wadahiro@gmail.com>, 2022
# Tsukasa Amano <t.amano@pro-japan.co.jp>, 2022
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2022\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ==
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Block title
#, no-wrap
msgid "Procedure"
msgstr "手順"

#. type: Block title
#, no-wrap
msgid "Additional resources"
msgstr "追加のリソース"

#. type: Plain text
msgid "ifeval::[{project_community}==true]"
msgstr "ifeval::[{project_community}==true]"

#. type: Plain text
msgid "For example:"
msgstr "例："

#. type: Title ==
#, no-wrap
msgid "Using a vault to obtain secrets"
msgstr "ボールトを使用してシークレットを取得する"

#. type: Plain text
msgid ""
"To obtain a secret from a vault rather than entering it directly, enter the "
"following specially crafted string into the appropriate field:"
msgstr "秘密鍵を直接入力するのではなく、保管庫から秘密鍵を取得するには、以下のような特別な細工をした文字列を該当するフィールドに入力します。"

#. type: delimited block -
#, no-wrap
msgid "**${vault.**_key_**}**\n"
msgstr "**${vault.**_key_**}**\n"

#. type: Plain text
msgid "where the `_key_` is the name of the secret recognized by the vault."
msgstr "ここで、`_key_` は金庫が認識する秘密の名前である。"

#. type: Plain text
msgid ""
"To prevent secrets from leaking across realms, {project_name} combines the "
"realm name with the `_key_` obtained from the vault expression. This method "
"means that the `_key_` does not directly map to an entry in the vault but "
"creates the final entry name according to the algorithm used to combine the "
"`_key_` with the realm name."
msgstr ""
"レルム間で秘密が漏れるのを防ぐために、 {project_name} はレルム名と保管庫の式から得られる `_key_` "
"を組み合わせます。この方法では、`_key_` はデータ保管庫のエントリーに直接マッピングされませんが、 `_key_` "
"とレルム名を組み合わせたアルゴリズムに従って、最終的なエントリー名を作成することになります。"

#. type: Plain text
msgid "You can obtain the secret from the vault in the following fields:"
msgstr "以下のフィールドで、金庫の秘密を取得することができます。"

#. type: Labeled list
#, no-wrap
msgid "SMTP password"
msgstr "SMTPパスワード"

#. type: Plain text
msgid "In the realm <<_email,SMTP settings>>"
msgstr "レルムの<<_email,SMTP設定>>"

#. type: Labeled list
#, no-wrap
msgid "LDAP bind credential"
msgstr "LDAPバインド・クレデンシャル"

#. type: Plain text
msgid "In the <<_ldap,LDAP settings>> of LDAP-based user federation."
msgstr "LDAPベースのユーザー・フェデレーションの<<_ldap,LDAP設定>>内。"

#. type: Labeled list
#, no-wrap
msgid "OIDC identity provider secret"
msgstr "OIDCアイデンティティー・プロバイダー・シークレット"

#. type: Plain text
msgid ""
"In the _Client Secret_ inside identity provider "
"<<_identity_broker_oidc,OpenID Connect Config>>"
msgstr ""
"アイデンティティー・プロバイダー<<_identity_broker_oidc,OpenID Connect設定>>内の _Client Secret_"
" 内。"

#. type: Plain text
msgid ""
"To use a vault, register a vault provider in {project_name}. You can use the"
" providers described <<_providers, here>> or implement your provider. See "
"the link:{developerguide_link}[{developerguide_name}] for more information."
msgstr ""
"vault を使用するには、{project_name} に vault "
"プロバイダを登録する。プロバイダは&lt;&gt;で説明されているものを使用<_providers, "
"here>するか、自分で実装する</_providers,>ことができます。<_providers, "
"here>詳しくはリンク:{developerguide_link}[{developerguide_name}]を参照し</_providers,>てください。"

#. type: delimited block =
msgid ""
"{project_name} permits a maximum of one active vault provider per "
"{project_name} instance at a time. Configure the vault provider in each "
"instance within the cluster consistently."
msgstr ""
"{project_name} では、{project_name} インスタンスごとに、一度に最大 1 つのアクティブなデータ保管庫プロバイダが許可され "
"ます。クラスタ内の各インスタンスでデータ保管庫プロバイダを一貫して構成します。"

#. type: Title ===
#, no-wrap
msgid "Kubernetes / OpenShift files plain-text vault provider"
msgstr "Kubernetes / OpenShift files plain-text ボールト・プロバイダー"

#. type: Plain text
msgid ""
"{project_name} supports vault implementation for "
"https://kubernetes.io/docs/concepts/configuration/secret/[Kubernetes "
"secrets]. You can mount Kubernetes secrets as data volumes, and they appear "
"as a directory with a flat-file structure. {project_name} represents each "
"secret as a file with the file's name as the secret name and the file's "
"contents as the secret value."
msgstr ""
"{project_name}は、https://kubernetes.io/docs/concepts/configuration/secret/[Kubernetes"
" secrets]のVault実装をサポートしています。Kubernetes "
"secretsはデータボリュームとしてマウントでき、フラットファイル構造を持つディレクトリとして表示されます。{project_name} "
"は、各シークレットをファイルとして表現し、ファイル名をシークレット名、ファイルの内容をシークレット値として表現します。"

#. type: Plain text
msgid ""
"You must name the files within this directory as the secret name prefixed by"
" the realm name and an underscore. Double all underscores within the secret "
"name or the realm name in the file name. For example, for a field within a "
"realm named `sso_realm`, a reference to a secret with the name `secret-name`"
" would be written as `${vault.secret-name}`, and the file name looked up "
"would be `sso+++__+++realm+++_+++secret-name`. Note the underscore doubled "
"in realm name."
msgstr ""
"このディレクトリ内のファイル名は、secret名の前にrealm名とアンダースコアを付けた名前にする必要があります。ファイル名中の秘密名またはレルム名中のアンダースコアをすべてダブルにします。例えば、`sso_realm`というrealm内のフィールドで、"
" `secret-name` という名前のsecretを参照する場合、 `${vault.secret-name}` と書き、検索するファイル名は "
"`sso+++__+realm+++_+++secret-name` となります。realm名のアンダースコアが2つであることに注意してください。"

#. type: Plain text
msgid ""
"To use this type of secret store, you must declare the `files-plaintext` "
"vault provider in the standalone.xml file and set its parameter for the "
"directory containing the mounted volume. This example shows the `files-"
"plaintext` provider with the directory where vault files are searched set to"
" `standalone/configuration/vault` relative to the {project_name} base "
"directory:"
msgstr ""
"このタイプの秘密結社を使用するには、standalone.xml ファイルで `files-plaintext` "
"プロバイダを宣言し、マウントされたボリュームを含むディレクトリをそのパラメータに設定する必要があります。この例では、`files-plaintext` "
"プロバイダーが、{project_name} ベースディレクトリからの相対パスで、データ保管庫ファイルが検索されるディレクトリを "
"`standalone/configuration/vault` に設定したものを示しています。"

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"vault\">\n"
"    <default-provider>files-plaintext</default-provider>\n"
"    <provider name=\"files-plaintext\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"dir\" value=\"${jboss.home.dir}/standalone/configuration/vault/\" />\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"
msgstr ""
"<spi name=\"vault\">\n"
"    <default-provider>files-plaintext</default-provider>\n"
"    <provider name=\"files-plaintext\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"dir\" value=\"${jboss.home.dir}/standalone/configuration/vault/\" />\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"

#. type: Plain text
msgid "Here is the equivalent configuration using CLI commands:"
msgstr "CLIコマンドを使用した同等の設定は以下になります。"

#. type: delimited block -
#, no-wrap
msgid ""
"/subsystem=keycloak-server/spi=vault/:add\n"
"/subsystem=keycloak-server/spi=vault/provider=files-plaintext/:add(enabled=true,properties={dir => \"${jboss.home.dir}/standalone/configuration/vault\"})\n"
"/subsystem=keycloak-server/spi=vault:write-attribute(name=default-provider,value=files-plaintext)\n"
msgstr ""
"/subsystem=keycloak-server/spi=vault/:add\n"
"/subsystem=keycloak-server/spi=vault/provider=files-plaintext/:add(enabled=true,properties={dir => \"${jboss.home.dir}/standalone/configuration/vault\"})\n"
"/subsystem=keycloak-server/spi=vault:write-attribute(name=default-provider,value=files-plaintext)\n"

#. type: Title ===
#, no-wrap
msgid "Elytron credential store vault provider"
msgstr "Elytron Credential Storeボールト・プロバイダー"

#. type: Plain text
msgid ""
"{project_name} also provides support for reading secrets stored in an "
"Elytron credential store. The `elytron-cs-keystore` vault provider can "
"retrieve secrets from the credential store's keystore based implementation, "
"which is also the default implementation Elytron provides."
msgstr ""
"{project_name}はElytronのクレデンシャルストアに保存されているシークレットの読み込みもサポートしています。elytron-cs-"
"keystore`データ保管庫プロバイダは、Elytronが提供するデフォルトの実装である、キーストアに基づく実装から秘密を取得することが可能です。"

#. type: Plain text
msgid ""
"A keystore backs this credential store. `JCEKS` is the default format, but "
"you can use other formats such as `PKCS12`. Users can create and manage the "
"store contents using the `elytron` subsystem in WildFly/JBoss EAP, or the "
"`elytron-tool.sh` script."
msgstr ""
"このクレデンシャルストアをバックアップするのがキーストアである。JCEKS` がデフォルトのフォーマットですが、`PKCS12` "
"などの他のフォーマットも使用できます。ユーザーは WildFly/JBoss EAP の `elytron` サブシステム、または `elytron-"
"tool.sh` スクリプトを使用してストアのコンテンツを作成および管理することができます。"

#. type: Plain text
msgid ""
"To use this provider, you must declare the `elytron-cs-keystore` in the "
"`keycloak-server` subsystem and set the location and master secret of the "
"keystore created by Elytron. An example of the minimal configuration for the"
" provider follows:"
msgstr ""
"このプロバイダーを使用するには、 `keycloak-server` サブシステムで `elytron-cs-keystore` "
"を宣言し、Elytronによって作成されたキーストアの場所とマスター・シークレットを設定する必要があります。プロバイダーの最小設定の例を以下に示します。"

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"vault\">\n"
"    <default-provider>elytron-cs-keystore</default-provider>\n"
"    <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"location\" value=\"${jboss.home.dir}/standalone/configuration/vault/credential-store.jceks\" />\n"
"            <property name=\"secret\" value=\"secretpw1!\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"
msgstr ""
"<spi name=\"vault\">\n"
"    <default-provider>elytron-cs-keystore</default-provider>\n"
"    <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"location\" value=\"${jboss.home.dir}/standalone/configuration/vault/credential-store.jceks\" />\n"
"            <property name=\"secret\" value=\"secretpw1!\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"

#. type: Plain text
msgid ""
"If the underlying keystore has a format different from `JCEKS`, you must "
"specify this format by using the `keyStoreType`:"
msgstr ""
"もし、基盤となるキーストアが `JCEKS` と異なるフォーマットである場合、 `keyStoreType` "
"を使ってそのフォーマットを指定する必要があります。"

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"vault\">\n"
"    <default-provider>elytron-cs-keystore</default-provider>\n"
"    <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"location\" value=\"${jboss.home.dir}/standalone/configuration/vault/credential-store.p12\" />\n"
"            <property name=\"secret\" value=\"secretpw1!\"/>\n"
"            <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"
msgstr ""
"<spi name=\"vault\">\n"
"    <default-provider>elytron-cs-keystore</default-provider>\n"
"    <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"location\" value=\"${jboss.home.dir}/standalone/configuration/vault/credential-store.p12\" />\n"
"            <property name=\"secret\" value=\"secretpw1!\"/>\n"
"            <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"

#. type: Plain text
msgid ""
"For the secret, the `elytron-cs-keystore` provider supports clear-text "
"values and masked values by using the `elytron-tool.sh` script:"
msgstr ""
"secretについては、`elytron-cs-keystore` プロバイダが `elytron-tool.sh` "
"スクリプトを用いてクリアテキストの値とマスクされた値をサポートしています。"

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"vault\">\n"
"   ...\n"
"            <property name=\"secret\" value=\"MASK-3u2HNQaMogJJ8VP7J6gRIl;12345678;321\"/>\n"
"   ...\n"
"</spi>\n"
msgstr ""
"<spi name=\"vault\">\n"
"   ...\n"
"            <property name=\"secret\" value=\"MASK-3u2HNQaMogJJ8VP7J6gRIl;12345678;321\"/>\n"
"   ...\n"
"</spi>\n"

#. type: Plain text
msgid ""
"For more information about creating and managing elytron credential stores "
"and masking keystore secrets, see the Elytron documentation."
msgstr ""
"elytronのクレデンシャルストアの作成と管理、およびキーストアの秘密のマスキングに関する詳細については、Elytronのドキュメントを参照してください。"

#. type: delimited block =
msgid ""
"{project_name} implements the `elytron-cs-keystore` vault provider as a "
"WildFly extension and is available if the {project_name} server runs on "
"WildFly/JBoss EAP only."
msgstr ""
"{project_name} は `elytron-cs-keystore` データ保管庫プロバイダーを WildFly "
"拡張として実装し、{project_name} サーバが WildFly/JBoss EAP 上でのみ動作する場合に利用可能です。"

#. type: Title ===
#, no-wrap
msgid "Key resolvers"
msgstr "キーリゾルバー"

#. type: Plain text
msgid ""
"All built-in providers support the configuration of key resolvers. A key "
"resolver implements the algorithm or strategy for combining the realm name "
"with the key, obtained from the `${vault.key}` expression, into the final "
"entry name used to retrieve the secret from the vault. {project_name} uses "
"the `keyResolvers` property to configure the resolvers that the provider "
"uses. The value is a comma-separated list of resolver names. An example of "
"the configuration for the `files-plaintext` provider follows:"
msgstr ""
"すべての組み込みプロバイダはキーリゾルバの設定をサポートしています。キーリゾルバは、レルム名と `${vault.key}` "
"式から得られるキーを組み合わせて、データ保管庫から秘密を取得するための最終的なエントリ名にするアルゴリズムや戦略を実装しています。{project_name}は"
" `keyResolvers` "
"プロパティを使用して、プロバイダが使用するリゾルバを設定します。この値は、カンマで区切られたリゾルバ名のリストです。files-plaintext` "
"プロバイダの設定の例を以下に示します。"

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"vault\">\n"
"    <default-provider>files-plaintext</default-provider>\n"
"    <provider name=\"files-plaintext\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"dir\" value=\"${jboss.home.dir}/standalone/configuration/vault/\" />\n"
"            <property name=\"keyResolvers\" value=\"REALM_UNDERSCORE_KEY, KEY_ONLY\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"
msgstr ""
"<spi name=\"vault\">\n"
"    <default-provider>files-plaintext</default-provider>\n"
"    <provider name=\"files-plaintext\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"dir\" value=\"${jboss.home.dir}/standalone/configuration/vault/\" />\n"
"            <property name=\"keyResolvers\" value=\"REALM_UNDERSCORE_KEY, KEY_ONLY\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"

#. type: Plain text
msgid ""
"The resolvers run in the same order you declare them in the configuration. "
"For each resolver, {project_name} uses the last entry name the resolver "
"produces, which combines the realm with the vault key to search for the "
"vault's secret. If {project_name} finds a secret, it returns the secret. If "
"not, {project_name} uses the next resolver. This search continues until "
"{project_name} finds a non-empty secret or runs out of resolvers. If "
"{project_name} finds no secret, {project_name} returns an empty secret."
msgstr ""
"リゾルバは、構成で宣言したのと同じ順序で実行される。各リゾルバに対して、{project_name} "
"はリゾルバが最後に生成したエントリ名を使用し、レルムとデータ保管庫の鍵を組み合わせてデータ保管庫の秘密を検索する。project_name} "
"が秘密を見つけた場合、その秘密を返す。見つからない場合、{project_name} は次のリゾルバを使用する。この探索は {project_name}"
" が空でない秘密を見つけるか、リゾルバを使い果たすまで続けられる。project_name} が秘密を見つけない場合、{project_name} "
"は空の秘密を返す。"

#. type: Plain text
msgid ""
"In the previous example, {project_name} uses the `REALM_UNDERSCORE_KEY` "
"resolver first. If {project_name} finds an entry in the vault that using "
"that resolver, {project_name} returns that entry. If not, {project_name} "
"searches again using the `KEY_ONLY` resolver. If {project_name} finds an "
"entry by using the `KEY_ONLY` resolver, {project_name} returns that entry. "
"If {project_name} uses all resolvers, {project_name} returns an empty "
"secret."
msgstr ""
"先ほどの例では、{project_name} が最初に `REALM_UNDERSCORE_KEY` リゾルバを使用します。もし "
"{project_name} がそのリゾルバを使ったエントリを金庫の中に見つけたら、 {project_name} "
"はそのエントリを返します。見つからない場合、{project_name} は `KEY_ONLY` "
"リゾルバを使って再度検索を行います。project_name} が `KEY_ONLY` リゾルバを使ってエントリーを見つけた場合、 "
"{project_name} はそのエントリーを返します。project_name} が全てのリゾルバを使用した場合、{project_name} "
"は空の秘密を返す。"

#. type: Plain text
msgid "A list of the currently available resolvers follows:"
msgstr "現在利用可能なリゾルバーのリストは次のとおりです。"

#. type: Plain text
msgid "Name |Description"
msgstr "名前 |説明"

#. type: Plain text
msgid "KEY_ONLY"
msgstr "KEY_ONLY"

#. type: Plain text
msgid ""
"{project_name} ignores the realm name and uses the key from the vault "
"expression."
msgstr "{project_name}はrealm名を無視し、vault式のキーを使用します。"

#. type: Plain text
msgid "REALM_UNDERSCORE_KEY"
msgstr "REALM_UNDERSCORE_KEY"

#. type: Plain text
msgid ""
"{project_name} combines the realm and key by using an underscore character. "
"{project_name} escapes occurrences of underscores in the realm or key with "
"another underscore character. For example, if the realm is called "
"`master_realm` and the key is `smtp_key`, the combined key is "
"`master+++__+++realm_smtp+++__+++key`."
msgstr ""
"{project_name} は、レルムとキーをアンダースコア文字で結合したものです。{project_name} は、realm や key "
"に含まれるアンダースコアを別のアンダースコア文字でエスケープします。例えば、realmが `master_realm` で key が "
"`smtp_key` であれば、結合された key は `master+++__+++realm_smtp+++__+++key` となります。"

#. type: Plain text
msgid "REALM_FILESEPARATOR_KEY"
msgstr "REALM_FILESEPARATOR_KEY"

#. type: Plain text
msgid ""
"{project_name} combines the realm and key by using the platform file "
"separator character."
msgstr "{project_name} は、プラットフォームファイルのセパレータ文字を使用して、レルムとキーを結合します。"

#. type: Plain text
msgid "FACTORY_PROVIDED"
msgstr "FACTORY_PROVIDED"

#. type: Plain text
#, no-wrap
msgid ""
" {project_name} combines the realm and key by using the vault provider factory's `VaultKeyResolver`, allowing the creation of a custom key resolver by extending an existing factory and implementing the `getFactoryResolver` method.\n"
"endif::[]\n"
msgstr ""
"{project_name} は、Vaultプロバイダのファクトリーの `VaultKeyResolver` を使ってレルムとキーを結合します。既存のファクトリーを拡張して `getFactoryResolver` メソッドを実装すれば、カスタムキーリゾルバーを作成することも可能です。\n"
"endif::[].\n"

#. type: Plain text
msgid ""
"If you have not configured a resolver for the built-in providers, "
"{project_name} selects the `REALM_UNDERSCORE_KEY`."
msgstr ""
"ビルトインプロバイダのリゾルバを設定していない場合、{project_name} は `REALM_UNDERSCORE_KEY` を選択します。"

#. type: Plain text
msgid ""
"The `FACTORY_PROVIDED` resolver provides a hook that you can use to "
"implement a custom resolver by extending the provider factory of choice and "
"overriding the `getFactoryResolver` method, so it returns the custom "
"resolver. For example, if you want to use the `elytron-cs-keystore` provider"
" but the built-in resolvers do not match the format used in your keystore, "
"you can extend the `ElytronCSKeystoreProvider` and implement the "
"`getFactoryResolver` method:"
msgstr ""
"FACTORY_PROVIDED` リゾルバは、任意のプロバイダーファクトリを拡張して `getFactoryResolver` "
"メソッドをオーバーライドすることで、カスタムリゾルバを実装するために使用するフックを提供します。例えば、 `elytron-cs-keystore` "
"プロバイダを使用したいが、組み込みのリゾルバはキーストアで使用するフォーマットにマッチしない場合、 "
"`ElytronCSKeystoreProvider` を拡張して `getFactoryResolver` メソッドを実装すればよいでしょう。"

#. type: delimited block -
#, no-wrap
msgid ""
"    public class CustomElytronProviderFactory extends ElytronCSKeyStoreProviderFactory {\n"
"        ...\n"
"        @Override\n"
"        protected VaultKeyResolver getFactoryResolver() {\n"
"            return (realm, key) -> realm + \"###\" + key;\n"
"        }\n"
msgstr ""
"    public class CustomElytronProviderFactory extends ElytronCSKeyStoreProviderFactory {\n"
"        ...\n"
"        @Override\n"
"        protected VaultKeyResolver getFactoryResolver() {\n"
"            return (realm, key) -> realm + \"###\" + key;\n"
"        }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"        @Override\n"
"        public String getId() {\n"
"            return \"custom-elytron-cs-keystore;\n"
"        }\n"
msgstr ""
"        @Override\n"
"        public String getId() {\n"
"            return \"custom-elytron-cs-keystore;\n"
"        }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"        ...\n"
"    }\n"
msgstr ""
"        ...\n"
"    }\n"

#. type: Plain text
msgid ""
"The custom factory returns a key resolver that combines the realm and key "
"with a triple # character. For example, an entry would be "
"`master_realm###smtp_key`. Install this factory like any custom provider."
msgstr ""
"カスタムファクトリは、realmとkeyをトリプル#文字で結合したキーリゾルバを返します。たとえば、`master_realm##smtp_key` "
"のようなエントリーがあります。このファクトリーは、他のカスタムプロバイダと同様にインストールします。"

#. type: delimited block =
msgid ""
"The custom factory must override both the `getFactoryResolver` and `getId` "
"methods. The second method is necessary so that you can properly configure "
"the custom factory in {project_name}."
msgstr ""
"カスタムファクトリは `getFactoryResolver` と `getId` メソッドの両方をオーバーライドする必要があります。2番目のメソッドは"
" {project_name} でカスタムファクトリを適切に設定できるようにするために必要です。"

#. type: Plain text
msgid ""
"To install and use the previous custom provider, the configuration would "
"look similar to this:"
msgstr "以前のカスタムプロバイダをインストールして使用するには、次のような構成になります。"

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"vault\">\n"
"    <default-provider>custom-elytron-cs-keystore</default-provider>\n"
"    <provider name=\"custom-elytron-cs-keystore\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"location\" value=\"${jboss.home.dir}/standalone/configuration/vault/credential-store.p12\" />\n"
"            <property name=\"secret\" value=\"MASK-3u2HNQaMogJJ8VP7J6gRIl;12345678;321\"/>\n"
"            <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"            <property name=\"keyResolvers\" value=\"FACTORY_PROVIDED\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"
msgstr ""
"<spi name=\"vault\">\n"
"    <default-provider>custom-elytron-cs-keystore</default-provider>\n"
"    <provider name=\"custom-elytron-cs-keystore\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"location\" value=\"${jboss.home.dir}/standalone/configuration/vault/credential-store.p12\" />\n"
"            <property name=\"secret\" value=\"MASK-3u2HNQaMogJJ8VP7J6gRIl;12345678;321\"/>\n"
"            <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"            <property name=\"keyResolvers\" value=\"FACTORY_PROVIDED\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"

#. type: Plain text
msgid ""
"This configuration makes {project_name} set up the custom Elytron provider "
"and use the key resolver that the custom factory creates."
msgstr ""
"この設定により、{project_name} "
"はカスタムElytronプロバイダを設定し、カスタムファクトリが作成するキーリゾルバを使用するようになります。"

#. type: Title ===
#, no-wrap
msgid "Sample Configuration"
msgstr "サンプル設定"

#. type: Plain text
msgid ""
"The following is an example of configuring a vault and credential store.  "
"The procedure involves two parts:"
msgstr "以下は、ボールトとクレデンシャル・ストアを構成する例です。この手順には次の2つの部分があります。"

#. type: Plain text
msgid ""
"Creating the credential store and a vault, where the credential store and "
"vault passwords are in plain text."
msgstr "クレデンシャル・ストアとボールトを作成します。クレデンシャル・ストアとボールトのパスワードは平文です。"

#. type: Plain text
msgid ""
"Updating the credential store and vault to have the password use a mask "
"provided by `elytron-tool.sh`."
msgstr "パスワードに `elytron-tool.sh` で提供されたマスクを使用するように、クレデンシャル・ストアとボールトを更新します。"

#. type: Plain text
msgid ""
"In this example, the test target used is an LDAP instance with `BIND DN "
"credential: secret12`. The target is mapped using user federation in the "
"realm `ldaptest`."
msgstr ""
"この例では、 `BIND DN credential: secret12` "
"を設定したLDAPインスタンスをテスト対象として使用します。このテスト対象は、レルム `ldaptest` "
"のユーザー・フェデレーションを使用してマッピングされています。"

#. type: Title ====
#, no-wrap
msgid "Configuring the credential store and vault without a mask"
msgstr "マスクを使用しないクレデンシャル・ストアおよびボールトの設定"

#. type: Plain text
msgid ""
"You create the credential store and a vault where the credential store and "
"vault passwords are in plain text."
msgstr "クレデンシャル・ストアとボールトを作成し、クレデンシャル・ストアとボールトのパスワードをプレーンテキストにします。"

#. type: Plain text
msgid "A running LDAP instance has `BIND DN credential: secret12`."
msgstr "稼働中のLDAPインスタンスは、 `BIND DN credential: secret12` を持っています。"

#. type: Plain text
msgid ""
"The alias uses the format <realm-name>_< key-value> when using the default "
"key resolver. In this case, the instance is running in the realm `ldaptest` "
"and `ldaptest_ldap_secret` is the alias that corresponds to the value "
"`ldap_secret` in that realm."
msgstr ""
"デフォルトのキーリゾルバーを使用する場合、エイリアスは<realm-name>_<key-"
"value>という形式を使用します。この例では、インスタンスはレルム `ldaptest` で動作しており、 "
"`ldaptest_ldap_secret` はそのレルムの `ldap_secret` の値に対応するエイリアスです。"

#. type: Plain text
msgid ""
"The resolver replaces underscore characters with double underscore "
"characters in the realm and key names. For example, for the key "
"`ldaptest_ldap_secret`, the final key will be `ldaptest_ldap__secret`."
msgstr ""
"リゾルバーは、レルム名とキー名のアンダースコア文字をダブル・アンダースコア文字に置き換えます。例えば、キーが "
"`ldaptest_ldap_secret` の場合、最終的なキーは `ldaptest_ldap__secret` となります。"

#. type: Plain text
msgid "Create the Elytron credential store."
msgstr "Elytronのクレデンシャル・ストアを作成します。"

#. type: delimited block -
#, no-wrap
msgid ""
"[standalone@localhost:9990 /] /subsystem=elytron/credential-store=test-"
"store:add(create=true, location=/home/test/test-store.p12, credential-"
"reference={clear-text=testpwd1!},implementation-"
"properties={keyStoreType=PKCS12})\n"
msgstr ""
"[standalone@localhost:9990 /] /subsystem=elytron/credential-store=test-"
"store:add(create=true, location=/home/test/test-store.p12, credential-"
"reference={clear-text=testpwd1!},implementation-"
"properties={keyStoreType=PKCS12})\n"

#. type: Plain text
msgid "Add an alias to the credential store."
msgstr "クレデンシャル・ストアにエイリアスを追加します。"

#. type: delimited block -
#, no-wrap
msgid ""
"/subsystem=elytron/credential-store=test-store:add-"
"alias(alias=ldaptest_ldap__secret,secret-value=secret12)\n"
msgstr ""
"/subsystem=elytron/credential-store=test-store:add-"
"alias(alias=ldaptest_ldap__secret,secret-value=secret12)\n"

#. type: Plain text
msgid ""
"Notice how the resolver causes the key `ldaptest_ldap__secret` to use double"
" underscores."
msgstr "リゾルバーでは、キー `ldaptest_ldap__secret` にダブル・アンダースコアが使われていることに注目してください。"

#. type: Plain text
msgid ""
"List the aliases from the credential store to inspect the contents of the "
"keystore that is produced by Elytron."
msgstr "クレデンシャル・ストアからエイリアスをリストアップして、Elytronが生成するキーストアのコンテンツを検査します。"

#. type: delimited block -
#, no-wrap
msgid ""
"keytool -list -keystore /home/test/test-store.p12 -storetype PKCS12 -storepass testpwd1!\n"
"Keystore type: PKCS12\n"
"Keystore provider: SUN\n"
msgstr ""
"keytool -list -keystore /home/test/test-store.p12 -storetype PKCS12 -storepass testpwd1!\n"
"Keystore type: PKCS12\n"
"Keystore provider: SUN\n"

#. type: delimited block -
#, no-wrap
msgid "Your keystore contains 1 entries\n"
msgstr "キーストアには1つのエントリーがあります。\n"

#. type: delimited block -
#, no-wrap
msgid ""
"ldaptest_ldap__secret/passwordcredential/clear/, Oct 12, 2020, "
"SecretKeyEntry,\n"
msgstr ""
"ldaptest_ldap__secret/passwordcredential/clear/, Oct 12, 2020, "
"SecretKeyEntry,\n"

#. type: Plain text
msgid "Configure the vault SPI in {project_name}."
msgstr "{project_name}でボールトSPIを設定します。"

#. type: delimited block -
#, no-wrap
msgid ""
"/subsystem=keycloak-server/spi=vault:add(default-provider=elytron-cs-"
"keystore)\n"
msgstr ""
"/subsystem=keycloak-server/spi=vault:add(default-provider=elytron-cs-"
"keystore)\n"

#. type: delimited block -
#, no-wrap
msgid ""
"/subsystem=keycloak-server/spi=vault/provider=elytron-cs-"
"keystore:add(enabled=true, properties={location=>/home/test/test-store.p12, "
"secret=>testpwd1!, keyStoreType=>PKCS12})\n"
msgstr ""
"/subsystem=keycloak-server/spi=vault/provider=elytron-cs-"
"keystore:add(enabled=true, properties={location=>/home/test/test-store.p12, "
"secret=>testpwd1!, keyStoreType=>PKCS12})\n"

#. type: Plain text
msgid ""
"At this point, the vault and credentials store passwords are not masked."
msgstr "この時点では、ボールトとクレデンシャル・ストアのパスワードはマスクされていません。"

#. type: delimited block -
#, no-wrap
msgid ""
"        <spi name=\"vault\">\n"
"                <default-provider>elytron-cs-keystore</default-provider>\n"
"                <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"                    <properties>\n"
"                        <property name=\"location\" value=\"/home/test/test-store.p12\"/>\n"
"                        <property name=\"secret\" value=\"testpwd1!\"/>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </properties>\n"
"                </provider>\n"
"            </spi>\n"
msgstr ""
"        <spi name=\"vault\">\n"
"                <default-provider>elytron-cs-keystore</default-provider>\n"
"                <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"                    <properties>\n"
"                        <property name=\"location\" value=\"/home/test/test-store.p12\"/>\n"
"                        <property name=\"secret\" value=\"testpwd1!\"/>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </properties>\n"
"                </provider>\n"
"            </spi>\n"

#. type: delimited block -
#, no-wrap
msgid ""
"         <credential-stores>\n"
"                <credential-store name=\"test-store\" location=\"/home/test/test-store.p12\" create=\"true\">\n"
"                    <implementation-properties>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </implementation-properties>\n"
"                    <credential-reference clear-text=\"testpwd1!\"/>\n"
"                </credential-store>\n"
"         </credential-stores>\n"
msgstr ""
"         <credential-stores>\n"
"                <credential-store name=\"test-store\" location=\"/home/test/test-store.p12\" create=\"true\">\n"
"                    <implementation-properties>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </implementation-properties>\n"
"                    <credential-reference clear-text=\"testpwd1!\"/>\n"
"                </credential-store>\n"
"         </credential-stores>\n"

#. type: Plain text
msgid ""
"In the LDAP provider, replace `binDN credential` with "
"`${vault.ldap_secret}`."
msgstr "LDAPプロバイダーで、 `binDN credential` を `${vault.ldap_secret}` に置き換えてください。"

#. type: Plain text
msgid "Test your LDAP connection."
msgstr "LDAP接続をテストしてください。"

#. type: Block title
#, no-wrap
msgid "LDAP Vault"
msgstr "LDAPボールト"

#. type: Plain text
msgid "image:images/ldap-vault.png[LDAP Vault]"
msgstr "image:images/ldap-vault.png[LDAP Vault]"

#. type: Title ====
#, no-wrap
msgid "Masking the password in the credential store and vault"
msgstr "クレデンシャル・ストアとボールトでのパスワードのマスキング"

#. type: Plain text
msgid ""
"You can now update the credential store and vault to have passwords that use"
" a mask provided by `elytron-tool.sh`."
msgstr ""
"`elytron-tool.sh` が提供するマスクを使用したパスワードを設定するように、クレデンシャル・ストアとボールトを更新することができます。"

#. type: Plain text
msgid ""
"Create a masked password using values for the `salt` and the `iteration` "
"parameters:"
msgstr "`salt` と `iteration` パラメーターの値を使用して、マスクされたパスワードを作成します。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ EAP_HOME/bin/elytron-tool.sh mask --salt SALT --iteration ITERATION_COUNT "
"--secret PASSWORD\n"
msgstr ""
"$ EAP_HOME/bin/elytron-tool.sh mask --salt SALT --iteration ITERATION_COUNT "
"--secret PASSWORD\n"

#. type: delimited block -
#, no-wrap
msgid ""
"elytron-tool.sh mask --salt 12345678 --iteration 123 --secret testpwd1!\n"
"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\n"
msgstr ""
"elytron-tool.sh mask --salt 12345678 --iteration 123 --secret testpwd1!\n"
"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\n"

#. type: Plain text
msgid ""
"Update the Elytron credential store configuration to use the masked "
"password."
msgstr "マスクされたパスワードを使用するように、Elytronのクレデンシャル・ストアの設定を更新します。"

#. type: delimited block -
#, no-wrap
msgid ""
"/subsystem=elytron/credential-store=cs-store:write-"
"attribute(name=credential-reference.clear-"
"text,value=\"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\")\n"
msgstr ""
"/subsystem=elytron/credential-store=cs-store:write-"
"attribute(name=credential-reference.clear-"
"text,value=\"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\")\n"

#. type: Plain text
msgid ""
"Update the {project_name} vault configuration to use the masked password."
msgstr "マスクされたパスワードを使用するように{project_name}ボールトの設定を更新します。"

#. type: delimited block -
#, no-wrap
msgid ""
"/subsystem=keycloak-server/spi=vault/provider=elytron-cs-keystore:remove()\n"
"/subsystem=keycloak-server/spi=vault/provider=elytron-cs-keystore:add(enabled=true, properties={location=>/home/test/test-store.p12, secret=>”MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123”, keyStoreType=>PKCS12})\n"
msgstr ""
"/subsystem=keycloak-server/spi=vault/provider=elytron-cs-keystore:remove()\n"
"/subsystem=keycloak-server/spi=vault/provider=elytron-cs-keystore:add(enabled=true, properties={location=>/home/test/test-store.p12, secret=>”MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123”, keyStoreType=>PKCS12})\n"

#. type: Plain text
msgid "The vault and credential store are now masked:"
msgstr "ボールトとクレデンシャル・ストアが次のようにマスクされます。"

#. type: delimited block -
#, no-wrap
msgid ""
"        <spi name=\"vault\">\n"
"                <default-provider>elytron-cs-keystore</default-provider>\n"
"                <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"                    <properties>\n"
"                        <property name=\"location\" value=\"/home/test/test-store.p12\"/>\n"
"                        <property name=\"secret\" value=\"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\"/>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </properties>\n"
"                </provider>\n"
"            </spi>\n"
"         ....\n"
"         .....\n"
"         <credential-stores>\n"
"                <credential-store name=\"test-store\" location=\"/home/test/test-store.p12\" create=\"true\">\n"
"                    <implementation-properties>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </implementation-properties>\n"
"                    <credential-reference clear-text=\"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\"/>\n"
"                </credential-store>\n"
"         </credential-stores>\n"
msgstr ""
"        <spi name=\"vault\">\n"
"                <default-provider>elytron-cs-keystore</default-provider>\n"
"                <provider name=\"elytron-cs-keystore\" enabled=\"true\">\n"
"                    <properties>\n"
"                        <property name=\"location\" value=\"/home/test/test-store.p12\"/>\n"
"                        <property name=\"secret\" value=\"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\"/>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </properties>\n"
"                </provider>\n"
"            </spi>\n"
"         ....\n"
"         .....\n"
"         <credential-stores>\n"
"                <credential-store name=\"test-store\" location=\"/home/test/test-store.p12\" create=\"true\">\n"
"                    <implementation-properties>\n"
"                        <property name=\"keyStoreType\" value=\"PKCS12\"/>\n"
"                    </implementation-properties>\n"
"                    <credential-reference clear-text=\"MASK-3BUbFEyWu0lRAu8.fCqyUk;12345678;123\"/>\n"
"                </credential-store>\n"
"         </credential-stores>\n"

#. type: Plain text
msgid ""
"You can now test the connection to the LDAP using `${vault.ldap_secret}`."
msgstr "これで、 `${vault.ldap_secret}` を使用してLDAPへの接続をテストすることができます。"

#. type: Plain text
msgid ""
"For more information about the Elytron tool, see "
"link:https://access.redhat.com/documentation/en-"
"us/red_hat_jboss_enterprise_application_platform/7.3/html/how_to_configure_server_security/securely_storing_credentials#cred_store_elytron_client[Using"
" Credential Stores with Elytron Client]."
msgstr ""
"Elytronツールの詳細については、 link:https://access.redhat.com/documentation/en-"
"us/red_hat_jboss_enterprise_application_platform/7.3/html/how_to_configure_server_security/securely_storing_credentials#cred_store_elytron_client[Using"
" Credential Stores with Elytron Client] を参照してください。"
