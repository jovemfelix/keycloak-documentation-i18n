# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Attribute :installguide_troubleshooting_name:
#, no-wrap
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#. type: Title ==
#, no-wrap
msgid "Client Registration CLI"
msgstr "クライアント登録CLI"

#. type: Plain text
msgid ""
"`Client Registration CLI` is a command line interface tool for application "
"developers to configure new clients in self-service manner when integrating "
"with {project_name}. It is specifically designed to interact with "
"{project_name} Client Registration REST endpoints."
msgstr ""
"`クライアント登録CLI` "
"は、アプリケーション開発者が{project_name}と統合する際にセルフ・サービスで新しいクライアントを設定するためのコマンドライン・インターフェイス・ツールです。"
" これは、{project_name}クライアント登録RESTエンドポイントと対話するように特別に設計されています。"

#. type: Plain text
msgid ""
"In order for any application to be able to use {project_name} it is "
"necessary to create or obtain a client configuration. Usually a new client "
"is configured for each new application hosted on a unique hostname. When "
"application interacts with {project_name} it needs to identify itself with a"
" `client_id` in order for {project_name} to be able to provide login page, "
"SSO session management, and other services."
msgstr ""
"アプリケーションが{project_name}を使用できるようにするには、クライアントの設定を作成または取得する必要があります。通常、新しいクライアントは一意なホスト名でホストされる新しいアプリケーションごとに設定されます。アプリケーションが{project_name}と対話する際に、{project_name}がログインページ、SSOセッション管理、およびその他のサービスを提供できるようにするために、自身を"
" `client_id` で識別する必要があります。"

#. type: Plain text
msgid ""
"`Client Registration CLI` allows you to configure application clients from a"
" command line, and can be used in shell scripts as well."
msgstr ""
"`クライアント登録CLI` では、コマンドラインからアプリケーション・クライアントを設定することができます。シェルスクリプトでも使用できます。"

#. type: Plain text
#, no-wrap
msgid ""
"To allow a particular user to use `Client Registration CLI` the {project_name} administrator will typically use `Admin Console` to configure\n"
" a new user with proper roles, or configure a new client and client secret to grant access to `Client Registration REST API`.\n"
msgstr ""
"特定のユーザーが `クライアント登録CLI` を使用できるようにするため、通常、{project_name}管理者は `管理コンソール` "
"を使って新しいユーザーを適切なロールで設定するか、`クライアント登録REST API` "
"へのアクセス権を与えるように新しいクライアントとクライアント・シークレットを設定します 。\n"

#. type: Title ===
#, no-wrap
msgid "Configuring a new regular user for use with Client Registration CLI"
msgstr "クライアント登録CLIで使用するための新しい正規ユーザーの設定"

#. type: Plain text
msgid ""
"Login as `admin` into `Admin Console` (e.g. "
"`http://localhost:8080/auth/admin`). Select a realm you want to administer."
"  If you want to use existing user, select that user for edit, otherwise "
"create a new user. Go to `Role Mappings` tab. Under `Client Roles` select "
"`realm-management` (if in master realm, select `NAME-realm` where NAME is "
"name of the target realm - users in master realm can have access to any "
"other realms).  Under `Available Roles` select `manage-client` for full set "
"of client management permissions. Alternatively you can choose `view-"
"clients` for read-only or `create-client` for ability to create new clients."
"  These permissions grant user the capability to perform operations without "
"the use of <<_initial_access_token,Initial Access Token>> or "
"<<_registration_access_token,Registration Access Token>>."
msgstr ""
"`管理コンソール` （例： `http://localhost:8080/auth/admin` ）に `admin` "
"としてログインしてください。管理するレルムを選択します。既存のユーザーを使用する場合は、編集するユーザーを選択し、そうでない場合は新しいユーザーを作成します。"
" `Role Mappings` のタブに行きます。 `Client Roles` の下で、 `realm-management` "
"を選択します（masterレルムの場合、 `NAME-realm` "
"を選択します。NAMEは対象のレルムの名前で、masterレルムのユーザーは他のレルムにアクセスできます）。 `Available Roles` "
"で、クライアント管理権限のフルセットである `manage-client` を選択します。あるいは、読み取り専用の場合は `view-clients` "
"を、新しいクライアントを作成する場合は ` create-client` "
"を選択できます。これらの権限により、ユーザーは<<_initial_access_token,初期アクセス・トークン>>または<<_registration_access_token,登録アクセス・トークン>>を使用せずに操作を実行できるようになります。"

#. type: Plain text
msgid ""
"It's possible to not assign users any of `realm-management` roles. In that "
"case user can still login with `Registration Client CLI` but will not be "
"able to use it without being in possession of an `Initial Access Token`. "
"Trying to perform any operations without it will result in `403 Forbidden` "
"error."
msgstr ""
"ユーザーに `realm-management` ロールを割り当てないことも可能です。その場合、ユーザーは `Registration Client "
"CLI` でまだログインすることができますが、 `初期アクセス・トークン` "
"を所有していなければ使用することはできません。それなしで何らかの操作を実行しようとすると `403 Forbidden` エラーが発生します。"

#. type: Plain text
msgid ""
"Administrator can issue `Initial Access Tokens` from `Admin Console` by "
"selecting `Client Registration` tab under `Realm Settings`, then `Initial "
"Access Token` sub-tab."
msgstr ""
"管理者は、 `Realm Settings` の下の `Client Registration` タブを選択し、 `Initial Access "
"Token` サブ・タブを選択することによって、管理コンソールから `初期アクセストークン` を発行することができます。"

#. type: Title ===
#, no-wrap
msgid "Configuring a client for use with Client Registration CLI"
msgstr "クライアント登録CLIで使用するためのクライアント設定"

#. type: Plain text
msgid ""
"By default the `Client Registration CLI` identifies to the server as `admin-"
"cli` client which is automatically configured for every new realm.  No "
"additional client configuration is necessary when logging in with username. "
"You may wish to strengthen security by configuring the client `Access Type` "
"as `Confidential`, and under `Credentials` tab select `ClientId and Secret`."
" When running `kcreg config credentials` you would then also have to provide"
" a secret by using `--secret` option."
msgstr ""
"デフォルトでは、 `クライアント登録CLI` はサーバーに `admin-cli` "
"クライアントとして識別されます。これは新しいレルムごとに自動的に設定されます。ユーザー名でログインする場合、追加のクライアント設定は不要です。セキュリティを強化したい場合は、クライアントの"
" `Access Type` を `Confidential` に設定し、 `Credentials` タブで `ClientId and "
"Secret` を選択します。 `kcreg config credentials` を実行する際に、 ` --secret` "
"オプションを使用してシークレットを提供する必要があります。"

#. type: Plain text
msgid ""
"If you want to use a separate client configuration for `Registration Client "
"CLI` then you can create a new client - you can call it `reg-cli` for "
"example. When running `kcreg config credentials` you then need to specify "
"which `clientId` to use e.g. `--client reg-cli`."
msgstr ""
"`クライアント登録CLI` に対して別のクライアント設定を使いたい場合は、新しいクライアントを作成することができます。例えば、それを `reg-cli`"
" と呼びます。 `kcreg config credentials` を実行する際は、 `--client reg-cli` のように、どの "
"`clientId` を使用するかを指定する必要があります。"

#. type: Plain text
msgid ""
"If you want to use a service account associated with the client, you first "
"need to enable service accounts. In `Admin Console` go to `Clients` section,"
" and select a client for edit. Then under `Settings` change the `Access "
"Type` to `Confidential`, and toggle `Service Accounts Enabled` setting to "
"`On`. Make sure to `Save` the configuration."
msgstr ""
"クライアントに関連付けられたサービス・アカウントを使用する場合は、まずサービス・アカウントを有効にする必要があります。 `管理者コンソール` で "
"`Clients` のセクションに行き、編集するクライアントを選択します。 次に、`Settings` の下で、 `Access Type` を "
"`Confidential` に変更し、 `Service Accounts Enabled` を `On` に切り替えます。設定を `Save` "
"することを忘れないでください。"

#. type: Plain text
msgid ""
"Under `Credentials` tab you can choose to configure either `Client Id and "
"Secret`, or `Signed JWT`."
msgstr "`Credentials` タブで、`Client Id and Secret` か `Signed JWT` のどちらかを設定できます。"

#. type: Plain text
msgid ""
"Having done that you can then omit specifying user during `kcreg config "
"credentials`, and only provide client secret or keystore info."
msgstr ""
"これを行うと、 `kcreg config credentials` "
"の実行中にユーザーを指定することを省略し、クライアント・シークレットやキーストア情報のみを提供することができます。"

#. type: Title ===
#, no-wrap
msgid "Installing Client Registration CLI"
msgstr "クライアント登録CLIのインストール"

#. type: Plain text
msgid ""
"Client Registration CLI is packaged inside Keycloak Server distribution. You"
" can find execution scripts inside `bin` directory."
msgstr ""
"クライアント登録CLIは、{project_name}サーバーの配布物の中にパッケージされています。 `bin` "
"ディレクトリ内に実行スクリプトがあります。"

#. type: Plain text
msgid ""
"The Linux script is called `kcreg.sh`, and the one for Windows is called "
"`kcreg.bat`."
msgstr "Linuxのスクリプトは `kcreg.sh` 、Windowsのスクリプトは `kcreg.bat` という名前です。"

#. type: Plain text
msgid ""
"In order to setup the client for use from any location on the filesystem you"
" may want to add Keycloak server directory to your PATH."
msgstr ""
"ファイルシステム上の任意の場所からクライアントを使用できるように設定するには、PATHにKeycloakサーバーのディレクトリを追加します。"

#. type: Plain text
msgid "On Linux:"
msgstr "Linuxの場合："

#. type: delimited block -
#, no-wrap
msgid ""
"$ export PATH=$PATH:$KEYCLOAK_HOME/bin\n"
"$ kcreg.sh\n"
msgstr ""
"$ export PATH=$PATH:$KEYCLOAK_HOME/bin\n"
"$ kcreg.sh\n"

#. type: Plain text
msgid "On Windows:"
msgstr "Windowsの場合："

#. type: delimited block -
#, no-wrap
msgid ""
"c:\\> set PATH=%PATH%;%KEYCLOAK_HOME%\\bin\n"
"c:\\> kcreg\n"
msgstr ""
"c:\\> set PATH=%PATH%;%KEYCLOAK_HOME%\\bin\n"
"c:\\> kcreg\n"

#. type: Plain text
msgid ""
"Where KEYCLOAK_HOME refers to a directory where Keycloak Server distribution"
" was unpacked."
msgstr "KEYCLOAK_HOMEは、Keycloakサーバーの配布物が解凍されたディレクトリを示します。"

#. type: Title ===
#, no-wrap
msgid "Using Client Registration CLI"
msgstr "クライアント登録CLIの使用"

#. type: Plain text
msgid ""
"First you need to start an authenticated session (i.e. logging in) by "
"providing credentials. Then you perform operations on Client Registration "
"REST endpoint."
msgstr ""
"まず、クレデンシャルを提供して認証されたセッション（つまりログイン）を開始する必要があります。次に、クライアント登録RESTエンドポイントで操作を実行します。"

#. type: Plain text
msgid "For example on Linux:"
msgstr "例えば、Linux の場合："

#. type: delimited block -
#, no-wrap
msgid ""
"$ kcreg.sh config credentials --server http://localhost:8080/auth --realm demo --user user --client reg-cli\n"
"$ kcreg.sh create -s clientId=my_client -s 'redirectUris=[\"http://localhost:8980/myapp/*\"]'\n"
"$ kcreg.sh get my_client\n"
msgstr ""
"$ kcreg.sh config credentials --server http://localhost:8080/auth --realm demo --user user --client reg-cli\n"
"$ kcreg.sh create -s clientId=my_client -s 'redirectUris=[\"http://localhost:8980/myapp/*\"]'\n"
"$ kcreg.sh get my_client\n"

#. type: Plain text
msgid "Or on Windows:"
msgstr "または、Windowsの場合："

#. type: delimited block -
#, no-wrap
msgid ""
"c:\\> kcreg config credentials --server http://localhost:8080/auth --realm demo --user user --client reg-cli\n"
"c:\\> kcreg create -s clientId=my_client -s \"redirectUris=[\\\"http://localhost:8980/myapp/*\\\"]\"\n"
"c:\\> kcreg get my_client\n"
msgstr ""
"c:\\> kcreg config credentials --server http://localhost:8080/auth --realm demo --user user --client reg-cli\n"
"c:\\> kcreg create -s clientId=my_client -s \"redirectUris=[\\\"http://localhost:8980/myapp/*\\\"]\"\n"
"c:\\> kcreg get my_client\n"

#. type: Plain text
msgid ""
"In a production environment Keycloak has to be accessed with `https:` to "
"avoid exposing tokens to network sniffers. If server's certificate is not "
"issued by one of the trusted CAs that are included in Java's default "
"certificate truststore, you will need to prepare a truststore.jks file, and "
"instruct `Client Registration CLI` to use it."
msgstr ""
"プロダクション環境では、ネットワーク・スニファーでトークンの解読を避けるため、Keycloakには `https:` "
"でアクセスする必要があります。サーバー証明書が、Javaのデフォルトの証明書トラスト・ストアに含まれている信頼されたCAのいずれかによって発行されていない場合は、"
" `truststore.jks` ファイルを準備し、それを使用するように、 `クライアント登録CLI` に指示する必要があります。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kcreg.sh config truststore --trustpass $PASSWORD "
"~/.keycloak/truststore.jks\n"
msgstr ""
"$ kcreg.sh config truststore --trustpass $PASSWORD "
"~/.keycloak/truststore.jks\n"

#. type: delimited block -
#, no-wrap
msgid ""
"c:\\> kcreg config truststore --trustpass %PASSWORD% "
"%HOMEPATH%\\.keycloak\\truststore.jks\n"
msgstr ""
"c:\\> kcreg config truststore --trustpass %PASSWORD% "
"%HOMEPATH%\\.keycloak\\truststore.jks\n"

#. type: Title ====
#, no-wrap
msgid "Logging In"
msgstr "ログイン"

#. type: Plain text
msgid ""
"When logging in with `Client Registration CLI` you specify a server endpoint"
" url, and a realm. Then you specify a username or, alternatively, a client "
"id, which will result in special service account being used. In the first "
"case, a password for the specified user has to be used at login. In the "
"latter case there is no user password - only client secret or a `Signed JWT`"
" is used."
msgstr ""
"`クライアント登録CLI` "
"でログインするときに、サーバーのエンドポイントURLとレルムを指定します。次に、ユーザー名、またはクライアントIDを指定します。これにより、特別なサービス・アカウントが使用されます。前者の場合、ログイン時に指定されたユーザーのパスワードを使用する必要があります。後者の場合、ユーザーのパスワードは使いません。クライアント・シークレットまたは"
" `署名済みJWT` のみが使用されます。"

#. type: Plain text
msgid ""
"Regardless of the method, the account that logs in needs proper permissions "
"to be able to perform client registration operations. Keep in mind that any "
"account in non-master realm can only have permissions to manage clients "
"within the same realm.  If you need to manage different realms, you can "
"either configure multiple users in different realms, or you can create a "
"single user in `master` realm and add it roles for managing clients in "
"different realms."
msgstr ""
"方法に関係なく、ログインするアカウントには、クライアント登録操作を実行できる適切な権限が必要です。非マスター・レルムのアカウントは、同じレルム内のクライアントを管理する権限しか持てません。異なるレルムを管理する必要がある場合は、複数のユーザーを異なるレルムで設定するか、"
" `master` レルムで1人のユーザーを作成して、異なるレルムのクライアントを管理するロールを追加します。"

#. type: Plain text
msgid ""
"`Client Registration CLI` by itself does not support configuring users, for "
"that you would need to use `Admin Console` web interface or Admin Client CLI"
" command line tool (see link:{adminguide_link}[{adminguide_name}] for more "
"details)."
msgstr ""
"インターフェイス`クライアント登録CLI` "
"自体はユーザーの設定をサポートしていません。そのためには、管理者コンソールのWebインターフェイスまたは管理者クライアントCLIコマンドライン・ツール（詳細はlink:{adminguide_link}"
" [{adminguide_name}]）を使う必要があります。"

#. type: Plain text
msgid ""
"When `kcreg` successfully logs in it receives authorization tokens and saves"
" them into private config file so they can be used for subsequent "
"invocations. See <<_working_with_alternative_configurations, next chapter>> "
"for more info on configuration file."
msgstr ""
"`kcreg` "
"が正常にログインすると、認可トークンを受け取り、それらをプライベート設定ファイルに保存して、後続の呼び出しに使用できるようにします。設定ファイルの詳細については、<<_working_with_alternative_configurations,"
" 次の章>>を参照してください。"

#. type: Plain text
msgid ""
"See built-in help for more information on using `Client Registration CLI`."
msgstr "`クライアント登録CLI` の使用方法の詳細については、組み込みのヘルプを参照してください。"

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh help\n"
msgstr "$ kcreg.sh help\n"

#. type: delimited block -
#, no-wrap
msgid "c:\\> kcreg help\n"
msgstr "c:\\> kcreg help\n"

#. type: Plain text
msgid ""
"See `kcreg config credentials --help` for more information about starting an"
" authenticated session."
msgstr "認証されたセッションの開始についての詳細は、 `kcreg config credentials --help` を参照してください。"

#. type: Title ===
#, no-wrap
msgid "Working with alternative configurations"
msgstr "代替設定の使用"

#. type: Plain text
msgid ""
"By default, `Client Registration CLI` automatically maintains a "
"configuration file at a default location - `./.keycloak/kcreg.config` under "
"user's home directory."
msgstr ""
"デフォルトで `クライアント登録CLI` は、ユーザーのホーム・ディレクトリの下にあるデフォルトの場所（ "
"`./.keycloak/kcreg.config` ）に設定ファイルを自動的に保持します。"

#. type: Plain text
msgid ""
"You can always use `--config` option to point to a different file / "
"location. This way you can mantain multiple authenticated sessions in "
"parallel. It is safest to perform operations tied to a single config file "
"from a single thread."
msgstr ""
"`--config` "
"オプションを使うと、いつでも別のファイル/場所を指すことができます。これにより、複数の認証済みセッションを並行して処理できます。1つのスレッドから1つの設定ファイルに結び付けられた操作を実行するのが最も安全です。"

#. type: Plain text
msgid ""
"Make sure to not make the config file visible to other users on the system "
"as it contains access tokens, and secrets that should be kept private."
msgstr ""
"アクセス・トークンとプライベートにしておかなければならないシークレットが含まれているため、設定ファイルをシステム上の他のユーザーには参照できないようにしてください。"

#. type: Plain text
msgid ""
"You may want to avoid storing any secrets at all inside a config file for "
"the price of less convenience and having to do more token requests.  In that"
" case you can use `--no-config` option with all your commands. You will have"
" to specify all authentication info with each `kcreg` invocation."
msgstr ""
"利便性が低く、さらにトークン要求をしなければならないために、設定ファイルの中にシークレットを保存することは避けたいかもしれません。その場合、すべてのコマンドで"
" `--no-config` オプションを使用できます。 `kcreg` の呼び出しごとに、すべての認証情報を指定する必要があります。"

#. type: Title ====
#, no-wrap
msgid "Initial Access and Registration Access Tokens"
msgstr "初期アクセス・トークンと登録アクセス・トークン"

#. type: Plain text
msgid ""
"`Client Registration CLI` can be used by developers who don't have an "
"account configured at Keycloak server they want to use.  That's possible "
"when realm administrator issues developer an `Initial Access Token`. It is "
"up to realm administrator to decide how to issue and distribute these "
"tokens. Admin can limit Initial Access Token's maximum age, and a total "
"number of clients that can be created with it. Many Initial Access Tokens "
"can be created, and it's up to realm administrator to distribute them to "
"application developers."
msgstr ""
"`クライアント登録CLI` は、使用したいKeycloakサーバーで設定されたアカウントを持っていない開発者が使用できます。レルム管理者が開発者に "
"`初期アクセストークン` "
"を発行することにより、開発者は使用することができます。トークンを発行して配布する方法を決定するのは、レルム管理者次第です。管理者は、初期アクセス・トークンの最大有効期間と作成できるクライアントの総数を制限できます。レルム管理者は、たくさんの初期アクセス・トークンを作成することができますが、それをアプリケーション開発者に配布するのはレルム管理者次第となります。"

#. type: Plain text
msgid ""
"Once a developer is in possession of Initial Access Token they can use it to"
" create new clients without authenticating with `kcreg config credentials`. "
"Rather, Initial Access Token can be stored in configuration, or specified as"
" part of `kcreg create` command."
msgstr ""
"開発者が初期アクセス・トークンを所有すると、 `kcreg config credentials` "
"で認証せずに新しいクライアントを作成できます。それどころか、初期アクセス・トークンは設定に保存することも、 `kcreg create` "
"コマンドの一部として指定することもできます。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kcreg.sh config initial-token $TOKEN\n"
"$ kcreg.sh create -s clientId=myclient\n"
msgstr ""
"$ kcreg.sh config initial-token $TOKEN\n"
"$ kcreg.sh create -s clientId=myclient\n"

#. type: Plain text
msgid "or"
msgstr "または"

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh create -s clientId=myclient -t $TOKEN\n"
msgstr "$ kcreg.sh create -s clientId=myclient -t $TOKEN\n"

#. type: delimited block -
#, no-wrap
msgid ""
"c:\\> kcreg config initial-token %TOKEN%\n"
"c:\\> kcreg create -s clientId=myclient\n"
msgstr ""
"c:\\> kcreg config initial-token %TOKEN%\n"
"c:\\> kcreg create -s clientId=myclient\n"

#. type: delimited block -
#, no-wrap
msgid "c:\\> kcreg create -s clientId=myclient -t %TOKEN%\n"
msgstr "c:\\> kcreg create -s clientId=myclient -t %TOKEN%\n"

#. type: Plain text
msgid ""
"When Initial Access Token is used, the server response will include a newly "
"issued Registration Access Token.  Any subsequent operation for that client "
"needs to be performed by authenticating with that token which is only valid "
"for that client."
msgstr ""
"初期アクセス・トークンが使用されると、サーバー・レスポンスに新たに発行された登録アクセス・トークンを含まれます。そのクライアントの後続の操作は、そのクライアントに対してのみ有効な登録アクセス・トークンで認証し、実行する必要があります。"

#. type: Plain text
msgid ""
"`Client Registration CLI` automatically uses its private configuration file "
"to save, and use this token with its associated client.  As long as the same"
" configuration file is used for all client operations, the developer will "
"not need to authenticate in order to read, update, or delete a client that "
"was created this way."
msgstr ""
"`クライアント登録CLI` "
"は、自動的にプライベート設定ファイルを使用して保存し、このトークンを関連するクライアントと共に使用します。同じ設定ファイルがすべてのクライアント操作に使用されている限り、このように作成されたクライアントの読み取り、更新、削除を行うために、開発者は認証する必要はありません。"

#. type: Plain text
msgid ""
"You can read more about Initial Access and Registration Access Tokens in "
"<<_client_registration,Client Registration chapter>>."
msgstr ""
"初期アクセス・トークンと登録アクセス・トークンの詳細については、<<_client_registration,クライアント登録の章>>をご覧ください。"

#. type: Plain text
msgid ""
"See `kcreg config initial-token --help` and `kcreg config registration-token"
" --help` for more information on how to configure them with `Client "
"Registration CLI`."
msgstr ""
"`Client Registration CLI` で設定する方法の詳細については、 `kcreg config initial-token "
"--help` と `kcreg config registration-token --help` を参照してください。"

#. type: Title ====
#, no-wrap
msgid "Creating client configuration"
msgstr "クライアント設定の作成"

#. type: Plain text
msgid ""
"After authenticating with credentials or configuring Initial Access Token, "
"the first operation will usually be to create a new client."
msgstr "クレデンシャルで認証したり、初期アクセス・トークンを設定した後に、通常は最初の操作で新しいクライアントを作成します。"

#. type: Plain text
msgid ""
"We've seen the simplest create command already. Often we may want to use a "
"prepared JSON file as a template and set / override some of the attributes. "
"For example, here is how you read a JSON file, override any `clientId` it "
"may contain, set any other attributes as well, and after successful creation"
" print the configuration to standard output."
msgstr ""
"最もシンプルなcreateコマンドをすでに見てきました。準備されたJSONファイルをテンプレートとして使用し、いくつかの属性を設定/上書きすることはよくあります。たとえば、JSONファイルを読み込み、含まれている"
" `clientId` をオーバーライドし、他の属性も設定し、正常に作成した後に設定を標準出力に出力する方法があります。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kcreg.sh create -f client-template.json -s clientId=myclient -s "
"baseUrl=/myclient -s 'redirectUris=[\"/myclient/*\"]' -o\n"
msgstr ""
"$ kcreg.sh create -f client-template.json -s clientId=myclient -s "
"baseUrl=/myclient -s 'redirectUris=[\"/myclient/*\"]' -o\n"

#. type: delimited block -
#, no-wrap
msgid ""
"C:\\> kcreg create -f client-template.json -s clientId=myclient -s "
"baseUrl=/myclient -s \"redirectUris=[\\\"/myclient/*\\\"]\" -o\n"
msgstr ""
"C:\\> kcreg create -f client-template.json -s clientId=myclient -s "
"baseUrl=/myclient -s \"redirectUris=[\\\"/myclient/*\\\"]\" -o\n"

#. type: Plain text
msgid "See `kcreg create --help` for more information about `kcreg create`."
msgstr "`kcreg create` の詳細については、 `kcreg create --help` を参照してください。"

#. type: Plain text
msgid ""
"You can use `kcreg attrs` to list available attributes. Keep in mind that "
"many configuration attributes are not checked for validity or consistency. "
"It is up to you to specify proper values. Also note that you should not have"
" any `id` fields in your template and should not specify them as arguments "
"to `kcreg create`."
msgstr ""
"`kcreg attrs` "
"を使って、利用可能な属性の一覧を取得できます。多くの設定属性の妥当性や一貫性はチェックされません。適切な値を指定する必要があります。また、テンプレートには"
" `id` フィールドを持たせず、 `kcreg create` の引数としても指定しないように注意してください。"

#. type: Title ====
#, no-wrap
msgid "Retrieving client configuration"
msgstr "クライアント設定の取得"

#. type: Plain text
msgid "You can retrieve an existing client by using `kcreg get`."
msgstr "既に存在するクライアントについては、 `kcreg get` を使用することで取得できます。"

#. type: Plain text
msgid "For example, on Linux:"
msgstr "例えば、Linux の場合："

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh get myclient\n"
msgstr "$ kcreg.sh get myclient\n"

#. type: delimited block -
#, no-wrap
msgid "C:\\> kcreg get myclient\n"
msgstr "C:\\> kcreg get myclient\n"

#. type: Plain text
msgid ""
"You can also get client configuration as adapter configuration file which "
"you can package with your web application."
msgstr "また、Webアプリケーションとパッケージ化できるアダプター設定ファイルとして、クライアント設定を取得することもできます。"

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh get myclient -e install > keycloak.json\n"
msgstr "$ kcreg.sh get myclient -e install > keycloak.json\n"

#. type: delimited block -
#, no-wrap
msgid "C:\\> kcreg get myclient -e install > keycloak.json\n"
msgstr "C:\\> kcreg get myclient -e install > keycloak.json\n"

#. type: Plain text
msgid "See `kcreg get --help` for more information about `kcreg get`."
msgstr "`kcreg get` の詳細については、 `kcreg get --help` を参照してください。"

#. type: Title ====
#, no-wrap
msgid "Modifying client configuration"
msgstr "クライアント設定の更新"

#. type: Plain text
msgid "There are two modes of updating client configuration."
msgstr "クライアント設定の更新には2つのモードがあります。"

#. type: Plain text
msgid ""
"One is to submit a complete new state to the server after getting current "
"configuration, saving it into a file, editing it, and posting it back."
msgstr "1つは、現在の設定を取得してファイルに保存し、編集してから、新しい状態をサーバーにPOSTで送信する方法です。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kcreg.sh get myclient > myclient.json\n"
"$ vi myclient.json\n"
"$ kcreg.sh update myclient -f myclient.json\n"
msgstr ""
"$ kcreg.sh get myclient > myclient.json\n"
"$ vi myclient.json\n"
"$ kcreg.sh update myclient -f myclient.json\n"

#. type: delimited block -
#, no-wrap
msgid ""
"C:\\> kcreg get myclient > myclient.json\n"
"C:\\> notepad myclient.json\n"
"C:\\> kcreg update myclient -f myclient.json\n"
msgstr ""
"C:\\> kcreg get myclient > myclient.json\n"
"C:\\> notepad myclient.json\n"
"C:\\> kcreg update myclient -f myclient.json\n"

#. type: Plain text
msgid ""
"Another way is to fetch current client, set or delete fields on it, and post"
" it back all in one single step."
msgstr "別の方法は、現在のクライアントをフェッチし、そのフィールドを設定または削除し、POST送信するという全てを1つのステップで行う方法です。"

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh update myclient -s enabled=false -d redirectUris\n"
msgstr "$ kcreg.sh update myclient -s enabled=false -d redirectUris\n"

#. type: delimited block -
#, no-wrap
msgid "C:\\> kcreg update myclient -s enabled=false -d redirectUris\n"
msgstr "C:\\> kcreg update myclient -s enabled=false -d redirectUris\n"

#. type: Plain text
msgid ""
"You can even use a file that only contains changes to be applied so you "
"don't have to specify too many values as arguments.  In this case specify "
"`--merge` to tell `Client Registration CLI` that rather than treating JSON "
"file as full new configuration, it should treat it as a set of attributes to"
" be applied over existing configuration."
msgstr ""
"適用される変更のみを含むファイルを使用することもできるので、引数として多すぎる値を指定する必要はありません。この場合、 `--merge` を "
"`クライアント登録CLI` "
"に指定すると、JSONファイルは完全な新しい設定として扱われるのではなく、既存の設定に適用される属性のセットとして扱われます。"

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh update myclient --merge -d redirectUris -f mychanges.json\n"
msgstr "$ kcreg.sh update myclient --merge -d redirectUris -f mychanges.json\n"

#. type: delimited block -
#, no-wrap
msgid "C:\\> kcreg update myclient --merge -d redirectUris -f mychanges.json\n"
msgstr "C:\\> kcreg update myclient --merge -d redirectUris -f mychanges.json\n"

#. type: Plain text
msgid "See `kcreg update --help` for more information about `kcreg update`."
msgstr "`kcreg update` の詳細については、 `kcreg update --help` を参照してください。"

#. type: Title ====
#, no-wrap
msgid "Deleting client configuration"
msgstr "クライアント設定の削除"

#. type: Plain text
msgid "You may sometimes also need to delete a client."
msgstr "クライアントを削除する必要がある場合もあります。"

#. type: delimited block -
#, no-wrap
msgid "$ kcreg.sh delete myclient\n"
msgstr "$ kcreg.sh delete myclient\n"

#. type: delimited block -
#, no-wrap
msgid "C:\\> kcreg delete myclient\n"
msgstr "C:\\> kcreg delete myclient\n"

#. type: Plain text
msgid "See `kcreg delete --help` for more information about `kcreg delete`."
msgstr "`kcreg delete` の詳細については、 `kcreg delete --help` を参照してください。"

#. type: Title ====
#, no-wrap
msgid "Refreshing Invalid Registration Access Tokens"
msgstr "無効な登録アクセス・トークンのリフレッシュ"

#. type: Plain text
msgid ""
"When performing a CRUD operation using `--no-config` mode, `Client "
"Registration CLI` can no longer handle Registration Access Tokens for you.  "
"In that case it is possible to lose track of most recently issued "
"Registration Access Token for a client, which makes it impossible to perform"
" any further CRUD operations on that client without authenticating with "
"account that has 'manage-clients' permissions."
msgstr ""
"`--no-config` モードを使用してCRUD操作を実行すると、 `クライアント登録CLI` "
"は登録アクセス・トークンを処理できなくなります。その場合、クライアントのために最も最近発行された登録アクセス・トークンの追跡を失う可能性があり"
"、'manage-clients'権限を持つアカウントで認証なしでは、そのクライアントでそれ以上のCRUD操作を実行することは不可能になります。"

#. type: Plain text
msgid ""
"If you have permissions, you can issue a new Registration Access Token for "
"the client, and have it printed to stdout or saved to a config file of your "
"choice. Otherwise you have to ask realm administrator to issue new "
"Registration Access Token for your client, and send it to you. You can then "
"pass it to any CRUD command via `--token` option. You can also use `kcreg "
"config registration-token` command to save the new token in configuration "
"file, and have `Client Registration CLI` automatically handle it for you "
"from that point on."
msgstr ""
"アクセス権を持っている場合は、クライアント用に新しい登録アクセス・トークンを発行し、標準出力に出力するか、選択した設定ファイルに保存することができます。それ以外の場合は、レルム管理者にクライアントの新しい登録アクセス・トークンを発行して、それを送信するよう依頼する必要があります。その際は、"
" `--token` オプションを使ってCRUDコマンドに渡すことができます。また、 `kcreg config registration-token`"
" コマンドを使って新しいトークンを設定ファイルに保存し、 `クライアント登録CLI` が自動的にそれを処理するようにすることもできます。"

#. type: Plain text
msgid ""
"See `kcreg update-token --help` for more information about `kcreg update-"
"token`."
msgstr "`kcreg update-token` の詳細については、 `kcreg update-token --help` を参照してください。"

#. type: Plain text
msgid ""
"Q: When logging in I get an error: `Parameter client_assertion_type is "
"missing [invalid_client]`"
msgstr ""
"Q：ログインすると、次のエラーが表示されます： `Parameter client_assertion_type is missing "
"[invalid_client]`"

#. type: Plain text
msgid ""
"A: Your client is configured with `Signed JWT` token credentials which means"
" you have to use `--keystore` parameter when logging in."
msgstr ""
"A：クライアントが `Signed JWT` のトークン・クレデンシャルで設定されています。つまり、ログイン時に `--keystore` "
"パラメータを使用する必要があります。"
