# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hiroyuki Wada <wadahiro@gmail.com>, 2017
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2018\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ====
#, no-wrap
msgid "Installation"
msgstr "インストール"

#. type: Title ====
#, no-wrap
msgid "Usage"
msgstr "使い方"

#. type: Title ===
#, no-wrap
msgid "Node.js Adapter"
msgstr "Node.jsアダプター"

#. type: Plain text
msgid ""
"{project_name} provides a Node.js adapter built on top of "
"https://github.com/senchalabs/connect[Connect] to protect server-side "
"JavaScript apps - the goal was to be flexible enough to integrate with "
"frameworks like https://expressjs.com/[Express.js]."
msgstr ""
"{project_name}は、サーバーサイドのJavaScriptアプリケーションを保護するために、 "
"https://github.com/senchalabs/connect[Connect] "
"の上に構築されたNode.jsアダプターを提供します。目標は、 https://expressjs.com/[Express.js] "
"などのフレームワークと統合するのに十分な柔軟性を得ることです。"

#. type: Plain text
msgid ""
"The library can be downloaded directly from https://www.npmjs.com/package"
"/keycloak-connect[ {project_name} organization] and the source is available "
"at https://github.com/keycloak/keycloak-nodejs-connect[GitHub]."
msgstr ""
"ライブラリーは https://www.npmjs.com/package/keycloak-connect[{project_name} "
"organization] から直接ダウンロードすることができ、ソースは https://github.com/keycloak/keycloak-"
"nodejs-connect[GitHub] で利用可能です。"

#. type: Plain text
msgid ""
"To use the Node.js adapter, first you must create a client for your "
"application in the {project_name} Administration Console. The adapter "
"supports public, confidential, and bearer-only access type. Which one to "
"choose depends on the use-case scenario."
msgstr ""
"Node.jsアダプターを使用するには、まず、{project_name}管理コンソールでアプリケーションのクライアントを作成する必要があります。アダプターは、public、confidential"
"、bearer-onlyのアクセス・タイプをサポートします。どれを選択するかは、ユースケースのシナリオに依存します。"

#. type: Plain text
msgid ""
"Once the client is created click the `Installation` tab, select "
"`{project_name} OIDC JSON` for `Format Option`, and then click `Download`. "
"The downloaded `keycloak.json` file should be at the root folder of your "
"project."
msgstr ""
"クライアントが作成されたら、 `Installation` タブをクリックし、 `Format Option` で `{project_name} "
"OIDC JSON` を選択し、 `Download` をクリックします。ダウンロードした `keycloak.json` "
"ファイルはプロジェクトのルート・フォルダーに配置します。"

#. type: Plain text
msgid ""
"Assuming you've already installed https://nodejs.org[Node.js], create a "
"folder for your application:"
msgstr ""
"すでに https://nodejs.org[Node.js] がインストールされていると仮定して、アプリケーション用のフォルダーを作成します。"

#. type: Plain text
#, no-wrap
msgid "    mkdir myapp && cd myapp\n"
msgstr "    mkdir myapp && cd myapp\n"

#. type: Plain text
msgid ""
"Use `npm init` command to create a `package.json` for your application. Now "
"add the {project_name} connect adapter in the dependencies list:"
msgstr ""
"`npm init` コマンドを使ってアプリケーション用の `package.json` "
"を作成してください。依存関係リストに{project_name}接続アダプターを追加します。"

#. type: delimited block -
#, no-wrap
msgid ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"{project_versionNpm}\"\n"
"    }\n"
msgstr ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"{project_versionNpm}\"\n"
"    }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"file:keycloak-connect-{project_versionNpm}.tgz\"\n"
"    }\n"
msgstr ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"file:keycloak-connect-{project_versionNpm}.tgz\"\n"
"    }\n"

#. type: Labeled list
#, no-wrap
msgid "Instantiate a Keycloak class"
msgstr "Keycloakクラスのインスタンスの作成"

#. type: Plain text
msgid ""
"The `Keycloak` class provides a central point for configuration and "
"integration with your application.  The simplest creation involves no "
"arguments."
msgstr "`Keycloak` クラスは、アプリケーションの設定と統合のための中心的なポイントを提供します。最も簡単な作成では引数はありません。"

#. type: delimited block -
#, no-wrap
msgid ""
"    var session = require('express-session');\n"
"    var Keycloak = require('keycloak-connect');\n"
msgstr ""
"    var session = require('express-session');\n"
"    var Keycloak = require('keycloak-connect');\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    var memoryStore = new session.MemoryStore();\n"
"    var keycloak = new Keycloak({ store: memoryStore });\n"
msgstr ""
"    var memoryStore = new session.MemoryStore();\n"
"    var keycloak = new Keycloak({ store: memoryStore });\n"

#. type: Plain text
msgid ""
"By default, this will locate a file named `keycloak.json` alongside the main"
" executable of your application to initialize keycloak-specific settings "
"(public key, realm name, various URLs).  The `keycloak.json` file is "
"obtained from the {project_name} Admin Console."
msgstr ""
"デフォルトでは、keycloak固有の設定（公開鍵、レルム名、さまざまなURL）を初期化するために、アプリケーションのメイン実行可能ファイルの横に "
"`keycloak.json` という名前のファイルがあります。 `keycloak.json` "
"ファイルは、{project_name}管理者コンソールから取得できます。"

#. type: Plain text
msgid ""
"Instantiation with this method results in all of the reasonable defaults "
"being used. As alternative, it's also possible to provide a configuration "
"object, rather than the `keycloak.json` file:"
msgstr ""
"このメソッドでインスタンス化すると、合理的なデフォルトが使用されます。代替として、 `keycloak.json` "
"ファイルではなく、次のように設定オブジェクトを提供することも可能です。"

#. type: delimited block -
#, no-wrap
msgid ""
"    let kcConfig = {\n"
"        clientId: 'myclient',\n"
"        bearerOnly: true,\n"
"        serverUrl: 'http://localhost:8080/auth',\n"
"        realm: 'myrealm',\n"
"        realmPublicKey: 'MIIBIjANB...'\n"
"    };\n"
msgstr ""
"    let kcConfig = {\n"
"        clientId: 'myclient',\n"
"        bearerOnly: true,\n"
"        serverUrl: 'http://localhost:8080/auth',\n"
"        realm: 'myrealm',\n"
"        realmPublicKey: 'MIIBIjANB...'\n"
"    };\n"

#. type: delimited block -
#, no-wrap
msgid "    let keycloak = new Keycloak({ store: memoryStore }, kcConfig);\n"
msgstr "    let keycloak = new Keycloak({ store: memoryStore }, kcConfig);\n"

#. type: Labeled list
#, no-wrap
msgid "Configuring a web session store"
msgstr "Webセッションストアの設定"

#. type: Plain text
msgid ""
"If you want to use web sessions to manage server-side state for "
"authentication, you need to initialize the `Keycloak(...)` with at least a "
"`store` parameter, passing in the actual session store that `express-"
"session` is using."
msgstr ""
"認証のために、Webセッションを使用してサーバーサイドの状態を管理する場合は、少なくとも `store` パラメータで `Keycloak(...)` "
"を初期化し、実際のセッションストアで `express-session` 使用する必要があります。"

#. type: delimited block -
#, no-wrap
msgid ""
"    var session = require('express-session');\n"
"    var memoryStore = new session.MemoryStore();\n"
msgstr ""
"    var session = require('express-session');\n"
"    var memoryStore = new session.MemoryStore();\n"

#. type: delimited block -
#, no-wrap
msgid "    var keycloak = new Keycloak({ store: memoryStore });\n"
msgstr "    var keycloak = new Keycloak({ store: memoryStore });\n"

#. type: Labeled list
#, no-wrap
msgid "Passing a custom scope value"
msgstr "カスタムスコープ値を渡す"

#. type: Plain text
msgid ""
"By default, the scope value `openid` is passed as a query parameter to "
"{project_name}'s login URL, but you can add an additional custom value:"
msgstr ""
"デフォルトでは、スコープ値 `openid` "
"はクエリー・パラメーターとして{project_name}のログインURLに渡されますが、次のようにカスタム値を新たに追加することもできます。"

#. type: Plain text
#, no-wrap
msgid "    var keycloak = new Keycloak({ scope: 'offline_access' });\n"
msgstr "    var keycloak = new Keycloak({ scope: 'offline_access' });\n"

#. type: Title ====
#, no-wrap
msgid "Installing Middleware"
msgstr "Middlewareのインストール"

#. type: Plain text
msgid ""
"Once instantiated, install the middleware into your connect-capable app:"
msgstr "インスタンス化が完了したら、Middlewareをconnectに対応したアプリケーションにインストールします。"

#. type: delimited block -
#, no-wrap
msgid "    var app = express();\n"
msgstr "    var app = express();\n"

#. type: delimited block -
#, no-wrap
msgid "    app.use( keycloak.middleware() );\n"
msgstr "    app.use( keycloak.middleware() );\n"

#. type: Title ====
#, no-wrap
msgid "Protecting Resources"
msgstr "リソースの保護"

#. type: Labeled list
#, no-wrap
msgid "Simple authentication"
msgstr "単純な認証"

#. type: Plain text
msgid ""
"To enforce that a user must be authenticated before accessing a resource, "
"simply use a no-argument version of `keycloak.protect()`:"
msgstr "リソースにアクセスする前にユーザーの認証を強制するには、引数のないバージョンの `keycloak.protect()` を使うだけです。"

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/complain', keycloak.protect(), complaintHandler );\n"
msgstr "    app.get( '/complain', keycloak.protect(), complaintHandler );\n"

#. type: Labeled list
#, no-wrap
msgid "Role-based authorization"
msgstr "ロールベースの認可"

#. type: Plain text
msgid "To secure a resource with an application role for the current app:"
msgstr "現在のアプリケーションのアプリケーション・ロールでリソースを保護するには次のようにします。"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get( '/special', keycloak.protect('special'), specialHandler );\n"
msgstr ""
"    app.get( '/special', keycloak.protect('special'), specialHandler );\n"

#. type: Plain text
msgid "To secure a resource with an application role for a *different* app:"
msgstr "*別の* アプリケーションのアプリケーション・ロールでリソースを保護するには次のようにします。"

#. type: Plain text
#, no-wrap
msgid ""
"    app.get( '/extra-special', keycloak.protect('other-app:special'), "
"extraSpecialHandler );\n"
msgstr ""
"    app.get( '/extra-special', keycloak.protect('other-app:special'), "
"extraSpecialHandler );\n"

#. type: Plain text
msgid "To secure a resource with a realm role:"
msgstr "レルムロールを使用してリソースを保護するには次のようにします。"

#. type: Plain text
#, no-wrap
msgid ""
"    app.get( '/admin', keycloak.protect( 'realm:admin' ), adminHandler );\n"
msgstr ""
"    app.get( '/admin', keycloak.protect( 'realm:admin' ), adminHandler );\n"

#. type: Labeled list
#, no-wrap
msgid "Advanced authorization"
msgstr "高度な認可"

#. type: Plain text
msgid ""
"To secure resources based on parts of the URL itself, assuming a role exists"
" for each section:"
msgstr "URLの一部に基づいてリソースを保護するには次のようにします（各セクションにロールが存在すると仮定します）。"

#. type: delimited block -
#, no-wrap
msgid ""
"    function protectBySection(token, request) {\n"
"      return token.hasRole( request.params.section );\n"
"    }\n"
msgstr ""
"    function protectBySection(token, request) {\n"
"      return token.hasRole( request.params.section );\n"
"    }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get( '/:section/:page', keycloak.protect( protectBySection ), "
"sectionHandler );\n"
msgstr ""
"    app.get( '/:section/:page', keycloak.protect( protectBySection ), "
"sectionHandler );\n"

#. type: Title ====
#, no-wrap
msgid "Additional URLs"
msgstr "追加のURL"

#. type: Labeled list
#, no-wrap
msgid "Explicit user-triggered logout"
msgstr "明示的なユーザー・トリガー・ログアウト"

#. type: Plain text
msgid ""
"By default, the middleware catches calls to `/logout` to send the user "
"through a {project_name}-centric logout workflow. This can be changed by "
"specifying a `logout` configuration parameter to the `middleware()` call:"
msgstr ""
"デフォルトでは、Middlewareは `/logout` "
"の呼び出しをキャッチし、ユーザーに{project_name}中心のログアウト・ワークフローを経由させます。これは、 `logout` "
"設定パラメーターを `middleware()` の呼び出しに指定することで変更できます。"

#. type: Plain text
#, no-wrap
msgid "    app.use( keycloak.middleware( { logout: '/logoff' } ));\n"
msgstr "    app.use( keycloak.middleware( { logout: '/logoff' } ));\n"

#. type: Plain text
msgid "{project_name} Admin Callbacks::"
msgstr "{project_name} Adminコールバック"

#. type: Plain text
msgid ""
"Also, the middleware supports callbacks from the {project_name} console to "
"log out a single session or all sessions.  By default, these type of admin "
"callbacks occur relative to the root URL of `/` but can be changed by "
"providing an `admin` parameter to the `middleware()` call:"
msgstr ""
"また、Middlewareは{project_name}コンソールからのコールバックをサポートしており、単一セッションまたはすべてのセッションをログアウトします。デフォルトでは、これらのタイプのAdminコールバックは"
" `/` のルートURLを基準に発生しますが、 `admin` パラメーターを `middleware()` の呼び出しに与えることで変更できます。"

#. type: Plain text
#, no-wrap
msgid "    app.use( keycloak.middleware( { admin: '/callbacks' } );\n"
msgstr "    app.use( keycloak.middleware( { admin: '/callbacks' } );\n"
