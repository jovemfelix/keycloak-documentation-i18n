# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hiroyuki Wada <wadahiro@gmail.com>, 2020
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2021\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ====
#, no-wrap
msgid "Installation"
msgstr "インストール"

#. type: Title ====
#, no-wrap
msgid "Usage"
msgstr "使い方"

#. type: Title ===
#, no-wrap
msgid "Node.js Adapter"
msgstr "Node.jsアダプター"

#. type: Plain text
msgid ""
"{project_name} provides a Node.js adapter built on top of "
"https://github.com/senchalabs/connect[Connect] to protect server-side "
"JavaScript apps - the goal was to be flexible enough to integrate with "
"frameworks like https://expressjs.com/[Express.js]."
msgstr ""
"{project_name}は、サーバーサイドのJavaScriptアプリケーションを保護するために、 "
"https://github.com/senchalabs/connect[Connect] "
"の上に構築されたNode.jsアダプターを提供します。目標は、 https://expressjs.com/[Express.js] "
"などのフレームワークと統合するのに十分な柔軟性を得ることです。"

#. type: Plain text
msgid ""
"The library can be downloaded directly from https://www.npmjs.com/package"
"/keycloak-connect[ {project_name} organization] and the source is available "
"at https://github.com/keycloak/keycloak-nodejs-connect[GitHub]."
msgstr ""
"ライブラリーは https://www.npmjs.com/package/keycloak-connect[{project_name} "
"organization] から直接ダウンロードすることができ、ソースは https://github.com/keycloak/keycloak-"
"nodejs-connect[GitHub] で利用可能です。"

#. type: Plain text
msgid ""
"To use the Node.js adapter, first you must create a client for your "
"application in the {project_name} Administration Console. The adapter "
"supports public, confidential, and bearer-only access type. Which one to "
"choose depends on the use-case scenario."
msgstr ""
"Node.jsアダプターを使用するには、まず、{project_name}管理コンソールでアプリケーションのクライアントを作成する必要があります。アダプターは、public、confidential"
"、bearer-onlyのアクセス・タイプをサポートします。どれを選択するかは、ユースケースのシナリオに依存します。"

#. type: Plain text
msgid ""
"Once the client is created click the `Installation` tab, select "
"`{project_name} OIDC JSON` for `Format Option`, and then click `Download`. "
"The downloaded `keycloak.json` file should be at the root folder of your "
"project."
msgstr ""
"クライアントが作成されたら、 `Installation` タブをクリックし、 `Format Option` で `{project_name} "
"OIDC JSON` を選択し、 `Download` をクリックします。ダウンロードした `keycloak.json` "
"ファイルはプロジェクトのルート・フォルダーに配置します。"

#. type: Plain text
msgid ""
"Assuming you've already installed https://nodejs.org[Node.js], create a "
"folder for your application:"
msgstr ""
"すでに https://nodejs.org[Node.js] がインストールされていると仮定して、アプリケーション用のフォルダーを作成します。"

#. type: Plain text
#, no-wrap
msgid "    mkdir myapp && cd myapp\n"
msgstr "    mkdir myapp && cd myapp\n"

#. type: Plain text
msgid ""
"Use `npm init` command to create a `package.json` for your application. Now "
"add the {project_name} connect adapter in the dependencies list:"
msgstr ""
"`npm init` コマンドを使ってアプリケーション用の `package.json` "
"を作成してください。依存関係リストに{project_name}接続アダプターを追加します。"

#. type: delimited block -
#, no-wrap
msgid ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"{project_versionNpm}\"\n"
"    }\n"
msgstr ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"{project_versionNpm}\"\n"
"    }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"file:keycloak-connect-{project_versionNpm}.tgz\"\n"
"    }\n"
msgstr ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"file:keycloak-connect-{project_versionNpm}.tgz\"\n"
"    }\n"

#. type: Labeled list
#, no-wrap
msgid "Instantiate a Keycloak class"
msgstr "Keycloakクラスのインスタンスの作成"

#. type: Plain text
msgid ""
"The `Keycloak` class provides a central point for configuration and "
"integration with your application.  The simplest creation involves no "
"arguments."
msgstr "`Keycloak` クラスは、アプリケーションの設定と統合のための中心的なポイントを提供します。最も簡単な作成では引数はありません。"

#. type: delimited block -
#, no-wrap
msgid ""
"    var session = require('express-session');\n"
"    var Keycloak = require('keycloak-connect');\n"
msgstr ""
"    var session = require('express-session');\n"
"    var Keycloak = require('keycloak-connect');\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    var memoryStore = new session.MemoryStore();\n"
"    var keycloak = new Keycloak({ store: memoryStore });\n"
msgstr ""
"    var memoryStore = new session.MemoryStore();\n"
"    var keycloak = new Keycloak({ store: memoryStore });\n"

#. type: Plain text
msgid ""
"By default, this will locate a file named `keycloak.json` alongside the main"
" executable of your application to initialize keycloak-specific settings "
"(public key, realm name, various URLs).  The `keycloak.json` file is "
"obtained from the {project_name} Admin Console."
msgstr ""
"デフォルトでは、keycloak固有の設定（公開鍵、レルム名、さまざまなURL）を初期化するために、アプリケーションのメイン実行可能ファイルの横に "
"`keycloak.json` という名前のファイルがあります。 `keycloak.json` "
"ファイルは、{project_name}管理者コンソールから取得できます。"

#. type: Plain text
msgid ""
"Instantiation with this method results in all of the reasonable defaults "
"being used. As alternative, it's also possible to provide a configuration "
"object, rather than the `keycloak.json` file:"
msgstr ""
"このメソッドでインスタンス化すると、合理的なデフォルトが使用されます。代替として、 `keycloak.json` "
"ファイルではなく、次のように設定オブジェクトを提供することも可能です。"

#. type: delimited block -
#, no-wrap
msgid ""
"    let kcConfig = {\n"
"        clientId: 'myclient',\n"
"        bearerOnly: true,\n"
"        serverUrl: 'http://localhost:8080/auth',\n"
"        realm: 'myrealm',\n"
"        realmPublicKey: 'MIIBIjANB...'\n"
"    };\n"
msgstr ""
"    let kcConfig = {\n"
"        clientId: 'myclient',\n"
"        bearerOnly: true,\n"
"        serverUrl: 'http://localhost:8080/auth',\n"
"        realm: 'myrealm',\n"
"        realmPublicKey: 'MIIBIjANB...'\n"
"    };\n"

#. type: delimited block -
#, no-wrap
msgid "    let keycloak = new Keycloak({ store: memoryStore }, kcConfig);\n"
msgstr "    let keycloak = new Keycloak({ store: memoryStore }, kcConfig);\n"

#. type: Plain text
msgid ""
"Applications can also redirect users to their preferred identity provider by"
" using:"
msgstr "アプリケーションは、次の方法を使用して、ユーザーを優先度の高いアイデンティティー・プロバイダーにリダイレクトすることもできます。"

#. type: delimited block -
#, no-wrap
msgid ""
"    let keycloak = new Keycloak({ store: memoryStore, idpHint: myIdP }, "
"kcConfig);\n"
msgstr ""
"    let keycloak = new Keycloak({ store: memoryStore, idpHint: myIdP }, "
"kcConfig);\n"

#. type: Labeled list
#, no-wrap
msgid "Configuring a web session store"
msgstr "Webセッションストアの設定"

#. type: Plain text
msgid ""
"If you want to use web sessions to manage server-side state for "
"authentication, you need to initialize the `Keycloak(...)` with at least a "
"`store` parameter, passing in the actual session store that `express-"
"session` is using."
msgstr ""
"認証のために、Webセッションを使用してサーバーサイドの状態を管理する場合は、少なくとも `store` パラメータで `Keycloak(...)` "
"を初期化し、実際のセッションストアで `express-session` 使用する必要があります。"

#. type: delimited block -
#, no-wrap
msgid ""
"    var session = require('express-session');\n"
"    var memoryStore = new session.MemoryStore();\n"
msgstr ""
"    var session = require('express-session');\n"
"    var memoryStore = new session.MemoryStore();\n"

#. type: delimited block -
#, no-wrap
msgid "    var keycloak = new Keycloak({ store: memoryStore });\n"
msgstr "    var keycloak = new Keycloak({ store: memoryStore });\n"

#. type: Labeled list
#, no-wrap
msgid "Passing a custom scope value"
msgstr "カスタムスコープ値を渡す"

#. type: Plain text
msgid ""
"By default, the scope value `openid` is passed as a query parameter to "
"{project_name}'s login URL, but you can add an additional custom value:"
msgstr ""
"デフォルトでは、スコープ値 `openid` "
"はクエリー・パラメーターとして{project_name}のログインURLに渡されますが、次のようにカスタム値を新たに追加することもできます。"

#. type: Plain text
#, no-wrap
msgid "    var keycloak = new Keycloak({ scope: 'offline_access' });\n"
msgstr "    var keycloak = new Keycloak({ scope: 'offline_access' });\n"

#. type: Title ====
#, no-wrap
msgid "Installing Middleware"
msgstr "Middlewareのインストール"

#. type: Plain text
msgid ""
"Once instantiated, install the middleware into your connect-capable app:"
msgstr "インスタンス化が完了したら、Middlewareをconnectに対応したアプリケーションにインストールします。"

#. type: delimited block -
#, no-wrap
msgid "    var app = express();\n"
msgstr "    var app = express();\n"

#. type: delimited block -
#, no-wrap
msgid "    app.use( keycloak.middleware() );\n"
msgstr "    app.use( keycloak.middleware() );\n"

#. type: Title ====
#, no-wrap
msgid "Configuration for Proxies"
msgstr "プロキシーの設定"

#. type: Plain text
msgid ""
"If the application is running behind a proxy that terminates an SSL "
"connection Express must be configured per the "
"link:https://expressjs.com/en/guide/behind-proxies.html[express behind "
"proxies] guide.  Using an incorrect proxy configuration can result in "
"invalid redirect URIs being generated."
msgstr ""
"SSL接続を終了するプロキシーの背後でアプリケーションが実行されている場合は、 link:https://expressjs.com/en/guide"
"/behind-proxies.html[express behind proxies] "
"ガイドに従ってExpressを設定する必要があります。不適切なプロキシー設定を使用すると、無効なリダイレクトURIが生成される可能性があります。"

#. type: Plain text
msgid "Example configuration:"
msgstr "設定例："

#. type: delimited block -
#, no-wrap
msgid "    app.set( 'trust proxy', true );\n"
msgstr "    app.set( 'trust proxy', true );\n"

#. type: Title ====
#, no-wrap
msgid "Checking Authentication"
msgstr "認証のチェック"

#. type: Plain text
msgid ""
"To check that a user is authenticated before accessing a resource, simply "
"use `keycloak.checkSso()`. It will only authenticate if the user is already "
"logged-in. If the user is not logged-in, the browser will be redirected back"
" to the originally-requested URL and remain unauthenticated:"
msgstr ""
"リソースにアクセスする前にユーザーが認証されていることを確認するには、単に `keycloak.checkSso()` "
"を使います。ユーザーがすでにログインしている場合にのみ認証されます。ユーザーがログインしていない場合、ブラウザーは最初に要求されたURLにリダイレクトされ、ユーザーは未認証のままになります。"

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/check-sso', keycloak.checkSso(), checkSsoHandler );\n"
msgstr "    app.get( '/check-sso', keycloak.checkSso(), checkSsoHandler );\n"

#. type: Title ====
#, no-wrap
msgid "Protecting Resources"
msgstr "リソースの保護"

#. type: Labeled list
#, no-wrap
msgid "Simple authentication"
msgstr "単純な認証"

#. type: Plain text
msgid ""
"To enforce that a user must be authenticated before accessing a resource, "
"simply use a no-argument version of `keycloak.protect()`:"
msgstr "リソースにアクセスする前にユーザーの認証を強制するには、引数のないバージョンの `keycloak.protect()` を使うだけです。"

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/complain', keycloak.protect(), complaintHandler );\n"
msgstr "    app.get( '/complain', keycloak.protect(), complaintHandler );\n"

#. type: Labeled list
#, no-wrap
msgid "Role-based authorization"
msgstr "ロールベースの認可"

#. type: Plain text
msgid "To secure a resource with an application role for the current app:"
msgstr "現在のアプリケーションのアプリケーション・ロールでリソースを保護するには次のようにします。"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get( '/special', keycloak.protect('special'), specialHandler );\n"
msgstr ""
"    app.get( '/special', keycloak.protect('special'), specialHandler );\n"

#. type: Plain text
msgid "To secure a resource with an application role for a *different* app:"
msgstr "*別の* アプリケーションのアプリケーション・ロールでリソースを保護するには次のようにします。"

#. type: Plain text
#, no-wrap
msgid ""
"    app.get( '/extra-special', keycloak.protect('other-app:special'), "
"extraSpecialHandler );\n"
msgstr ""
"    app.get( '/extra-special', keycloak.protect('other-app:special'), "
"extraSpecialHandler );\n"

#. type: Plain text
msgid "To secure a resource with a realm role:"
msgstr "レルムロールを使用してリソースを保護するには次のようにします。"

#. type: Plain text
#, no-wrap
msgid ""
"    app.get( '/admin', keycloak.protect( 'realm:admin' ), adminHandler );\n"
msgstr ""
"    app.get( '/admin', keycloak.protect( 'realm:admin' ), adminHandler );\n"

#. type: Labeled list
#, no-wrap
msgid "Resource-Based Authorization"
msgstr "リソースベースの認可"

#. type: Plain text
msgid ""
"Resource-Based Authorization allows you to protect resources, and their "
"specific methods/actions,**** based on a set of policies defined in "
"Keycloak, thus externalizing authorization from your application. This is "
"achieved by exposing a `keycloak.enforcer` method which you can use to "
"protect resources.*"
msgstr ""
"リソースベースの認可では、Keycloakで定義されている一連のポリシーに基づいてリソースとその特定のメソッド/アクションを保護することができます。したがって、アプリケーションからの認可を外部化できます。これは、リソースを保護するために使用できる"
" `keycloak.enforcer` メソッドを公開することによって達成されます。"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get('/apis/me', keycloak.enforcer('user:profile'), "
"userProfileHandler);\n"
msgstr ""
"    app.get('/apis/me', keycloak.enforcer('user:profile'), "
"userProfileHandler);\n"

#. type: Plain text
msgid ""
"The `keycloak-enforcer` method operates in two modes, depending on the value"
" of the `response_mode` configuration option."
msgstr "`keycloak-enforcer` メソッドは、 `response_mode` 設定オプションの値に応じて2つのモードで動作します。"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: "
"'token'}), userProfileHandler);\n"
msgstr ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: "
"'token'}), userProfileHandler);\n"

#. type: Plain text
msgid ""
"If `response_mode` is set to `token`, permissions are obtained from the "
"server on behalf of the subject represented by the bearer token that was "
"sent to your application. In this case, a new access token is issued by "
"Keycloak with the permissions granted by the server. If the server did not "
"respond with a token with the expected permissions, the request is denied. "
"When using this mode, you should be able to obtain the token from the "
"request as follows:"
msgstr ""
"`response_mode` が `token` "
"に設定されている場合、パーミッションはアプリケーションに送られたベアラートークンによって表されるサブジェクトに代わりにサーバーから取得されます。この場合、Keycloakによって付与されたパーミッションとともに新しいアクセストークンが発行されます。サーバーが想定したパーミッションを持つトークンで応答しなかった場合、リクエストは拒否されます。このモードを使用するときは、次のようにリクエストからトークンを取得できるはずです。"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'token'}), function (req, res) {\n"
"        var token = req.kauth.grant.access_token.content;\n"
"        var permissions = token.authorization ? token.authorization.permissions : undefined;\n"
msgstr ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'token'}), function (req, res) {\n"
"        var token = req.kauth.grant.access_token.content;\n"
"        var permissions = token.authorization ? token.authorization.permissions : undefined;\n"

#. type: delimited block -
#, no-wrap
msgid ""
"        // show user profile\n"
"    });\n"
msgstr ""
"        // show user profile\n"
"    });\n"

#. type: Plain text
msgid ""
"Prefer this mode when your application is using sessions and you want to "
"cache previous decisions from the server, as well automatically handle "
"refresh tokens. This mode is especially useful for applications acting as a "
"client and resource server."
msgstr ""
"アプリケーションがセッションを使用していて、サーバーからの以前の決定をキャッシュしたい場合や、自動的に更新トークンを処理したい場合は、このモードを選択してください。このモードは、クライアントおよびリソースサーバーとして機能するアプリケーションに特に役立ちます。"

#. type: Plain text
msgid ""
"If `response_mode` is set to `permissions` (default mode), the server only "
"returns the list of granted permissions, without issuing a new access token."
" In addition to not issuing a new token, this method exposes the permissions"
" granted by the server through the `request` as follows:"
msgstr ""
"`response_mode` が `permissions` "
"に設定されている場合（デフォルトモード）、サーバーは新しいアクセストークンを発行せずに、許可されたパーミッションのリストのみを返します。新しいトークンを発行しないことに加えて、このメソッドは以下のように"
" `request` を介してサーバーにより与えられたパーミッションを公開します。"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'permissions'}), function (req, res) {\n"
"        var permissions = req.permissions;\n"
msgstr ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'permissions'}), function (req, res) {\n"
"        var permissions = req.permissions;\n"

#. type: Plain text
msgid ""
"Regardless of the `response_mode` in use, the `keycloak.enforcer` method "
"will first try to check the permissions within the bearer token that was "
"sent to your application. If the bearer token already carries the expected "
"permissions, there is no need to interact with the server to obtain a "
"decision. This is specially useful when your clients are capable of "
"obtaining access tokens from the server with the expected permissions before"
" accessing a protected resource, so they can use some capabilities provided "
"by Keycloak Authorization Services such as incremental authorization and "
"avoid additional requests to the server when `keycloak.enforcer` is "
"enforcing access to the resource."
msgstr ""
"`response_mode` が使われているかどうかにかかわらず、 `keycloak.enforcer` "
"メソッドは最初にアプリケーションに送られたベアラートークンの中のパーミッションをチェックしようとします。ベアラートークンがすでに想定されたパーミッションを持っている場合は、決定を得るためにサーバーと対話する必要はありません。これは、保護されたリソースにアクセスする前に、クライアントが期待されるパーミッションでサーバーからアクセストークンを取得できる場合に特に役立ちます。そのため、クライアントは増分認可などのKeycloak認可サービスによって提供される機能を使用できます。"
" `keycloak.enforcer` はリソースへのアクセスを強制します。"

#. type: Plain text
#, no-wrap
msgid ""
"By default, the policy enforcer will use the `client_id` defined to the application (for instance, via `keycloak.json`) to\n"
" reference a client in Keycloak that supports Keycloak Authorization Services. In this case, the client can not be public given\n"
" that it is actually a resource server.\n"
msgstr ""
"デフォルトでは、ポリシー・エンフォーサーはアプリケーションに定義された `client_id` を使って（例えば `keycloak.json` "
"を介して）、Keycloakの認可サービスをサポートするKeycloakのクライアントを参照します。この場合、クライアントは実際にはリソースサーバーであるため、パブリックにすることはできません。\n"

#. type: Plain text
msgid ""
"If your application is acting as both a public client(frontend) and resource"
" server(backend), you can use the following configuration to reference a "
"different client in Keycloak with the policies that you want to enforce:"
msgstr ""
"アプリケーションがパブリック・クライアント（フロントエンド）とリソースサーバー（バックエンド）の両方として機能している場合は、次の設定を使用して、施行したいポリシーでKeycloak内の別のクライアントを参照できます。"

#. type: delimited block -
#, no-wrap
msgid ""
"      keycloak.enforcer('user:profile', {resource_server_id: 'my-"
"apiserver'})\n"
msgstr ""
"      keycloak.enforcer('user:profile', {resource_server_id: 'my-"
"apiserver'})\n"

#. type: Plain text
msgid ""
"It is recommended to use distinct clients in Keycloak to represent your "
"frontend and backend."
msgstr "フロントエンドとバックエンドを表すために、Keycloakで個別のクライアントを使用することをお勧めします。"

#. type: Plain text
#, no-wrap
msgid ""
"If the application you are protecting is enabled with Keycloak authorization services and you have defined client credentials\n"
" in `keycloak.json`, you can push additional claims to the server and make them available to your policies in order to make decisions.\n"
"For that, you can define a `claims` configuration option which expects a `function` that returns a JSON with the claims you want to push:\n"
msgstr ""
"保護しているアプリケーションがKeycloak認可サービスで有効になっていて、 `keycloak.json` "
"でクライアントのクレデンシャルを定義している場合は、決定を下すために、追加のクレームをサーバーにプッシュし、それらをポリシーで利用できるようにすることができます。そのために、プッシュしたいクレームを持つJSONを返す"
" `function` を期待する `claim` 設定オプションを定義できます。\n"

#. type: delimited block -
#, no-wrap
msgid ""
"      app.get('/protected/resource', keycloak.enforcer(['resource:view', 'resource:write'], {\n"
"          claims: function(request) {\n"
"            return {\n"
"              \"http.uri\": [\"/protected/resource\"],\n"
"              \"user.agent\": // get user agent  from request\n"
"            }\n"
"          }\n"
"        }), function (req, res) {\n"
"          // access granted\n"
msgstr ""
"      app.get('/protected/resource', keycloak.enforcer(['resource:view', 'resource:write'], {\n"
"          claims: function(request) {\n"
"            return {\n"
"              \"http.uri\": [\"/protected/resource\"],\n"
"              \"user.agent\": // get user agent  from request\n"
"            }\n"
"          }\n"
"        }), function (req, res) {\n"
"          // access granted\n"

#. type: Plain text
msgid ""
"For more details about how to configure Keycloak to protected your "
"application resources, please take a look at the "
"link:{authorizationguide_link}[{authorizationguide_name}]."
msgstr ""
"アプリケーションのリソースを保護するようにKeycloakを設定する方法の詳細については、 "
"link:{authorizationguide_link}[{authorizationguide_name}] をご覧ください。"

#. type: Labeled list
#, no-wrap
msgid "Advanced authorization"
msgstr "高度な認可"

#. type: Plain text
msgid ""
"To secure resources based on parts of the URL itself, assuming a role exists"
" for each section:"
msgstr "URLの一部に基づいてリソースを保護するには次のようにします（各セクションにロールが存在すると仮定します）。"

#. type: delimited block -
#, no-wrap
msgid ""
"    function protectBySection(token, request) {\n"
"      return token.hasRole( request.params.section );\n"
"    }\n"
msgstr ""
"    function protectBySection(token, request) {\n"
"      return token.hasRole( request.params.section );\n"
"    }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get( '/:section/:page', keycloak.protect( protectBySection ), "
"sectionHandler );\n"
msgstr ""
"    app.get( '/:section/:page', keycloak.protect( protectBySection ), "
"sectionHandler );\n"

#. type: Title ====
#, no-wrap
msgid "Additional URLs"
msgstr "追加のURL"

#. type: Labeled list
#, no-wrap
msgid "Explicit user-triggered logout"
msgstr "明示的なユーザー・トリガー・ログアウト"

#. type: Plain text
msgid ""
"By default, the middleware catches calls to `/logout` to send the user "
"through a {project_name}-centric logout workflow. This can be changed by "
"specifying a `logout` configuration parameter to the `middleware()` call:"
msgstr ""
"デフォルトでは、Middlewareは `/logout` "
"の呼び出しをキャッチし、ユーザーに{project_name}中心のログアウト・ワークフローを経由させます。これは、 `logout` "
"設定パラメーターを `middleware()` の呼び出しに指定することで変更できます。"

#. type: delimited block -
#, no-wrap
msgid "    app.use( keycloak.middleware( { logout: '/logoff' } ));\n"
msgstr "    app.use( keycloak.middleware( { logout: '/logoff' } ));\n"

#. type: Plain text
msgid ""
"When the user-triggered logout is invoked a query parameter `redirect_url` "
"can be passed:"
msgstr "ユーザートリガーのログアウトが呼び出されると、次のようにクエリー・パラメーター `redirect_url` を渡すことができます。"

#. type: delimited block -
#, no-wrap
msgid ""
"https://example.com/logoff?redirect_url=https%3A%2F%2Fexample.com%3A3000%2Flogged%2Fout\n"
msgstr ""
"https://example.com/logoff?redirect_url=https%3A%2F%2Fexample.com%3A3000%2Flogged%2Fout\n"

#. type: Plain text
msgid ""
"This parameter is then used as the redirect url of the OIDC logout endpoint "
"and the user will be redirected to `\\https://example.com/logged/out`."
msgstr ""
"このパラメーターはOIDCログアウト・エンドポイントのリダイレクトURLとして使用され、ユーザーは "
"`\\https://example.com/logged/out` にリダイレクトされます。"

#. type: Plain text
msgid "{project_name} Admin Callbacks::"
msgstr "{project_name} Adminコールバック"

#. type: Plain text
msgid ""
"Also, the middleware supports callbacks from the {project_name} console to "
"log out a single session or all sessions.  By default, these type of admin "
"callbacks occur relative to the root URL of `/` but can be changed by "
"providing an `admin` parameter to the `middleware()` call:"
msgstr ""
"また、Middlewareは{project_name}コンソールからのコールバックをサポートしており、単一セッションまたはすべてのセッションをログアウトします。デフォルトでは、これらのタイプのAdminコールバックは"
" `/` のルートURLを基準に発生しますが、 `admin` パラメーターを `middleware()` の呼び出しに与えることで変更できます。"

#. type: Plain text
#, no-wrap
msgid "    app.use( keycloak.middleware( { admin: '/callbacks' } );\n"
msgstr "    app.use( keycloak.middleware( { admin: '/callbacks' } );\n"
