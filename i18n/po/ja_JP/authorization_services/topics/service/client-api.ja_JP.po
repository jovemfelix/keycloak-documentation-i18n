# Japanese translations for keycloak-documentation-i18n package
# Copyright (C) 2017 Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ====
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "スタンドアロン設定"

#.  now you can use the RPT to access protected resources on the resource server
#. type: Plain text
#, no-wrap
msgid "```\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Authorization Client Java API"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"Depending on your requirements, a resource server should be able to manage resources remotely or even check for permissions programmatically.\n"
"If you are using Java, you can access the {project_name} Authorization Services using the Authorization Client API.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "It is targeted for resource servers that want to access the different APIs provided by the server such as the Protection, Authorization and Entitlement APIs.\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Maven Dependency"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"```xml\n"
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>org.keycloak</groupId>\n"
"        <artifactId>keycloak-authz-client</artifactId>\n"
"        <version>${KEYCLOAK_VERSION}</version>\n"
"    </dependency>\n"
"</dependencies>\n"
"```\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "The client configuration is defined in a ``keycloak.json`` file as follows:\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"```json\n"
"{\n"
"  \"realm\": \"hello-world-authz\",\n"
"  \"auth-server-url\" : \"http://localhost:8080/auth\",\n"
"  \"resource\" : \"hello-world-authz-service\",\n"
"  \"credentials\": {\n"
"    \"secret\": \"secret\"\n"
"  }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*realm* (required)\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "The name of the realm.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*auth-server-url* (required)\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "The base URL of the {project_name} server. All other {project_name} pages and REST service endpoints are derived from this. It is usually in the form https://host:port/auth.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*resource* (required)\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "The client-id of the application. Each application has a client-id that is used to identify the application. \n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"*credentials* (required)\n"
"Specifies the credentials of the application. This is an object notation where the key is the credential type and the value is the value of the credential type.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "The configuration file is usually located in your application's classpath, the default location from where the client is going to try to find a ```keycloak.json``` file.\n"
msgstr ""

#. type: Title ====
#, fuzzy, no-wrap
#| msgid "Creating the Admin Account"
msgid "Creating the Authorization Client"
msgstr "管理者アカウントの作成"

#. type: Plain text
#, no-wrap
msgid "Considering you have a ```keycloak.json``` file in your classpath, you can create a new ```AuthzClient``` instance as follows:\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"```java\n"
"    // create a new instance based on the configuration defined in a keycloak.json located in your classpath\n"
"    AuthzClient authzClient = AuthzClient.create();\n"
"```\n"
msgstr ""

#. type: Title ====
#, fuzzy, no-wrap
#| msgid "Obtaining Assertion Attributes"
msgid "Obtaining User Entitlements"
msgstr "アサーション属性の取得"

#. type: Plain text
#, no-wrap
msgid "Here is an example illustrating how to obtain user entitlements:\n"
msgstr ""

#.  create a new instance based on the configuration defined in keycloak-authz.json
#. type: Plain text
#, no-wrap
msgid ""
"```java\n"
"AuthzClient authzClient = AuthzClient.create();\n"
msgstr ""

#.  obtain an Entitlement API Token to get access to the Entitlement API.
#.  this token is an access token issued to a client on behalf of an user
#.  with a uma_authorization scope
#. type: Plain text
#, no-wrap
msgid "String eat = getEntitlementAPIToken(authzClient);\n"
msgstr ""

#.  send the entitlement request to the server to
#.  obtain an RPT with all permissions granted to the user
#. type: Plain text
#, no-wrap
msgid ""
"EntitlementResponse response = authzClient.entitlement(eat).getAll(\"hello-world-authz-service\");\n"
"String rpt = response.getRpt();\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "Here is an example illustrating how to obtain user entitlements for a set of one or more resources:\n"
msgstr ""

#.  create an entitlement request
#. type: Plain text
#, no-wrap
msgid ""
"EntitlementRequest request = new EntitlementRequest();\n"
"PermissionRequest permission = new PermissionRequest();\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "permission.setResourceSetName(\"Hello World Resource\");\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "request.addPermission(permission);\n"
msgstr ""

#.  send the entitlement request to the server to obtain an RPT
#.  with all permissions granted to the user
#. type: Plain text
#, no-wrap
msgid ""
"EntitlementResponse response = authzClient.entitlement(eat).get(\"hello-world-authz-service\", request);\n"
"String rpt = response.getRpt();\n"
msgstr ""

#. type: Title ====
#, fuzzy, no-wrap
#| msgid "Creating and Registering the Client"
msgid "Creating a Resource Using the Protection API"
msgstr "クライアントの作成と登録"

#.  create a new resource representation with the information we want
#. type: Plain text
#, no-wrap
msgid "ResourceRepresentation newResource = new ResourceRepresentation();\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"newResource.setName(\"New Resource\");\n"
"newResource.setType(\"urn:hello-world-authz:resources:example\");\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "newResource.addScope(new ScopeRepresentation(\"urn:hello-world-authz:scopes:view\"));\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"ProtectedResource resourceClient = authzClient.protection().resource();\n"
"Set<String> existingResource = resourceClient.findByFilter(\"name=\" + newResource.getName());\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"if (!existingResource.isEmpty()) {\n"
"    resourceClient.delete(existingResource.iterator().next());\n"
"}\n"
msgstr ""

#.  create the resource on the server
#. type: Plain text
#, no-wrap
msgid ""
"RegistrationResponse response = resourceClient.create(newResource);\n"
"String resourceId = response.getId();\n"
msgstr ""

#.  query the resource using its newly generated id
#. type: Plain text
#, no-wrap
msgid ""
"ResourceRepresentation resource = resourceClient.findById(resourceId).getResourceDescription();\n"
"```\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Introspecting a RPT"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"```java\n"
"    AuthzClient authzClient = AuthzClient.create();\n"
"    String rpt = getRequestingPartyToken(authzClient);\n"
"    TokenIntrospectionResponse requestingPartyToken = authzClient.protection().introspectRequestingPartyToken(rpt);\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    if (requestingPartyToken.getActive()) {\n"
"        for (Permission granted : requestingPartyToken.getPermissions()) {\n"
"            // iterate over the granted permissions\n"
"        }\n"
"    }\n"
"```\n"
msgstr ""
