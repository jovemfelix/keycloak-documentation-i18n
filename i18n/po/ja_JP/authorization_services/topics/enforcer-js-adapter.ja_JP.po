# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tsukasa Amano <t.amano@pro-japan.co.jp>, 2018
# Hiroyuki Wada <wadahiro@gmail.com>, 2018
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2019\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Code block
#, no-wrap
msgid ""
"HTTP/1.1 401 Unauthorized\n"
"WWW-Authenticate: UMA realm=\"${realm}\",\n"
"    as_uri=\"https://${host}:${port}/auth/realms/${realm}\",\n"
"    ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n"
msgstr ""
"HTTP/1.1 401 Unauthorized\n"
"WWW-Authenticate: UMA realm=\"${realm}\",\n"
"    as_uri=\"https://${host}:${port}/auth/realms/${realm}\",\n"
"    ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n"

#. type: Title =
#, no-wrap
msgid "JavaScript Integration"
msgstr "JavaScriptの統合"

#. type: Plain text
msgid ""
"The {project_name} Server comes with a JavaScript library you can use to "
"interact with a resource server protected by a policy enforcer.  This "
"library is based on the {project_name} JavaScript adapter, which can be "
"integrated to allow your client to obtain permissions from a {project_name} "
"Server."
msgstr ""
"{project_name}サーバーには、ポリシー・エンフォーサーによって保護されたリソースサーバーと対話するために使用できるJavaScriptライブラリーが付属しています。このライブラリーは{project_name}"
" JavaScriptアダプターに基づいています。これを統合すると、クライアントは{project_name}サーバーからパーミッションを取得できます。"

#. type: Plain text
msgid ""
"You can obtain this library from a running a {project_name} Server instance "
"by including the following `script` tag in your web page:"
msgstr ""
"次の `script` タグをWebページに含めることで、実行中の{project_name}サーバー・インスタンスからこのライブラリーを入手できます。"

#. type: Code block
msgid "<script src=\"http://.../auth/js/keycloak-authz.js\"></script>"
msgstr "<script src=\"http://.../auth/js/keycloak-authz.js\"></script>"

#. type: Plain text
msgid ""
"Once you do that, you can create a `KeycloakAuthorization` instance as "
"follows:"
msgstr "これを実行すると、次のように `KeycloakAuthorization` インスタンスを作成できます。"

#. type: Code block
#, no-wrap
msgid ""
"var keycloak = ... // obtain a Keycloak instance from keycloak.js library\n"
"var authorization = new KeycloakAuthorization(keycloak);\n"
msgstr ""
"var keycloak = ... // obtain a Keycloak instance from keycloak.js library\n"
"var authorization = new KeycloakAuthorization(keycloak);\n"

#. type: Plain text
msgid "The *keycloak-authz.js* library provides two main features:"
msgstr "*keycloak-authz.js* ライブラリには2つの主な機能があります。"

#. type: Plain text
msgid ""
"Obtain permissions from the server using a permission ticket, if you are "
"accessing a UMA protected resource server."
msgstr "UMAで保護されたリソースサーバーにアクセスする場合は、パーミッション・チケットを使用して、サーバーからパーミッションを取得します。"

#. type: Plain text
msgid ""
"Obtain permissions from the server by sending the resources and scopes the "
"application wants to access."
msgstr "アプリケーションがアクセスしたいリソースとスコープを送信して、サーバーからパーミッションを取得します。"

#. type: Plain text
msgid ""
"In both cases, the library allows you to easily interact with both resource "
"server and {project_name} Authorization Services to obtain tokens with "
"permissions your client can use as bearer tokens to access the protected "
"resources on a resource server."
msgstr ""
"いずれの場合も、リソースサーバーと{project_name}認可サービスの両方との対話を容易にし、クライアントがリソースサーバー上の保護されたリソースにアクセスするベアラー・トークンとして使用できる権限を持つトークンを取得できます。"

#. type: Title ==
#, no-wrap
msgid "Handling Authorization Responses from a UMA-Protected Resource Server"
msgstr "UMAで保護されたリソースサーバーからの認可レスポンスの処理"

#. type: Plain text
msgid ""
"If a resource server is protected by a policy enforcer, it responds to "
"client requests based on the permissions carried along with a bearer token."
"  Typically, when you try to access a resource server with a bearer token "
"that is lacking permissions to access a protected resource, the resource "
"server responds with a *401* status code and a `WWW-Authenticate` header."
msgstr ""
"リソースサーバーがポリシー・エンフォーサーによって保護されている場合、リソースサーバーは、ベアラートークンとともに搬送されるパーミッションに基づいてクライアント・リクエストに応答します。通常、保護されたリソースにアクセスする権限がないベアラトークンを使用してリソースサーバーにアクセスしようとすると、リソースサーバーは"
" *401* ステータスコードと `WWW-Authenticate` ヘッダーで応答します。"

#. type: Plain text
msgid ""
"See <<_service_uma_authorization_process, UMA Authorization Process>> for "
"more information."
msgstr "詳細については、<<_service_uma_authorization_process, UMAの認可プロセス>>を参照してください。"

#. type: Plain text
msgid ""
"What your client needs to do is extract the permission ticket from the "
"```WWW-Authenticate``` header returned by the resource server and use the "
"library to send an authorization request as follows:"
msgstr ""
"クライアントが行う必要があるのは、リソースサーバーから返された ```WWW-Authenticate``` "
"ヘッダーからパーミッション・チケットを抽出し、ライブラリーを使用して次のように認可リクエストを送信することです。"

#. type: Code block
#, no-wrap
msgid ""
"// prepare a authorization request with the permission ticket\n"
"var authorizationRequest = {};\n"
"authorizationRequest.ticket = ticket;\n"
"\n"
"// send the authorization request, if successful retry the request\n"
"Identity.authorization.authorize(authorizationRequest).then(function (rpt) {\n"
"    // onGrant\n"
"}, function () {\n"
"    // onDeny\n"
"}, function () {\n"
"    // onError\n"
"});\n"
msgstr ""
"// prepare a authorization request with the permission ticket\n"
"var authorizationRequest = {};\n"
"authorizationRequest.ticket = ticket;\n"
"\n"
"// send the authorization request, if successful retry the request\n"
"Identity.authorization.authorize(authorizationRequest).then(function (rpt) {\n"
"    // onGrant\n"
"}, function () {\n"
"    // onDeny\n"
"}, function () {\n"
"    // onError\n"
"});\n"

#. type: Plain text
msgid ""
"The `authorize` function is completely asynchronous and supports a few "
"callback functions to receive notifications from the server:"
msgstr "`authorize` 関数は完全に非同期で、サーバーからの通知を受け取るためのいくつかのコールバック関数をサポートしています。"

#. type: Plain text
msgid ""
"`onGrant`: The first argument of the function. If authorization was "
"successful and the server returned an RPT with the requested permissions, "
"the callback receives the RPT."
msgstr ""
"`onGrant`: 関数の第1引数。認可が成功し、サーバーが要求されたパーミッションでRPTを返した場合、コールバックはRPTを受け取ります。"

#. type: Plain text
msgid ""
"`onDeny`: The second argument of the function. Only called if the server has"
" denied the authorization request."
msgstr "`onDeny`: 関数の第2引数。サーバーがリクエストを拒否した場合にのみ呼び出されます。"

#. type: Plain text
msgid ""
"`onError`: The third argument of the function. Only called if the server "
"responds unexpectedly."
msgstr "`onError`: 関数の第3引数。サーバーが予期せず応答する場合にのみ呼び出されます。"

#. type: Plain text
msgid ""
"Most applications should use the `onGrant` callback to retry a request after"
" a 401 response. Subsequent requests should include the RPT as a bearer "
"token for retries."
msgstr ""
"ほとんどのアプリケーションは、 `onGrant` "
"コールバックを使用して401応答後にリクエストをリトライする必要があります。以降のリクエストには、RPTをリトライのためのベアラー・トークンとして含める必要があります。"

#. type: Title ==
#, no-wrap
msgid "Obtaining Entitlements"
msgstr "エンタイトルメントの取得"

#. type: Plain text
msgid ""
"The ```keycloak-authz.js``` library provides an `entitlement` function that "
"you can use to obtain an RPT from the server by providing the resources and "
"scopes your client wants to access."
msgstr ""
"`keycloak-authz.js` "
"ライブラリーは、クライアントがアクセスしたいリソースとスコープを提供することによって、サーバーからRPTを取得するために使用できる "
"`entitlement` 関数を提供します。"

#. type: Block title
#, no-wrap
msgid ""
"Example about how to obtain an RPT with permissions for all resources and "
"scopes the user can access"
msgstr "ユーザーがアクセス可能なすべてのリソースとスコープに対するパーミッションを持つ、RPTを取得する方法の例"

#. type: Code block
#, no-wrap
msgid ""
"authorization.entitlement('my-resource-server-id').then(function (rpt) {\n"
"    // onGrant callback function.\n"
"    // If authorization was successful you'll receive an RPT\n"
"    // with the necessary permissions to access the resource server\n"
"});\n"
msgstr ""
"authorization.entitlement('my-resource-server-id').then(function (rpt) {\n"
"    // onGrant callback function.\n"
"    // If authorization was successful you'll receive an RPT\n"
"    // with the necessary permissions to access the resource server\n"
"});\n"

#. type: Block title
#, no-wrap
msgid ""
"Example about how to obtain an RPT with permissions for specific resources "
"and scopes"
msgstr "特定のリソースとスコープに対するパーミッションを持つ、RPTを取得する方法の例"

#. type: Code block
#, no-wrap
msgid ""
"authorization.entitlement('my-resource-server', {\n"
"    \"permissions\": [\n"
"        {\n"
"            \"id\" : \"Some Resource\"\n"
"        }\n"
"    ]\n"
"}).then(function (rpt) {\n"
"    // onGrant\n"
"});\n"
msgstr ""
"authorization.entitlement('my-resource-server', {\n"
"    \"permissions\": [\n"
"        {\n"
"            \"id\" : \"Some Resource\"\n"
"        }\n"
"    ]\n"
"}).then(function (rpt) {\n"
"    // onGrant\n"
"});\n"

#. type: Plain text
msgid ""
"When using the `entitlement` function, you must provide the _client_id_ of "
"the resource server you want to access."
msgstr "`entitlement` を使用する場合は、アクセスするリソースサーバーの _client_id_ を指定する必要があります。"

#. type: Plain text
msgid ""
"The `entitlement` function is completely asynchronous and supports a few "
"callback functions to receive notifications from the server:"
msgstr "`entitlement` 関数は完全に非同期で、サーバーからの通知を受け取るためのコールバック関数をいくつかサポートしています。"

#. type: Title ==
#, no-wrap
msgid "Authorization Request"
msgstr "認可リクエスト"

#. type: Plain text
msgid ""
"Both ```authorize``` and ```entitlement``` functions accept an authorization"
" request object. This object can be set with the following properties:"
msgstr ""
"`authorize` と ```entitlement``` "
"の両方の関数は、認可リクエスト・オブジェクトを受け入れます。このオブジェクトは、次のプロパティーで設定できます。"

#. type: Plain text
#, no-wrap
msgid "*permissions*\n"
msgstr "*permissions*\n"

#. type: Plain text
msgid ""
"An array of objects representing the resource and scopes. For instance:"
msgstr "リソースとスコープを表すオブジェクトの配列。以下に例を示します。"

#. type: Code block
#, no-wrap
msgid ""
"var authorizationRequest = {\n"
"   \"permissions\": [\n"
"       {\n"
"           \"id\" : \"Some Resource\",\n"
"           \"scopes\" : [\"view\", \"edit\"]\n"
"       }\n"
"   ]\n"
"}\n"
msgstr ""
"var authorizationRequest = {\n"
"   \"permissions\": [\n"
"       {\n"
"           \"id\" : \"Some Resource\",\n"
"           \"scopes\" : [\"view\", \"edit\"]\n"
"       }\n"
"   ]\n"
"}\n"

#. type: Plain text
#, no-wrap
msgid "*metadata*\n"
msgstr "*metadata*\n"

#. type: Plain text
msgid ""
"An object where its properties define how the authorization request should "
"be processed by the server."
msgstr "サーバーで認可リクエストをどのように処理するかを定義したプロパティーを持つオブジェクト。"

#. type: Plain text
#, no-wrap
msgid "** *response_include_resource_name*\n"
msgstr "** *response_include_resource_name*\n"

#. type: Plain text
msgid ""
"A boolean value indicating to the server if resource names should be "
"included in the RPT's permissions. If false, only the resource identifier is"
" included.  ** *response_permissions_limit*"
msgstr ""
"リソース名をRPTのパーミッションに含めるかどうかをサーバーに示すブール値。falseの場合、リソース識別子のみが含まれます。\n"
"\n"
"** *response_permissions_limit*"

#. type: Plain text
msgid ""
"An integer N that defines a limit for the amount of permissions an RPT can "
"have. When used together with `rpt` parameter, only the last N requested "
"permissions will be kept in the RPT"
msgstr ""
"RPTが持つことができるパーミッションの量の限界を定義する整数N。 `rpt` "
"パラメーターと一緒に使用すると、最後に要求されたN個のパーミッションだけがRPTに保持されます。"

#. type: Plain text
#, no-wrap
msgid "*submit_request*\n"
msgstr "*submit_request*\n"

#. type: Plain text
msgid ""
"A boolean value indicating whether the server should create permission "
"requests to the resources and scopes referenced by a permission ticket.  "
"This parameter will only take effect when used together with the `ticket` "
"parameter as part of a UMA authorization process."
msgstr ""
"サーバーがリソースとパーミッション・チケットによって参照されるスコープへのパーミッション・リクエストを作成する必要があるかどうかを示すブール値。このパラメーターは、UMA認証プロセスの一部として"
" `ticket` パラメーターとともに使用されるときにのみ有効になります。"

#. type: Title ==
#, no-wrap
msgid "Obtaining the RPT"
msgstr "RPTの取得"

#. type: Plain text
msgid ""
"If you have already obtained an RPT using any of the authorization functions"
" provided by the library, you can always obtain the RPT as follows from the "
"authorization object (assuming that it has been initialized by one of the "
"techniques shown earlier):"
msgstr ""
"ライブラリによって提供されている認可関数を使用してRPTをすでに取得している場合は、認可オブジェクトから次のようにRPTを得ることができます（前述のいずれかの手法で初期化されているものとします）。"

#. type: Code block
msgid "var rpt = authorization.rpt;"
msgstr "var rpt = authorization.rpt;"
