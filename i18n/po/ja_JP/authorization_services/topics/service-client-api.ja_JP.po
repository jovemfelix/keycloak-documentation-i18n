# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2018\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ==
#, no-wrap
msgid "Configuration"
msgstr "設定"

#. type: Title =
#, no-wrap
msgid "Authorization Client Java API"
msgstr "認可クライアントJava API"

#. type: Plain text
msgid ""
"Depending on your requirements, a resource server should be able to manage "
"resources remotely or even check for permissions programmatically.  If you "
"are using Java, you can access the {project_name} Authorization Services "
"using the Authorization Client API."
msgstr ""
"要件に応じて、リソースサーバーはリソースをリモートで管理したり、プログラムでパーミッションをチェックしたりすることもできます。Javaを使用している場合は、認可クライアントAPIを使用して{project_name}認可サービスにアクセスできます。"

#. type: Plain text
msgid ""
"It is targeted for resource servers that want to access the different "
"endpoints provided by the server such as the Token Endpoint, Resource, and "
"Permission management endpoints."
msgstr ""
"これは、トークン・エンドポイント、リソース、およびパーミッション管理エンドポイントなど、サーバーが提供するさまざまなエンドポイントにアクセスするリソース・サーバーを対象としています。"

#. type: Title ==
#, no-wrap
msgid "Maven Dependency"
msgstr "Maven依存関係"

#. type: Code block
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>org.keycloak</groupId>\n"
"        <artifactId>keycloak-authz-client</artifactId>\n"
"        <version>${KEYCLOAK_VERSION}</version>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>org.keycloak</groupId>\n"
"        <artifactId>keycloak-authz-client</artifactId>\n"
"        <version>${KEYCLOAK_VERSION}</version>\n"
"    </dependency>\n"
"</dependencies>\n"

#. type: Plain text
msgid ""
"The client configuration is defined in a ``keycloak.json`` file as follows:"
msgstr "クライアントの設定は、 ``keycloak.json`` ファイルで次のように定義されています。"

#. type: Code block
#, no-wrap
msgid ""
"{\n"
"  \"realm\": \"hello-world-authz\",\n"
"  \"auth-server-url\" : \"http://localhost:8080/auth\",\n"
"  \"resource\" : \"hello-world-authz-service\",\n"
"  \"credentials\": {\n"
"    \"secret\": \"secret\"\n"
"  }\n"
"}\n"
msgstr ""
"{\n"
"  \"realm\": \"hello-world-authz\",\n"
"  \"auth-server-url\" : \"http://localhost:8080/auth\",\n"
"  \"resource\" : \"hello-world-authz-service\",\n"
"  \"credentials\": {\n"
"    \"secret\": \"secret\"\n"
"  }\n"
"}\n"

#. type: Plain text
#, no-wrap
msgid "*realm* (required)\n"
msgstr "*realm* (required)\n"

#. type: Plain text
msgid "The name of the realm."
msgstr "レルムの名前。"

#. type: Plain text
#, no-wrap
msgid "*auth-server-url* (required)\n"
msgstr "*auth-server-url* (required)\n"

#. type: Plain text
msgid ""
"The base URL of the {project_name} server. All other {project_name} pages "
"and REST service endpoints are derived from this. It is usually in the form "
"https://host:port/auth."
msgstr ""
"{project_name}サーバーのベースURL。 "
"他のすべての{project_name}ページとRESTサービス・エンドポイントは、これから派生しています。通常、https://host:port/authという形式です。"

#. type: Plain text
#, no-wrap
msgid "*resource* (required)\n"
msgstr "*resource* (required)\n"

#. type: Plain text
msgid ""
"The client-id of the application. Each application has a client-id that is "
"used to identify the application."
msgstr "アプリケーションのクライアントID。各アプリケーションには、アプリケーションを識別するために使用されるクライアントIDがあります。"

#. type: Plain text
#, no-wrap
msgid "*credentials* (required)\n"
msgstr "*credentials* (required)\n"

#. type: Plain text
msgid ""
"Specifies the credentials of the application. This is an object notation "
"where the key is the credential type and the value is the value of the "
"credential type."
msgstr ""
"アプリケーションのクレデンシャルを指定します。これは、キーがクレデンシャル・タイプであり、値がクレデンシャル・タイプの値であるオブジェクトの表記法です。"

#. type: Plain text
msgid ""
"The configuration file is usually located in your application's classpath, "
"the default location from where the client is going to try to find a "
"```keycloak.json``` file."
msgstr ""
"設定ファイルは通常、クライアントの ```keycloak.json``` "
"ファイルを見つける際のデフォルトのローケーションであるアプリケーションのクラスパスにあります。"

#. type: Title ==
#, no-wrap
msgid "Creating the Authorization Client"
msgstr "認可クライアントの作成"

#. type: Plain text
msgid ""
"Considering you have a ```keycloak.json``` file in your classpath, you can "
"create a new ```AuthzClient``` instance as follows:"
msgstr ""
"クラスパスに ```keycloak.json``` ファイルがあることを考慮して、次のように新しい ```AuthzClient``` "
"インスタンスを作成することができます。"

#. type: Code block
#, no-wrap
msgid ""
"    // create a new instance based on the configuration defined in a keycloak.json located in your classpath\n"
"    AuthzClient authzClient = AuthzClient.create();\n"
msgstr ""
"    // create a new instance based on the configuration defined in a keycloak.json located in your classpath\n"
"    AuthzClient authzClient = AuthzClient.create();\n"

#. type: Title ==
#, no-wrap
msgid "Obtaining User Entitlements"
msgstr "ユーザー・エンタイトルメントの取得"

#. type: Plain text
msgid "Here is an example illustrating how to obtain user entitlements:"
msgstr "ユーザー・エンタイトルメントを取得する方法の例を示します。"

#. type: Code block
#, no-wrap
msgid ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// create an authorization request\n"
"AuthorizationRequest request = new AuthorizationRequest();\n"
"\n"
"// send the entitlement request to the server in order to\n"
"// obtain an RPT with all permissions granted to the user\n"
"AuthorizationResponse response = authzClient.authorization(\"alice\", \"alice\").authorize(request);\n"
"String rpt = response.getToken();\n"
"\n"
"System.out.println(\"You got an RPT: \" + rpt);\n"
"\n"
"// now you can use the RPT to access protected resources on the resource server\n"
msgstr ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// create an authorization request\n"
"AuthorizationRequest request = new AuthorizationRequest();\n"
"\n"
"// send the entitlement request to the server in order to\n"
"// obtain an RPT with all permissions granted to the user\n"
"AuthorizationResponse response = authzClient.authorization(\"alice\", \"alice\").authorize(request);\n"
"String rpt = response.getToken();\n"
"\n"
"System.out.println(\"You got an RPT: \" + rpt);\n"
"\n"
"// now you can use the RPT to access protected resources on the resource server\n"

#. type: Plain text
msgid ""
"Here is an example illustrating how to obtain user entitlements for a set of"
" one or more resources:"
msgstr "1つ以上のリソースのセットに対してユーザー・エンタイトルメントを取得する方法の例を示します。"

#. type: Code block
#, no-wrap
msgid ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// create an authorization request\n"
"AuthorizationRequest request = new AuthorizationRequest();\n"
"\n"
"// add permissions to the request based on the resources and scopes you want to check access\n"
"request.addPermission(\"Default Resource\");\n"
"\n"
"// send the entitlement request to the server in order to\n"
"// obtain an RPT with permissions for a single resource\n"
"AuthorizationResponse response = authzClient.authorization(\"alice\", \"alice\").authorize(request);\n"
"String rpt = response.getToken();\n"
"\n"
"System.out.println(\"You got an RPT: \" + rpt);\n"
"\n"
"// now you can use the RPT to access protected resources on the resource server\n"
msgstr ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// create an authorization request\n"
"AuthorizationRequest request = new AuthorizationRequest();\n"
"\n"
"// add permissions to the request based on the resources and scopes you want to check access\n"
"request.addPermission(\"Default Resource\");\n"
"\n"
"// send the entitlement request to the server in order to\n"
"// obtain an RPT with permissions for a single resource\n"
"AuthorizationResponse response = authzClient.authorization(\"alice\", \"alice\").authorize(request);\n"
"String rpt = response.getToken();\n"
"\n"
"System.out.println(\"You got an RPT: \" + rpt);\n"
"\n"
"// now you can use the RPT to access protected resources on the resource server\n"

#. type: Title ==
#, no-wrap
msgid "Creating a Resource Using the Protection API"
msgstr "保護APIを使用したリソースの作成"

#. type: Code block
#, no-wrap
msgid ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// create a new resource representation with the information we want\n"
"ResourceRepresentation newResource = new ResourceRepresentation();\n"
"\n"
"newResource.setName(\"New Resource\");\n"
"newResource.setType(\"urn:hello-world-authz:resources:example\");\n"
"\n"
"newResource.addScope(new ScopeRepresentation(\"urn:hello-world-authz:scopes:view\"));\n"
"\n"
"ProtectedResource resourceClient = authzClient.protection().resource();\n"
"ResourceRepresentation existingResource = resourceClient.findByName(newResource.getName());\n"
"\n"
"if (existingResource != null) {\n"
"    resourceClient.delete(existingResource.getId());\n"
"}\n"
"\n"
"// create the resource on the server\n"
"ResourceRepresentation response = resourceClient.create(newResource);\n"
"String resourceId = response.getId();\n"
"\n"
"// query the resource using its newly generated id\n"
"ResourceRepresentation resource = resourceClient.findById(resourceId);\n"
"\n"
"System.out.println(resource);\n"
msgstr ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// create a new resource representation with the information we want\n"
"ResourceRepresentation newResource = new ResourceRepresentation();\n"
"\n"
"newResource.setName(\"New Resource\");\n"
"newResource.setType(\"urn:hello-world-authz:resources:example\");\n"
"\n"
"newResource.addScope(new ScopeRepresentation(\"urn:hello-world-authz:scopes:view\"));\n"
"\n"
"ProtectedResource resourceClient = authzClient.protection().resource();\n"
"ResourceRepresentation existingResource = resourceClient.findByName(newResource.getName());\n"
"\n"
"if (existingResource != null) {\n"
"    resourceClient.delete(existingResource.getId());\n"
"}\n"
"\n"
"// create the resource on the server\n"
"ResourceRepresentation response = resourceClient.create(newResource);\n"
"String resourceId = response.getId();\n"
"\n"
"// query the resource using its newly generated id\n"
"ResourceRepresentation resource = resourceClient.findById(resourceId);\n"
"\n"
"System.out.println(resource);\n"

#. type: Title ==
#, no-wrap
msgid "Introspecting an RPT"
msgstr "RPTのイントロスペクション"

#. type: Code block
#, no-wrap
msgid ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// send the authorization request to the server in order to\n"
"// obtain an RPT with all permissions granted to the user\n"
"AuthorizationResponse response = authzClient.authorization(\"alice\", \"alice\").authorize();\n"
"String rpt = response.getToken();\n"
"\n"
"// introspect the token\n"
"TokenIntrospectionResponse requestingPartyToken = authzClient.protection().introspectRequestingPartyToken(rpt);\n"
"\n"
"System.out.println(\"Token status is: \" + requestingPartyToken.getActive());\n"
"System.out.println(\"Permissions granted by the server: \");\n"
"\n"
"for (Permission granted : requestingPartyToken.getPermissions()) {\n"
"    System.out.println(granted);\n"
"}\n"
msgstr ""
"// create a new instance based on the configuration defined in keycloak-authz.json\n"
"AuthzClient authzClient = AuthzClient.create();\n"
"\n"
"// send the authorization request to the server in order to\n"
"// obtain an RPT with all permissions granted to the user\n"
"AuthorizationResponse response = authzClient.authorization(\"alice\", \"alice\").authorize();\n"
"String rpt = response.getToken();\n"
"\n"
"// introspect the token\n"
"TokenIntrospectionResponse requestingPartyToken = authzClient.protection().introspectRequestingPartyToken(rpt);\n"
"\n"
"System.out.println(\"Token status is: \" + requestingPartyToken.getActive());\n"
"System.out.println(\"Permissions granted by the server: \");\n"
"\n"
"for (Permission granted : requestingPartyToken.getPermissions()) {\n"
"    System.out.println(granted);\n"
"}\n"
