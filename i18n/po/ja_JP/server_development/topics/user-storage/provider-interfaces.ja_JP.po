# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# jic_m_mito <jic-m-mito@nri.co.jp>, 2018
# Hiroyuki Wada <wadahiro@gmail.com>, 2019
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2019\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: delimited block -
#, no-wrap
msgid "    }\n"
msgstr "    }\n"

#. type: delimited block -
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Title ===
#, no-wrap
msgid "Provider Interfaces"
msgstr "プロバイダー・インターフェイス"

#. type: Plain text
msgid ""
"When building an implementation of the User Storage SPI you have to define a"
" provider class and a provider factory.  Provider class instances are "
"created per transaction by provider factories.  Provider classes do all the "
"heavy lifting of user lookup and other user operations.  They must implement"
" the `org.keycloak.storage.UserStorageProvider` interface."
msgstr ""
"ユーザー・ストレージSPIを実装する場合、プロバイダー・クラスとプロバイダー・ファクトリーを定義する必要があります。プロバイダー・クラス・インスタンスは、プロバイダー・ファクトリーによってトランザクション毎に作成されます。プロバイダー・クラスは、ユーザーのルックアップやその他の操作などの重い処理をすべて請け負います。プロバイダー・クラスは、"
" `org.keycloak.storage.UserStorageProvider` インターフェイスを実装する必要があります。"

#. type: delimited block -
#, no-wrap
msgid "package org.keycloak.storage;\n"
msgstr "package org.keycloak.storage;\n"

#. type: delimited block -
#, no-wrap
msgid "public interface UserStorageProvider extends Provider {\n"
msgstr "public interface UserStorageProvider extends Provider {\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * Callback when a realm is removed.  Implement this if, for example, you want to do some\n"
"     * cleanup in your user storage when a realm is removed\n"
"     *\n"
"     * @param realm\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm) {\n"
msgstr ""
"    /**\n"
"     * Callback when a realm is removed.  Implement this if, for example, you want to do some\n"
"     * cleanup in your user storage when a realm is removed\n"
"     *\n"
"     * @param realm\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm) {\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * Callback when a group is removed.  Allows you to do things like remove a user\n"
"     * group mapping in your external store if appropriate\n"
"     *\n"
"     * @param realm\n"
"     * @param group\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, GroupModel group) {\n"
msgstr ""
"    /**\n"
"     * Callback when a group is removed.  Allows you to do things like remove a user\n"
"     * group mapping in your external store if appropriate\n"
"     *\n"
"     * @param realm\n"
"     * @param group\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, GroupModel group) {\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * Callback when a role is removed.  Allows you to do things like remove a user\n"
"     * role mapping in your external store if appropriate\n"
msgstr ""
"    /**\n"
"     * Callback when a role is removed.  Allows you to do things like remove a user\n"
"     * role mapping in your external store if appropriate\n"

#. type: delimited block -
#, no-wrap
msgid ""
"     * @param realm\n"
"     * @param role\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, RoleModel role) {\n"
msgstr ""
"     * @param realm\n"
"     * @param role\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, RoleModel role) {\n"

#. type: Plain text
msgid ""
"You may be thinking that the `UserStorageProvider` interface is pretty "
"sparse? You'll see later in this chapter that there are other mix-in "
"interfaces your provider class may implement to support the meat of user "
"integration."
msgstr ""
"`UserStorageProvider` "
"インターフェイスは非常に稀薄だと思うかもしれません。この章の後半で、ユーザー統合の重要性をサポートするために、プロバイダー・クラスが実装するかもしれないミックスイン・インターフェイスがあることが分かります。"

#. type: Plain text
msgid ""
"`UserStorageProvider` instances are created once per transaction. When the "
"transaction is complete, the `UserStorageProvider.close()` method is invoked"
" and the instance is then garbage collected. Instances are created by "
"provider factories. Provider factories implement the "
"`org.keycloak.storage.UserStorageProviderFactory` interface."
msgstr ""
"`UserStorageProvider` インスタンスはトランザクション毎に都度作成されます。トランザクションが完了すると、 "
"`UserStorageProvider.close()` "
"メソッドが呼び出され、次にインスタンスがガーベッジ・コレクション処理されます。インスタンスはプロバイダー・ファクトリーにより作成されます。プロバイダー・ファクトリーは"
" `org.keycloak.storage.UserStorageProviderFactory` インターフェイスを実装します。"

#. type: delimited block -
#, no-wrap
msgid ""
"/**\n"
" * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n"
" * @version $Revision: 1 $\n"
" */\n"
"public interface UserStorageProviderFactory<T extends UserStorageProvider> extends ComponentFactory<T, UserStorageProvider> {\n"
msgstr ""
"/**\n"
" * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n"
" * @version $Revision: 1 $\n"
" */\n"
"public interface UserStorageProviderFactory<T extends UserStorageProvider> extends ComponentFactory<T, UserStorageProvider> {\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * This is the name of the provider and will be shown in the admin console as an option.\n"
"     *\n"
"     * @return\n"
"     */\n"
"    @Override\n"
"    String getId();\n"
msgstr ""
"    /**\n"
"     * This is the name of the provider and will be shown in the admin console as an option.\n"
"     *\n"
"     * @return\n"
"     */\n"
"    @Override\n"
"    String getId();\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * called per Keycloak transaction.\n"
"     *\n"
"     * @param session\n"
"     * @param model\n"
"     * @return\n"
"     */\n"
"    T create(KeycloakSession session, ComponentModel model);\n"
"...\n"
"}\n"
msgstr ""
"    /**\n"
"     * called per Keycloak transaction.\n"
"     *\n"
"     * @param session\n"
"     * @param model\n"
"     * @return\n"
"     */\n"
"    T create(KeycloakSession session, ComponentModel model);\n"
"...\n"
"}\n"

#. type: Plain text
msgid ""
"Provider factory classses must specify the concrete provider class as a "
"template parameter when implementing the `UserStorageProviderFactory`.  This"
" is a must as the runtime will introspect this class to scan for its "
"capabilities (the other interfaces it implements).  So for example, if your "
"provider class is named `FileProvider`, then the factory class should look "
"like this:"
msgstr ""
"プロバイダー・ファクトリー・クラスが `UserStorageProviderFactory` "
"を実装する場合、具体的なプロバイダー・クラスをテンプレート・パラメーターとして指定する必要があります。ランタイムがこのクラスをイントロスペクトしてその機能（それが実装する他のインターフェイス）をスキャンするので、これは必須です。たとえば、現在は、プロバイダー・クラスが"
" `FileProvider` という名前の場合、ファクトリー・クラスは以下のように表示されます。"

#. type: delimited block -
#, no-wrap
msgid ""
"public class FileProviderFactory implements "
"UserStorageProviderFactory<FileProvider> {\n"
msgstr ""
"public class FileProviderFactory implements "
"UserStorageProviderFactory<FileProvider> {\n"

#. type: delimited block -
#, no-wrap
msgid "    public String getId() { return \"file-provider\"; }\n"
msgstr "    public String getId() { return \"file-provider\"; }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    public FileProvider create(KeycloakSession session, ComponentModel model) {\n"
"       ...\n"
"    }\n"
msgstr ""
"    public FileProvider create(KeycloakSession session, ComponentModel model) {\n"
"       ...\n"
"    }\n"

#. type: Plain text
msgid ""
"The `getId()` method returns the name of the User Storage provider.  This id"
" will be displayed in the admin console's User Federation page when you want"
" to enable the provider for a specific realm."
msgstr ""
"`getId()` "
"メソッドはユーザー・ストレージ・プロバイダーの名前を返します。特定のレルムのプロバイダーを有効にしたい場合、このidは管理コンソールのUser "
"Federationページ内に表示されます。"

#. type: Plain text
msgid ""
"The `create()` method is responsible for allocating an instance of the "
"provider class.  It takes a `org.keycloak.models.KeycloakSession` parameter."
"  This object can be used to look up other information and metadata as well "
"as provide access to various other components within the runtime.  The "
"`ComponentModel` parameter represents how the provider was enabled and "
"configured within a specific realm.  It contains the instance id of the "
"enabled provider as well as any configuration you may have specified for it "
"when you enabled through the admin console."
msgstr ""
"`create()` メソッドは、プロバイダー・クラスのインスタンスの割り当てを担当します。これは "
"`org.keycloak.models.KeycloakSession` "
"パラメーターを受け取ります。このオブジェクトは、ランタイム内で他のさまざまなコンポーネントへアクセスできるようにするだけでなく、他の情報やメタデータを参照することにも使用できます。"
" `ComponentModel` "
"パラメーターは、特定のレルム内でプロバイダーがどのように有効にされ設定されたかを表します。これには、有効なプロバイダーのインスタンスIDと、管理コンソールで有効にした際に指定した可能性がある設定が含まれます"

#. type: Plain text
msgid ""
"The `UserStorageProviderFactory` has other capabilities as well which we "
"will go over later in this chapter."
msgstr "`UserStorageProviderFactory` には他にも機能がありますが、それはこの章で後ほど説明します。"
