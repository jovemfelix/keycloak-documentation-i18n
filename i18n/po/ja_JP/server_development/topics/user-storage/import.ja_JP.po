# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/"
"teams/79437/ja_JP/)\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Block title
#: source/server_development/topics/user-storage/augmenting.adoc:45
#: source/server_development/topics/user-storage/import.adoc:29
#: source/server_development/topics/user-storage/registration-query.adoc:13
#: source/server_development/topics/user-storage/registration-query.adoc:31
#: source/server_development/topics/user-storage/registration-query.adoc:63
#: source/server_development/topics/user-storage/registration-query.adoc:79
#: source/server_development/topics/user-storage/registration-query.adoc:97
#: source/server_development/topics/user-storage/registration-query.adoc:130
#: source/server_development/topics/user-storage/registration-query.adoc:161
#: source/server_development/topics/user-storage/registration-query.adoc:189
#: source/server_development/topics/user-storage/registration-query.adoc:210
#, no-wrap
msgid "PropertyFileUserStorageProvider"
msgstr ""

#. type: Title ===
#: source/server_development/topics/user-storage/import.adoc:2
#, no-wrap
msgid "Import Implementation Strategy"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:7
msgid ""
"When implementing a user storage provider, there's another strategy you can "
"take. Instead of using user federated storage, you can create a user locally "
"in the {project_name} built-in user database and copy attributes from your "
"external store into this local copy. There are many advantages to this "
"approach."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:10
msgid ""
"{project_name} basically becomes a persistence user cache for your external "
"store. Once the user is imported you'll no longer hit the external store "
"thus taking load off of it."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:13
msgid ""
"If you are moving to {project_name} as your official user store and "
"deprecating the old external store, you can slowly migrate applications to "
"use {project_name}. When all applications have been migrated, unlink the "
"imported user, and retire the old legacy external store."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:15
#: source/server_development/topics/user-storage/migration.adoc:27
msgid ""
"There are some obvious disadvantages though to using an import strategy:"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:19
msgid ""
"Looking up a user for the first time will require multiple updates to "
"{project_name} database. This can be a big performance loss under load and "
"put a lot of strain on the {project_name} database. The user federated "
"storage approach will only store extra data as needed and may never be used "
"depending on the capabilities of your external store."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:21
#: source/server_development/topics/user-storage/migration.adoc:33
msgid ""
"With the import approach, you have to keep local keycloak storage and "
"external storage in sync. The User Storage SPI has capability interfaces "
"that you can implement to support synchronization, but this can quickly "
"become painful and messy."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:25
msgid ""
"To implement the import strategy you simply check to see first if the user "
"has been imported locally. If so return the local user, if not create the "
"user locally and import data from the external store. You can also proxy the "
"local user so that most changes are automatically synchronized."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:28
msgid ""
"This will be a bit contrived, but we can extend our "
"`PropertyFileUserStorageProvider` to take this approach. We begin first by "
"modifying the `createAdapter()` method."
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:50
#, no-wrap
msgid ""
"    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        UserModel local = session.userLocalStorage().getUserByUsername(username, realm);\n"
"        if (local == null) {\n"
"            local = session.userLocalStorage().addUser(realm, username);\n"
"            local.setFederationLink(model.getId());\n"
"        }\n"
"        return new UserModelDelegate(local) {\n"
"            @Override\n"
"            public void setUsername(String username) {\n"
"                String pw = (String)properties.remove(username);\n"
"                if (pw != null) {\n"
"                    properties.put(username, pw);\n"
"                    save();\n"
"                }\n"
"                super.setUsername(username);\n"
"            }\n"
"        };\n"
"    }\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:56
msgid ""
"In this method we call the `KeycloakSession.userLocalStorage()` method to "
"obtain a reference to local {project_name} user storage. We see if the user "
"is stored locally, if not, we add it locally. Also note that we call "
"`UserModel.setFederationLink()` and pass in the ID of the `ComponentModel` "
"of our provider. This sets a link between the provider and the imported user."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:59
#, no-wrap
msgid ""
"When a user storage provider is removed, any user imported by it will also be removed.  This is one of the\n"
"      purposes of calling `UserModel.setFederationLink()`.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:64
msgid ""
"Another thing to note is that if a local user is linked, your storage "
"provider will still be delegated to for methods that it implements from the "
"`CredentialInputValidator` and `CredentialInputUpdater` interfaces. "
"Returning `false` from a validation or update will just result in "
"{project_name} seeing if it can validate or update using local storage."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:71
msgid ""
"Also notice that we are proxying the local user using the `org.keycloak."
"models.utils.UserModelDelegate' class.  This class is an implementation of "
"`UserModel`. Every method just delegates to the `UserModel` it was "
"instantiated with.  We override the `setUsername()` method of this delegate "
"class to synchronize automatically with the property file.  For your "
"providers, you can use this to _intercept_ other methods on the local "
"`UserModel` to perform synchronization with your external store.  For "
"example, get methods could make sure that the local store is in sync. Set "
"methods keep the external store in sync with the local one."
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:75
#, no-wrap
msgid ""
"If your provider is implementing the `UserRegistrationProvider` interface, your `removeUser()` method does not\n"
"      need to remove the user from local storage.  The runtime will automatically perform this operation.  Also\n"
"      note that `removeUser()` will be invoked before it is removed from local storage.\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/user-storage/import.adoc:77
#, no-wrap
msgid "ImportedUserValidation Interface"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:83
msgid ""
"If you remember earlier in this chapter, we discussed how querying for a "
"user worked.  Local storage is queried first, if the user is found there, "
"then the query ends.  This is a problem for our above implementation as we "
"want to proxy the local `UserModel` so that we can keep usernames in sync.  "
"The User Storage SPI has a callback for whenever a linked local user is "
"loaded from the local database."
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:97
#, no-wrap
msgid ""
"package org.keycloak.storage.user;\n"
"public interface ImportedUserValidation {\n"
"    /**\n"
"     * If this method returns null, then the user in local storage will be removed\n"
"     *\n"
"     * @param realm\n"
"     * @param user\n"
"     * @return null if user no longer valid\n"
"     */\n"
"    UserModel validate(RealmModel realm, UserModel user);\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:103
msgid ""
"Whenever a linked local user is loaded, if the user storage provider class "
"implements this interface, then the `validate()` method is called. Here you "
"can proxy the local user passed in as a parameter and return it. That new "
"`UserModel` will be used. You can also optionally do a check to see if the "
"user still exists in the external store.  If `validate()` returns `null`, "
"then the local user will be removed from the database."
msgstr ""

#. type: Title ====
#: source/server_development/topics/user-storage/import.adoc:104
#, no-wrap
msgid "ImportSynchronization Interface"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:109
msgid ""
"With the import strategy you can see that it is possible for the local user "
"copy to get out of sync with external storage. For example, maybe a user has "
"been removed from the external store. The User Storage SPI has an additional "
"interface you can implement to deal with this, `org.keycloak.storage.user."
"ImportSynchronization`:"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:113
#, no-wrap
msgid "package org.keycloak.storage.user;\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:118
#, no-wrap
msgid ""
"public interface ImportSynchronization {\n"
"    SynchronizationResult sync(KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model);\n"
"    SynchronizationResult syncSince(Date lastSync, KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model);\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:121
msgid ""
"This interface is implemented by the provider factory. Once this interface "
"is implemented by the provider factory, the administration console "
"management page for the provider shows additional options. You can manually "
"force a synchronization by clicking a button. This invokes the "
"`ImportSynchronization.sync()` method. Also, additional configuration "
"options are displayed that allow you to automatically schedule a "
"synchronization. Automatic synchronizations invoke the `syncSince()` method."
msgstr ""
