# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tsukasa Amano <t.amano@pro-japan.co.jp>, 2018
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2018
# Hiroyuki Wada <wadahiro@gmail.com>, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Hiroyuki Wada <wadahiro@gmail.com>, 2018\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: delimited block -
#, no-wrap
msgid "...\n"
msgstr "...\n"

#. type: Title ===
#, no-wrap
msgid "Augmenting External Storage"
msgstr "外部ストレージの拡張"

#. type: Plain text
msgid ""
"The `PropertyProfileUserStorageProvider` example is really limited.  While "
"we will be able to login with users stored in a property file, we won't be "
"able to do much else.  If users loaded by this provider need special role or"
" group mappings to fully access particular applications there is no way for "
"us to add additional role mappings to these users.  You also can't modify or"
" add additional important attributes like email, first and last name."
msgstr ""
"`PropertyProfileUserStorageProvider` "
"の例は実際には限定されています。プロパティー・ファイルに保存されているユーザーでログインすることはできますが、他のことはあまりできません。このプロバイダーによってロードされたユーザーが、特定のアプリケーションに完全にアクセスするための特殊なロールまたはグループ・マッピングを必要とする場合、これらのユーザーにロールマッピングを追加する方法はありません。また、電子メール、姓名などの重要な属性を変更または追加することもできません。"

#. type: Plain text
msgid ""
"For these types of situations, {project_name} allows you to augment your "
"external store by storing extra information in {project_name}'s database.  "
"This is called federated user storage and is encapsulated within the "
"`org.keycloak.storage.federated.UserFederatedStorageProvider` class."
msgstr ""
"このような状況の場合、{project_name}は{project_name}のデータベースに余分な情報を保存することで、外部ストアを拡張することができます。これはフェデレーテッド・ユーザー・ストレージと呼ばれ、"
" `org.keycloak.storage.federated.UserFederatedStorageProvider` "
"クラス内にカプセル化されています。"

#. type: Block title
#, no-wrap
msgid "UserFederatedStorageProvider"
msgstr "UserFederatedStorageProvider"

#. type: delimited block -
#, no-wrap
msgid "package org.keycloak.storage.federated;\n"
msgstr "package org.keycloak.storage.federated;\n"

#. type: delimited block -
#, no-wrap
msgid "public interface UserFederatedStorageProvider extends Provider {\n"
msgstr "public interface UserFederatedStorageProvider extends Provider {\n"

#. type: delimited block -
#, no-wrap
msgid ""
"    Set<GroupModel> getGroups(RealmModel realm, String userId);\n"
"    void joinGroup(RealmModel realm, String userId, GroupModel group);\n"
"    void leaveGroup(RealmModel realm, String userId, GroupModel group);\n"
"    List<String> getMembership(RealmModel realm, GroupModel group, int firstResult, int max);\n"
msgstr ""
"    Set<GroupModel> getGroups(RealmModel realm, String userId);\n"
"    void joinGroup(RealmModel realm, String userId, GroupModel group);\n"
"    void leaveGroup(RealmModel realm, String userId, GroupModel group);\n"
"    List<String> getMembership(RealmModel realm, GroupModel group, int firstResult, int max);\n"

#. type: Plain text
msgid ""
"The `UserFederatedStorageProvider` instance is available on the "
"`KeycloakSession.userFederatedStorage()` method.  It has all different kinds"
" of methods for storing attributes, group and role mappings, different "
"credential types, and required actions.  If your external store's datamodel "
"cannot support the full {project_name} feature set, then this service can "
"fill in the gaps."
msgstr ""
"`UserFederatedStorageProvider` インスタンスは、 "
"`KeycloakSession.userFederatedStorage()` "
"メソッドで利用できます。これには、属性、グループとロールマッピング、異なるクレデンシャル・タイプ、および必要なアクションを保存するためのすべての種類のメソッドがあります。外部ストアのデータモデルが完全な{project_name}機能セットをサポートできない場合、このサービスはそのギャップを埋めることができます。"

#. type: Plain text
msgid ""
"{project_name} comes with a helper class "
"`org.keycloak.storage.adapter.AbstractUserAdapterFederatedStorage` that will"
" delegate every single `UserModel` method except get/set of username to user"
" federated storage.  Override the methods you need to override to delegate "
"to your external storage representations.  It is strongly suggested you read"
" the javadoc of this class as it has smaller protected methods you may want "
"to override.  Specifically surrounding group membership and role mappings."
msgstr ""
"{project_name}には、ユーザー名の取得/設定を除く全ての `UserModel` "
"メソッドをユーザー・フェデレーテッド・ストレージに委譲するヘルパークラス "
"`org.keycloak.storage.adapter.AbstractUserAdapterFederatedStorage` "
"が付属しています。外部ストレージ表現に委譲するためにオーバーライドする必要があるメソッドをオーバーライドします。このクラスのjavadocを読むことを強くお勧めします。これは、オーバーライドしてもよい、より小さなprotectedのメソッドを持っているからです。特に、グループ・メンバーシップとロールマッピングを含みます。"

#. type: Title ====
#, no-wrap
msgid "Augmentation Example"
msgstr "拡張の例"

#. type: Plain text
msgid ""
"In our `PropertyFileUserStorageProvider` example, we just need a simple "
"change to our provider to use the `AbstractUserAdapterFederatedStorage`."
msgstr ""
"`PropertyFileUserStorageProvider` の例では、 "
"`AbstractUserAdapterFederatedStorage` を使うためにプロバイダーに簡単な変更が必要です。"

#. type: Block title
#, no-wrap
msgid "PropertyFileUserStorageProvider"
msgstr "PropertyFileUserStorageProvider"

#. type: delimited block -
#, no-wrap
msgid ""
"    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        return new AbstractUserAdapterFederatedStorage(session, realm, model) {\n"
"            @Override\n"
"            public String getUsername() {\n"
"                return username;\n"
"            }\n"
msgstr ""
"    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        return new AbstractUserAdapterFederatedStorage(session, realm, model) {\n"
"            @Override\n"
"            public String getUsername() {\n"
"                return username;\n"
"            }\n"

#. type: delimited block -
#, no-wrap
msgid ""
"            @Override\n"
"            public void setUsername(String username) {\n"
"                String pw = (String)properties.remove(username);\n"
"                if (pw != null) {\n"
"                    properties.put(username, pw);\n"
"                    save();\n"
"                }\n"
"            }\n"
"        };\n"
"    }\n"
msgstr ""
"            @Override\n"
"            public void setUsername(String username) {\n"
"                String pw = (String)properties.remove(username);\n"
"                if (pw != null) {\n"
"                    properties.put(username, pw);\n"
"                    save();\n"
"                }\n"
"            }\n"
"        };\n"
"    }\n"

#. type: Plain text
msgid ""
"We instead define an anonymous class implementation of "
"`AbstractUserAdapterFederatedStorage`.  The `setUsername()` method makes "
"changes to the properties file and saves it."
msgstr ""
"代わりに `AbstractUserAdapterFederatedStorage` の匿名クラスの実装を定義します。 `setUsername()` "
"メソッドはプロパティー・ファイルを変更して保存します。"
