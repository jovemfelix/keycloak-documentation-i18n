# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ===
#, no-wrap
msgid "Stream-based Interfaces"
msgstr ""

#. type: Plain text
msgid ""
"Many of the user storage interfaces in {project_name} contain query methods "
"that can return potentially large sets of objects, which might lead to "
"significant impacts in terms of memory consumption and processing time. This "
"is especially true when only a small subset of the objects' internal state "
"is used in the query method's logic."
msgstr ""

#. type: Plain text
msgid ""
"To provide developers with a more efficient alternative to process large "
"data sets in these query methods, a `Streams` sub-interface has been added "
"to user storage interfaces. These `Streams` sub-interfaces replace the "
"original collection-based methods in the super-interfaces with stream-based "
"variants, making the collection-based methods default. The default "
"implementation of a collection-based query method invokes its `Stream` "
"counterpart and collects the result into the proper collection type."
msgstr ""

#. type: Plain text
msgid ""
"The `Streams` sub-interfaces allow for implementations to focus on the "
"stream-based approach for processing sets of data and benefit from the "
"potential memory and performance optimizations of that approach. The "
"interfaces that offer a `Streams` sub-interface to be implemented include a "
"few _<<_provider_capability_interfaces,capability interfaces>>_, all "
"interfaces in the `org.keycloak.storage.federated` package and a few others "
"that might be implemented depending on the scope of the custom storage "
"implementation."
msgstr ""

#. type: Plain text
msgid ""
"See this list of the interfaces that offer a `Streams` sub-interface to "
"developers."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
" Package | Classes\n"
"ifeval::[{project_community}==true]\n"
msgstr ""

#. type: Plain text
msgid ""
"`org.keycloak.credential` | `CredentialInputUpdater`(*), "
"`UserCredentialStore`"
msgstr ""

#. type: Plain text
msgid ""
"`org.keycloak.models` | `GroupModel`, `RoleMapperModel`, "
"`UserCredentialManager`, `UserModel`, `UserProvider`"
msgstr ""

#. type: Plain text
msgid "`org.keycloak.models.cache` | `CachedUserModel`, `UserCache`"
msgstr ""

#. type: Plain text
msgid "`org.keycloak.storage.federated` | All interfaces"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
" `org.kecyloak.storage.user` | `UserQueryProvider`(*)\n"
"endif::[]\n"
"ifeval::[{project_product}==true]\n"
msgstr ""

#. type: Plain text
msgid "`org.keycloak.credential` | `CredentialInputUpdater`(*)"
msgstr ""

#. type: Plain text
msgid "`org.keycloak.models` | `GroupModel`, `RoleMapperModel`, `UserModel`"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
" `org.kecyloak.storage.user` | `UserQueryProvider`(*)\n"
"endif::[]\n"
msgstr ""

#. type: Plain text
msgid ""
"(*) indicates the interface is a _<<_provider_capability_interfaces,"
"capability interface>>_"
msgstr ""

#. type: Plain text
msgid ""
"Custom user storage implementation that want to benefit from the streams "
"approach should simply implement the `Streams` sub-interfaces instead of the "
"original interfaces. For example, the following code uses the `Streams` "
"variant of the `UserQueryProvider` interface:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"public class CustomQueryProvider extends UserQueryProvider.Streams {\n"
"...\n"
"    @Override\n"
"    Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n"
"        // custom logic here\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    Stream<UserModel> searchForUserStream(String search, RealmModel realm) {\n"
"        // custom logic here\n"
"    }\n"
"...\n"
"}\n"
msgstr ""
