# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: delimited block -
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Configuration Techniques"
msgstr ""

#. type: Plain text
msgid ""
"Our `PropertyFileUserStorageProvider` example is bit contrived. It is "
"hardcoded to a property file that is embedded in the jar of the provider. "
"Not very useful at all. We might want to make the location of this file "
"configurable per instance of the provider. In other words, we might want to "
"reuse this provider mulitple times in multiple different realms and point to "
"completely different user property files. We'll also want to perform this "
"configuration within the administration console UI."
msgstr ""

#. type: Plain text
msgid ""
"The `UserStorageProviderFactory` has additional methods you can implement "
"that handle provider configuration. You describe the variables you want to "
"configure per provider and the administration console automatically renders "
"a generic input page to gather this configuration. When implemented, "
"callback methods also validate the configuration before it is saved, when a "
"provider is created for the first time, and when it is updated. "
"`UserStorageProviderFactory` inherits these methods from the `org.keycloak."
"component.ComponentFactory` interface."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    List<ProviderConfigProperty> getConfigProperties();\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    default\n"
"    void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel model)\n"
"            throws ComponentValidationException\n"
"    {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    default\n"
"    void onCreate(KeycloakSession session, RealmModel realm, ComponentModel model) {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    default\n"
"    void onUpdate(KeycloakSession session, RealmModel realm, ComponentModel model) {\n"
msgstr ""

#. type: Plain text
msgid ""
"The `ComponentFactory.getConfigProperties()` method returns a list of `org."
"keycloak.provider.ProviderConfigProperty` instances. These instances declare "
"metadata that is needed to render and store each configuration variable of "
"the provider."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Configuration Example"
msgstr ""

#. type: Plain text
msgid ""
"Let's expand our `PropertyFileUserStorageProviderFactory` example to allow "
"you to point a provider instance to a specific file on disk."
msgstr ""

#. type: Block title
#, no-wrap
msgid "PropertyFileUserStorageProviderFactory"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"public class PropertyFileUserStorageProviderFactory\n"
"                  implements UserStorageProviderFactory<PropertyFileUserStorageProvider> {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    protected static final List<ProviderConfigProperty> configMetadata;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    static {\n"
"        configMetadata = ProviderConfigurationBuilder.create()\n"
"                .property().name(\"path\")\n"
"                .type(ProviderConfigProperty.STRING_TYPE)\n"
"                .label(\"Path\")\n"
"                .defaultValue(\"${jboss.server.config.dir}/example-users.properties\")\n"
"                .helpText(\"File path to properties file\")\n"
"                .default\n"
"                .add().build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public List<ProviderConfigProperty> getConfigProperties() {\n"
"        return configMetadata;\n"
"    }\n"
msgstr ""

#. type: Plain text
msgid ""
"The `ProviderConfigurationBuilder` class is a great helper class to create a "
"list of configuration properties. Here we specify a variable named `path` "
"that is a String type. On the administration console configuration page for "
"this provider, this configuration variable is labeled as `Path` and has a "
"default value of `${jboss.server.config.dir}/example-users.properties`. When "
"you hover over the tooltip of this configuration option, it displays the "
"help text, `File path to properties file`."
msgstr ""

#. type: Plain text
msgid ""
"The next thing we want to do is to verify that this file exists on disk. We "
"do not want to enable an instance of this provider in the realm unless it "
"points to a valid user property file. To do this, we implement the "
"`validateConfiguration()` method."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel config)\n"
"                   throws ComponentValidationException {\n"
"        String fp = config.getConfig().getFirst(\"path\");\n"
"        if (fp == null) throw new ComponentValidationException(\"user property file does not exist\");\n"
"        fp = EnvUtil.replace(fp);\n"
"        File file = new File(fp);\n"
"        if (!file.exists()) {\n"
"            throw new ComponentValidationException(\"user property file does not exist\");\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
msgid ""
"In the `validateConfiguration()` method we get the configuration variable "
"from the `ComponentModel` and we check to see if that file exists on disk. "
"Notice that we use the `org.keycloak.common.util.EnvUtil.replace()` method. "
"With this method any string that has `${}` within it will replace that with "
"a system property value. The `${jboss.server.config.dir}` string corresponds "
"to the `configuration/` directory of our server and is really useful for "
"this example."
msgstr ""

#. type: Plain text
msgid ""
"Next thing we have to do is remove the old `init()` method. We do this "
"because user property files are going to be unique per provider instance. We "
"move this logic to the `create()` method."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public PropertyFileUserStorageProvider create(KeycloakSession session, ComponentModel model) {\n"
"        String path = model.getConfig().getFirst(\"path\");\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"        Properties props = new Properties();\n"
"        try {\n"
"            InputStream is = new FileInputStream(path);\n"
"            props.load(is);\n"
"            is.close();\n"
"        } catch (IOException e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"        return new PropertyFileUserStorageProvider(session, model, props);\n"
"    }\n"
msgstr ""

#. type: Plain text
msgid ""
"This logic is, of course, inefficient as every transaction reads the entire "
"user property file from disk, but hopefully this illustrates, in a simple "
"way, how to hook in configuration variables."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Configuring the Provider in the Administration Console"
msgstr ""

#. type: Plain text
msgid ""
"Now that the configuration is enabled, you can set the `path` variable when "
"you configure the provider in the administration console."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Configured Provider"
msgstr ""

#. type: Plain text
msgid "image:{project_images}/storage-provider-with-config.png[]"
msgstr ""
