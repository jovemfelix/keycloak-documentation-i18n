# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: delimited block -
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Provider Interfaces"
msgstr ""

#. type: Plain text
msgid ""
"When building an implementation of the User Storage SPI you have to define a "
"provider class and a provider factory.  Provider class instances are created "
"per transaction by provider factories.  Provider classes do all the heavy "
"lifting of user lookup and other user operations.  They must implement the "
"`org.keycloak.storage.UserStorageProvider` interface."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "package org.keycloak.storage;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "public interface UserStorageProvider extends Provider {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * Callback when a realm is removed.  Implement this if, for example, you want to do some\n"
"     * cleanup in your user storage when a realm is removed\n"
"     *\n"
"     * @param realm\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm) {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * Callback when a group is removed.  Allows you to do things like remove a user\n"
"     * group mapping in your external store if appropriate\n"
"     *\n"
"     * @param realm\n"
"     * @param group\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, GroupModel group) {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * Callback when a role is removed.  Allows you to do things like remove a user\n"
"     * role mapping in your external store if appropriate\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"     * @param realm\n"
"     * @param role\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, RoleModel role) {\n"
msgstr ""

#. type: Plain text
msgid ""
"You may be thinking that the `UserStorageProvider` interface is pretty "
"sparse? You'll see later in this chapter that there are other mix-in "
"interfaces your provider class may implement to support the meat of user "
"integration."
msgstr ""

#. type: Plain text
msgid ""
"`UserStorageProvider` instances are created once per transaction. When the "
"transaction is complete, the `UserStorageProvider.close()` method is invoked "
"and the instance is then garbage collected. Instances are created by "
"provider factories. Provider factories implement the `org.keycloak.storage."
"UserStorageProviderFactory` interface."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"/**\n"
" * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n"
" * @version $Revision: 1 $\n"
" */\n"
"public interface UserStorageProviderFactory<T extends UserStorageProvider> extends ComponentFactory<T, UserStorageProvider> {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * This is the name of the provider and will be shown in the admin console as an option.\n"
"     *\n"
"     * @return\n"
"     */\n"
"    @Override\n"
"    String getId();\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    /**\n"
"     * called per Keycloak transaction.\n"
"     *\n"
"     * @param session\n"
"     * @param model\n"
"     * @return\n"
"     */\n"
"    T create(KeycloakSession session, ComponentModel model);\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"Provider factory classes must specify the concrete provider class as a "
"template parameter when implementing the `UserStorageProviderFactory`.  This "
"is a must as the runtime will introspect this class to scan for its "
"capabilities (the other interfaces it implements).  So for example, if your "
"provider class is named `FileProvider`, then the factory class should look "
"like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "public class FileProviderFactory implements UserStorageProviderFactory<FileProvider> {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    public String getId() { return \"file-provider\"; }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    public FileProvider create(KeycloakSession session, ComponentModel model) {\n"
"       ...\n"
"    }\n"
msgstr ""

#. type: Plain text
msgid ""
"The `getId()` method returns the name of the User Storage provider.  This id "
"will be displayed in the admin console's User Federation page when you want "
"to enable the provider for a specific realm."
msgstr ""

#. type: Plain text
msgid ""
"The `create()` method is responsible for allocating an instance of the "
"provider class.  It takes a `org.keycloak.models.KeycloakSession` "
"parameter.  This object can be used to look up other information and "
"metadata as well as provide access to various other components within the "
"runtime.  The `ComponentModel` parameter represents how the provider was "
"enabled and configured within a specific realm.  It contains the instance id "
"of the enabled provider as well as any configuration you may have specified "
"for it when you enabled through the admin console."
msgstr ""

#. type: Plain text
msgid ""
"The `UserStorageProviderFactory` has other capabilities as well which we "
"will go over later in this chapter."
msgstr ""
