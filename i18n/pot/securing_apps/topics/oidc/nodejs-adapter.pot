# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ====
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Node.js Adapter"
msgstr ""

#. type: Plain text
msgid ""
"{project_name} provides a Node.js adapter built on top of https://github.com/"
"senchalabs/connect[Connect] to protect server-side JavaScript apps - the "
"goal was to be flexible enough to integrate with frameworks like https://"
"expressjs.com/[Express.js]."
msgstr ""

#. type: Plain text
msgid ""
"The library can be downloaded directly from https://www.npmjs.com/package/"
"keycloak-connect[ {project_name} organization] and the source is available "
"at https://github.com/keycloak/keycloak-nodejs-connect[GitHub]."
msgstr ""

#. type: Plain text
msgid ""
"To use the Node.js adapter, first you must create a client for your "
"application in the {project_name} Administration Console. The adapter "
"supports public, confidential, and bearer-only access type. Which one to "
"choose depends on the use-case scenario."
msgstr ""

#. type: Plain text
msgid ""
"Once the client is created click the `Installation` tab, select "
"`{project_name} OIDC JSON` for `Format Option`, and then click `Download`. "
"The downloaded `keycloak.json` file should be at the root folder of your "
"project."
msgstr ""

#. type: Plain text
msgid ""
"Assuming you've already installed https://nodejs.org[Node.js], create a "
"folder for your application:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    mkdir myapp && cd myapp\n"
msgstr ""

#. type: Plain text
msgid ""
"Use `npm init` command to create a `package.json` for your application. Now "
"add the {project_name} connect adapter in the dependencies list:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"{project_versionNpm}\"\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    \"dependencies\": {\n"
"        \"keycloak-connect\": \"file:keycloak-connect-{project_versionNpm}.tgz\"\n"
"    }\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Instantiate a Keycloak class"
msgstr ""

#. type: Plain text
msgid ""
"The `Keycloak` class provides a central point for configuration and "
"integration with your application.  The simplest creation involves no "
"arguments."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    var session = require('express-session');\n"
"    var Keycloak = require('keycloak-connect');\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    var memoryStore = new session.MemoryStore();\n"
"    var keycloak = new Keycloak({ store: memoryStore });\n"
msgstr ""

#. type: Plain text
msgid ""
"By default, this will locate a file named `keycloak.json` alongside the main "
"executable of your application to initialize keycloak-specific settings "
"(public key, realm name, various URLs).  The `keycloak.json` file is "
"obtained from the {project_name} Admin Console."
msgstr ""

#. type: Plain text
msgid ""
"Instantiation with this method results in all of the reasonable defaults "
"being used. As alternative, it's also possible to provide a configuration "
"object, rather than the `keycloak.json` file:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    let kcConfig = {\n"
"        clientId: 'myclient',\n"
"        bearerOnly: true,\n"
"        serverUrl: 'http://localhost:8080/auth',\n"
"        realm: 'myrealm',\n"
"        realmPublicKey: 'MIIBIjANB...'\n"
"    };\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    let keycloak = new Keycloak({ store: memoryStore }, kcConfig);\n"
msgstr ""

#. type: Plain text
msgid ""
"Applications can also redirect users to their preferred identity provider by "
"using:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    let keycloak = new Keycloak({ store: memoryStore, idpHint: myIdP }, kcConfig);\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Configuring a web session store"
msgstr ""

#. type: Plain text
msgid ""
"If you want to use web sessions to manage server-side state for "
"authentication, you need to initialize the `Keycloak(...)` with at least a "
"`store` parameter, passing in the actual session store that `express-"
"session` is using."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    var session = require('express-session');\n"
"    var memoryStore = new session.MemoryStore();\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    var keycloak = new Keycloak({ store: memoryStore });\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Passing a custom scope value"
msgstr ""

#. type: Plain text
msgid ""
"By default, the scope value `openid` is passed as a query parameter to "
"{project_name}'s login URL, but you can add an additional custom value:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    var keycloak = new Keycloak({ scope: 'offline_access' });\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Installing Middleware"
msgstr ""

#. type: Plain text
msgid ""
"Once instantiated, install the middleware into your connect-capable app:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    var app = express();\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.use( keycloak.middleware() );\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Configuration for Proxies"
msgstr ""

#. type: Plain text
msgid ""
"If the application is running behind a proxy that terminates an SSL "
"connection Express must be configured per the link:https://expressjs.com/en/"
"guide/behind-proxies.html[express behind proxies] guide.  Using an incorrect "
"proxy configuration can result in invalid redirect URIs being generated."
msgstr ""

#. type: Plain text
msgid "Example configuration:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.set( 'trust proxy', true );\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Checking Authentication"
msgstr ""

#. type: Plain text
msgid ""
"To check that a user is authenticated before accessing a resource, simply "
"use `keycloak.checkSso()`. It will only authenticate if the user is already "
"logged-in. If the user is not logged-in, the browser will be redirected back "
"to the originally-requested URL and remain unauthenticated:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/check-sso', keycloak.checkSso(), checkSsoHandler );\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Protecting Resources"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Simple authentication"
msgstr ""

#. type: Plain text
msgid ""
"To enforce that a user must be authenticated before accessing a resource, "
"simply use a no-argument version of `keycloak.protect()`:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/complain', keycloak.protect(), complaintHandler );\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Role-based authorization"
msgstr ""

#. type: Plain text
msgid "To secure a resource with an application role for the current app:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/special', keycloak.protect('special'), specialHandler );\n"
msgstr ""

#. type: Plain text
msgid "To secure a resource with an application role for a *different* app:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    app.get( '/extra-special', keycloak.protect('other-app:special'), extraSpecialHandler );\n"
msgstr ""

#. type: Plain text
msgid "To secure a resource with a realm role:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    app.get( '/admin', keycloak.protect( 'realm:admin' ), adminHandler );\n"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Resource-Based Authorization"
msgstr ""

#. type: Plain text
msgid ""
"Resource-Based Authorization allows you to protect resources, and their "
"specific methods/actions,**** based on a set of policies defined in "
"Keycloak, thus externalizing authorization from your application. This is "
"achieved by exposing a `keycloak.enforcer` method which you can use to "
"protect resources.*"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.get('/apis/me', keycloak.enforcer('user:profile'), userProfileHandler);\n"
msgstr ""

#. type: Plain text
msgid ""
"The `keycloak-enforcer` method operates in two modes, depending on the value "
"of the `response_mode` configuration option."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'token'}), userProfileHandler);\n"
msgstr ""

#. type: Plain text
msgid ""
"If `response_mode` is set to `token`, permissions are obtained from the "
"server on behalf of the subject represented by the bearer token that was "
"sent to your application. In this case, a new access token is issued by "
"Keycloak with the permissions granted by the server. If the server did not "
"respond with a token with the expected permissions, the request is denied. "
"When using this mode, you should be able to obtain the token from the "
"request as follows:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'token'}), function (req, res) {\n"
"        var token = req.kauth.grant.access_token.content;\n"
"        var permissions = token.authorization ? token.authorization.permissions : undefined;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"        // show user profile\n"
"    });\n"
msgstr ""

#. type: Plain text
msgid ""
"Prefer this mode when your application is using sessions and you want to "
"cache previous decisions from the server, as well automatically handle "
"refresh tokens. This mode is especially useful for applications acting as a "
"client and resource server."
msgstr ""

#. type: Plain text
msgid ""
"If `response_mode` is set to `permissions` (default mode), the server only "
"returns the list of granted permissions, without issuing a new access token. "
"In addition to not issuing a new token, this method exposes the permissions "
"granted by the server through the `request` as follows:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    app.get('/apis/me', keycloak.enforcer('user:profile', {response_mode: 'permissions'}), function (req, res) {\n"
"        var permissions = req.permissions;\n"
msgstr ""

#. type: Plain text
msgid ""
"Regardless of the `response_mode` in use, the `keycloak.enforcer` method "
"will first try to check the permissions within the bearer token that was "
"sent to your application. If the bearer token already carries the expected "
"permissions, there is no need to interact with the server to obtain a "
"decision. This is specially useful when your clients are capable of "
"obtaining access tokens from the server with the expected permissions before "
"accessing a protected resource, so they can use some capabilities provided "
"by Keycloak Authorization Services such as incremental authorization and "
"avoid additional requests to the server when `keycloak.enforcer` is "
"enforcing access to the resource."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"By default, the policy enforcer will use the `client_id` defined to the application (for instance, via `keycloak.json`) to\n"
" reference a client in Keycloak that supports Keycloak Authorization Services. In this case, the client can not be public given\n"
" that it is actually a resource server.\n"
msgstr ""

#. type: Plain text
msgid ""
"If your application is acting as both a public client(frontend) and resource "
"server(backend), you can use the following configuration to reference a "
"different client in Keycloak with the policies that you want to enforce:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "      keycloak.enforcer('user:profile', {resource_server_id: 'my-apiserver'})\n"
msgstr ""

#. type: Plain text
msgid ""
"It is recommended to use distinct clients in Keycloak to represent your "
"frontend and backend."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"If the application you are protecting is enabled with Keycloak authorization services and you have defined client credentials\n"
" in `keycloak.json`, you can push additional claims to the server and make them available to your policies in order to make decisions.\n"
"For that, you can define a `claims` configuration option which expects a `function` that returns a JSON with the claims you want to push:\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"      app.get('/protected/resource', keycloak.enforcer(['resource:view', 'resource:write'], {\n"
"          claims: function(request) {\n"
"            return {\n"
"              \"http.uri\": [\"/protected/resource\"],\n"
"              \"user.agent\": // get user agent  from request\n"
"            }\n"
"          }\n"
"        }), function (req, res) {\n"
"          // access granted\n"
msgstr ""

#. type: Plain text
msgid ""
"For more details about how to configure Keycloak to protected your "
"application resources, please take a look at the link:"
"{authorizationguide_link}[{authorizationguide_name}]."
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Advanced authorization"
msgstr ""

#. type: Plain text
msgid ""
"To secure resources based on parts of the URL itself, assuming a role exists "
"for each section:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    function protectBySection(token, request) {\n"
"      return token.hasRole( request.params.section );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.get( '/:section/:page', keycloak.protect( protectBySection ), sectionHandler );\n"
msgstr ""

#. type: Plain text
msgid "Advanced Login Configuration:"
msgstr ""

#. type: Plain text
msgid ""
"By default, all unauthorized requests will be redirected to the "
"{project_name} login page unless your client is bearer-only.  However, a "
"confidential or public client may host both browsable and API endpoints. To "
"prevent redirects on unauthenticated API requests and instead return an HTTP "
"401, you can override the redirectToLogin function."
msgstr ""

#. type: Plain text
msgid ""
"For example, this override checks if the URL contains /api/ and disables "
"login redirects:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    Keycloak.prototype.redirectToLogin = function(req) {\n"
"    var apiReqMatcher = /\\/api\\//i;\n"
"    return !apiReqMatcher.test(req.originalUrl || req.url);\n"
"    };\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Additional URLs"
msgstr ""

#. type: Labeled list
#, no-wrap
msgid "Explicit user-triggered logout"
msgstr ""

#. type: Plain text
msgid ""
"By default, the middleware catches calls to `/logout` to send the user "
"through a {project_name}-centric logout workflow. This can be changed by "
"specifying a `logout` configuration parameter to the `middleware()` call:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    app.use( keycloak.middleware( { logout: '/logoff' } ));\n"
msgstr ""

#. type: Plain text
msgid ""
"When the user-triggered logout is invoked a query parameter `redirect_url` "
"can be passed:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "https://example.com/logoff?redirect_url=https%3A%2F%2Fexample.com%3A3000%2Flogged%2Fout\n"
msgstr ""

#. type: Plain text
msgid ""
"This parameter is then used as the redirect url of the OIDC logout endpoint "
"and the user will be redirected to `\\https://example.com/logged/out`."
msgstr ""

#. type: Plain text
msgid "{project_name} Admin Callbacks::"
msgstr ""

#. type: Plain text
msgid ""
"Also, the middleware supports callbacks from the {project_name} console to "
"log out a single session or all sessions.  By default, these type of admin "
"callbacks occur relative to the root URL of `/` but can be changed by "
"providing an `admin` parameter to the `middleware()` call:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "    app.use( keycloak.middleware( { admin: '/callbacks' } );\n"
msgstr ""
