# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: delimited block -
#, no-wrap
msgid ""
"<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"      xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n"
"      version=\"3.0\">\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Java Servlet Filter Adapter"
msgstr ""

#. type: Plain text
msgid ""
"If you are deploying your Java Servlet application on a platform where there "
"is no {project_name} adapter you opt to use the servlet filter adapter.  "
"This adapter works a bit differently than the other adapters. You do not "
"define security constraints in web.xml.  Instead you define a filter mapping "
"using the {project_name} servlet filter adapter to secure the url patterns "
"you want to secure."
msgstr ""

#. type: Plain text
msgid ""
"Backchannel logout works a bit differently than the standard adapters.  "
"Instead of invalidating the HTTP session it marks the session id as logged "
"out.  There's no standard way to invalidate an HTTP session based on a "
"session id."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "\t<module-name>application</module-name>\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    <filter>\n"
"        <filter-name>Keycloak Filter</filter-name>\n"
"        <filter-class>org.keycloak.adapters.servlet.KeycloakOIDCFilter</filter-class>\n"
"    </filter>\n"
"    <filter-mapping>\n"
"        <filter-name>Keycloak Filter</filter-name>\n"
"        <url-pattern>/keycloak/*</url-pattern>\n"
"        <url-pattern>/protected/*</url-pattern>\n"
"    </filter-mapping>\n"
"</web-app>\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"In the snippet above there are two url-patterns.\n"
" _/protected/*_ are the files we want protected, while the _/keycloak/*_ url-pattern handles callbacks from the {project_name} server.\n"
msgstr ""

#. type: Plain text
msgid ""
"If you need to exclude some paths beneath the configured `url-patterns` you "
"can use the Filter init-param `keycloak.config.skipPattern` to configure a "
"regular expression that describes a path-pattern for which the keycloak "
"filter should immediately delegate to the filter-chain.  By default no "
"skipPattern is configured."
msgstr ""

#. type: Plain text
msgid ""
"Patterns are matched against the `requestURI` without the `context-path`. "
"Given the context-path `/myapp` a request for `/myapp/index.html` will be "
"matched with `/index.html` against the skip pattern."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<init-param>\n"
"    <param-name>keycloak.config.skipPattern</param-name>\n"
"    <param-value>^/(path1|path2|path3).*</param-value>\n"
"</init-param>\n"
msgstr ""

#. type: Plain text
msgid ""
"Note that you should configure your client in the {project_name} Admin "
"Console with an Admin URL that points to a secured section covered by the "
"filter's url-pattern."
msgstr ""

#. type: Plain text
msgid ""
"The Admin URL will make callbacks to the Admin URL to do things like "
"backchannel logout.  So, the Admin URL in this example should be `http[s]://"
"hostname/{context-root}/keycloak`."
msgstr ""

#. type: Plain text
msgid ""
"If you need to customize the session ID mapper, you can configure the fully "
"qualified name of the class in the Filter init-param keycloak.config."
"idMapper. Session ID mapper is a mapper that is used to map user IDs and "
"session IDs. By default org.keycloak.adapters.spi.InMemorySessionIdMapper is "
"configured."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<init-param>\n"
"    <param-name>keycloak.config.idMapper</param-name>\n"
"    <param-value>org.keycloak.adapters.spi.InMemorySessionIdMapper</param-value>\n"
"</init-param>\n"
msgstr ""

#. type: Plain text
msgid ""
"The {project_name} filter has the same configuration parameters as the other "
"adapters except you must define them as filter init params instead of "
"context params."
msgstr ""

#. type: Plain text
msgid "To use this filter, include this maven artifact in your WAR poms:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.keycloak</groupId>\n"
"    <artifactId>keycloak-servlet-filter-adapter</artifactId>\n"
"    <version>{project_versionMvn}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Title =====
#, no-wrap
msgid "Using on OSGi"
msgstr ""

#. type: Plain text
msgid ""
"The servlet filter adapter is packaged as an OSGi bundle, and thus is usable "
"in a generic OSGi environment (R6 and above) with HTTP Service and HTTP "
"Whiteboard."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
msgid ""
"The adapter and its dependencies are distributed as Maven artifacts, so "
"you'll need either working Internet connection to access Maven Central, or "
"have the artifacts cached in your local Maven repo."
msgstr ""

#. type: Plain text
msgid ""
"If you are using Apache Karaf, you can simply install a feature from the "
"Keycloak feature repo:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"karaf@root()> feature:repo-add mvn:org.keycloak/keycloak-osgi-features/{project_versionMvn}/xml/features\n"
"karaf@root()> feature:install keycloak-servlet-filter-adapter\n"
msgstr ""

#. type: Plain text
msgid ""
"For other OSGi runtimes, please refer to the runtime documentation on how to "
"install the adapter bundle and its dependencies."
msgstr ""

#. type: Plain text
msgid ""
"If your OSGi platform is Apache Karaf with Pax Web, you should consider "
"using <<_fuse_adapter,JBoss Fuse 6>> or <<_fuse7_adapter,JBoss Fuse 7>> "
"adapters instead."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
msgid ""
"First, the adapter needs to be registered as a servlet filter with the OSGi "
"HTTP Service. The most common ways to do this are programmatic (e.g. via "
"bundle activator) and declarative (using OSGi annotations).  We recommend "
"using the latter since it simplifies the process of dynamically registering "
"and un-registering the filter:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "package mypackage;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"import javax.servlet.Filter;\n"
"import org.keycloak.adapters.servlet.KeycloakOIDCFilter;\n"
"import org.osgi.service.component.annotations.Component;\n"
"import org.osgi.service.http.whiteboard.HttpWhiteboardConstants;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"@Component(\n"
"    immediate = true,\n"
"    service = Filter.class,\n"
"    property = {\n"
"        KeycloakOIDCFilter.CONFIG_FILE_PARAM + \"=\" + \"keycloak.json\",\n"
"        HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN + \"=\" +\"/*\",\n"
"        HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT + \"=\" + \"(osgi.http.whiteboard.context.name=mycontext)\"\n"
"    }\n"
")\n"
"public class KeycloakFilter extends KeycloakOIDCFilter {\n"
"  //\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"The above snippet uses OSGi declarative service specification to expose the "
"filter as an OSGI service under `javax.servlet.Filter` class.  Once the "
"class is published in the OSGi service registry, it is going to be picked up "
"by OSGi HTTP Service implementation and used for filtering requests for the "
"specified servlet context. This will trigger Keycloak adapter for every "
"request that matches servlet context path + filter path."
msgstr ""

#. type: Plain text
msgid ""
"Since the component is put under the control of OSGi Configuration Admin "
"Service, it's properties can be configured dynamically.  To do that, either "
"create a `mypackage.KeycloakFilter.cfg` file under the standard config "
"location for your OSGi runtime:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"keycloak.config.file = /path/to/keycloak.json\n"
"osgi.http.whiteboard.filter.pattern = /secure/*\n"
msgstr ""

#. type: Plain text
msgid "or use interactive console, if your runtime allows for that:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"karaf@root()> config:edit mypackage.KeycloakFilter\n"
"karaf@root()> config:property-set keycloak.config.file '${karaf.etc}/keycloak.json'\n"
"karaf@root()> config:update\n"
msgstr ""

#. type: Plain text
msgid ""
"If you need more control, like e.g. providing custom "
"`KeycloakConfigResolver` to implement <<_multi_tenancy,multi tenancy>>, you "
"can register the filter programmatically:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "public class Activator implements BundleActivator {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "  private ServiceRegistration registration;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"  public void start(BundleContext context) throws Exception {\n"
"    Hashtable props = new Hashtable();\n"
"    props.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN, \"/secure/*\");\n"
"    props.put(KeycloakOIDCFilter.CONFIG_RESOLVER_PARAM, new MyConfigResolver());\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    this.registration = context.registerService(Filter.class.getName(), new KeycloakOIDCFilter(), props);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"  public void stop(BundleContext context) throws Exception {\n"
"    this.registration.unregister();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"Please refer to https://github.com/apache/felix-dev/tree/master/http#using-"
"the-osgi-http-whiteboard[Apache Felix HTTP Service] for more info on "
"programmatic registration."
msgstr ""
