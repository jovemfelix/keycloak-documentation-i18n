# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ====
#, no-wrap
msgid "Multi Tenancy"
msgstr ""

#. type: Plain text
msgid ""
"Multi Tenancy, in our context, means that a single target application (WAR) "
"can be secured with multiple {project_name} realms. The realms can be "
"located on the same {project_name} instance or on different instances."
msgstr ""

#. type: Plain text
msgid ""
"In practice, this means that the application needs to have multiple "
"`keycloak.json` adapter configuration files."
msgstr ""

#. type: Plain text
msgid ""
"You could have multiple instances of your WAR with different adapter "
"configuration files deployed to different context-paths. However, this may "
"be inconvenient and you may also want to select the realm based on something "
"else than context-path."
msgstr ""

#. type: Plain text
msgid ""
"{project_name} makes it possible to have a custom config resolver so you can "
"choose what adapter config is used for each request."
msgstr ""

#. type: Plain text
msgid ""
"To achieve this first you need to create an implementation of `org.keycloak."
"adapters.KeycloakConfigResolver`. For example:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "package example;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"import org.keycloak.adapters.KeycloakConfigResolver;\n"
"import org.keycloak.adapters.KeycloakDeployment;\n"
"import org.keycloak.adapters.KeycloakDeploymentBuilder;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "public class PathBasedKeycloakConfigResolver implements KeycloakConfigResolver {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public KeycloakDeployment resolve(OIDCHttpFacade.Request request) {\n"
"        if (path.startsWith(\"alternative\")) {\n"
"            KeycloakDeployment deployment = cache.get(realm);\n"
"            if (null == deployment) {\n"
"                InputStream is = getClass().getResourceAsStream(\"/tenant1-keycloak.json\");\n"
"                return KeycloakDeploymentBuilder.build(is);\n"
"            }\n"
"        } else {\n"
"            InputStream is = getClass().getResourceAsStream(\"/default-keycloak.json\");\n"
"            return KeycloakDeploymentBuilder.build(is);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
msgid ""
"You also need to configure which `KeycloakConfigResolver` implementation to "
"use with the `keycloak.config.resolver` context-param in your `web.xml`:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<web-app>\n"
"    ...\n"
"    <context-param>\n"
"        <param-name>keycloak.config.resolver</param-name>\n"
"        <param-value>example.PathBasedKeycloakConfigResolver</param-value>\n"
"    </context-param>\n"
"</web-app>\n"
msgstr ""
