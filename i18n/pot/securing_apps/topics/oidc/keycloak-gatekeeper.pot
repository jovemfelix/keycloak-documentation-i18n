# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Block title
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Block title
#, no-wrap
msgid "Procedure"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Endpoints"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "{generic_adapter_name_full}"
msgstr ""

#. type: Plain text
msgid ""
"{project_name} provides a Go programming language adapter for use with "
"OpenID Connect (OIDC) that supports both access tokens in a browser cookie "
"or bearer tokens."
msgstr ""

#. type: Plain text
msgid ""
"This documentation details how to build and configure {generic_adapter_name} "
"followed by details of how to use each of its features."
msgstr ""

#. type: Plain text
msgid ""
"For further information, see the included help file which includes a full "
"list of commands and switches. View the file by entering the following at "
"the command line (modify the location to match where you install "
"{generic_adapter_name}):"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    $ bin/keycloak-gatekeeper help\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Building"
msgstr ""

#. type: Plain text
msgid "Golang must be installed."
msgstr ""

#. type: Plain text
msgid "Make must be installed."
msgstr ""

#. type: Plain text
msgid "Run `make dep-install` to install all needed dependencies."
msgstr ""

#. type: Plain text
msgid "Run `make test` to run the included tests."
msgstr ""

#. type: Plain text
msgid ""
"Run `make` to build the project. You can instead use `make static` if you "
"prefer to build a binary that includes within it all of the required "
"dependencies."
msgstr ""

#. type: Plain text
msgid ""
"You can also build via docker container: `make docker-build`. A Docker image "
"is available at link:https://hub.docker.com/r/keycloak/keycloak-gatekeeper/"
"[https://hub.docker.com/r/keycloak/keycloak-gatekeeper/]."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Configuration options"
msgstr ""

#. type: Plain text
msgid ""
"Configuration can come from a yaml/json file or by using command line "
"options. Here is a list of options."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"# is the url for retrieve the OpenID configuration - normally the <server>/auth/realm/<realm_name>\n"
"discovery-url: https://keycloak.example.com/auth/realms/<REALM_NAME>\n"
"# the client id for the 'client' application\n"
"client-id: <CLIENT_ID>\n"
"# the secret associated to the 'client' application\n"
"client-secret: <CLIENT_SECRET>\n"
"# the interface definition you wish the proxy to listen, all interfaces is specified as ':<port>', unix sockets as unix://<REL_PATH>|</ABS PATH>\n"
"listen: :3000\n"
"# whether to enable refresh tokens\n"
"enable-refresh-tokens: true\n"
"# the location of a certificate you wish the proxy to use for TLS support\n"
"tls-cert:\n"
"# the location of a private key for TLS\n"
"tls-private-key:\n"
"# the redirection url, essentially the site url, note: /oauth/callback is added at the end\n"
"redirection-url: http://127.0.0.1:3000\n"
"# the encryption key used to encode the session state\n"
"encryption-key: <ENCRYPTION_KEY>\n"
"# the upstream endpoint which we should proxy request\n"
"upstream-url: http://127.0.0.1:80\n"
"# additional scopes to add to the default (openid+email+profile)\n"
"scopes:\n"
"- vpn-user\n"
"# a collection of resource i.e. urls that you wish to protect\n"
"resources:\n"
"- uri: /admin/test\n"
"  # the methods on this url that should be protected, if missing, we assuming all\n"
"  methods:\n"
"  - GET\n"
"  # a list of roles the user must have in order to access urls under the above\n"
"  # If all you want is authentication ONLY, simply remove the roles array - the user must be authenticated but\n"
"  # no roles are required\n"
"  roles:\n"
"  - openvpn:vpn-user\n"
"  - openvpn:prod-vpn\n"
"  - test\n"
"- uri: /admin/*\n"
"  methods:\n"
"  - GET\n"
"  roles:\n"
"  - openvpn:vpn-user\n"
"  - openvpn:commons-prod-vpn\n"
msgstr ""

#. type: Plain text
msgid ""
"Options issued at the command line have a higher priority and will override "
"or merge with options referenced in a config file. Examples of each style "
"are shown here."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Example usage and configuration"
msgstr ""

#. type: Plain text
msgid ""
"Assuming you have some web service you wish protected by {project_name}:"
msgstr ""

#. type: Plain text
msgid ""
"Create the *client* using the {project_name} GUI or CLI; the client protocol "
"is *'openid-connect'*, access-type: *confidential*."
msgstr ""

#. type: Plain text
msgid "Add a Valid Redirect URI of *http://127.0.0.1:3000/oauth/callback*."
msgstr ""

#. type: Plain text
msgid "Grab the client id and client secret."
msgstr ""

#. type: Plain text
msgid ""
"Create the various roles under the client or existing clients for "
"authorization purposes."
msgstr ""

#. type: Plain text
msgid "Here is an example configuration file."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"client-id: <CLIENT_ID>\n"
"client-secret: <CLIENT_SECRET> # require for access_type: confidential\n"
"# Note the redirection-url is optional, it will default to the X-Forwarded-Proto / X-Forwarded-Host r the URL scheme and host not found\n"
"discovery-url: https://keycloak.example.com/auth/realms/<REALM_NAME>\n"
"enable-default-deny: true\n"
"encryption_key: AgXa7xRcoClDEU0ZDSH4X0XhL5Qy2Z2j\n"
"listen: :3000\n"
"redirection-url: http://127.0.0.1:3000\n"
"upstream-url: http://127.0.0.1:80\n"
"resources:\n"
"- uri: /admin*\n"
"  methods:\n"
"  - GET\n"
"  roles:\n"
"  - client:test1\n"
"  - client:test2\n"
"  require-any-role: true\n"
"  groups:\n"
"  - admins\n"
"  - users\n"
"- uri: /backend*\n"
"  roles:\n"
"  - client:test1\n"
"- uri: /public/*\n"
"  white-listed: true\n"
"- uri: /favicon\n"
"  white-listed: true\n"
"- uri: /css/*\n"
"  white-listed: true\n"
"- uri: /img/*\n"
"  white-listed: true\n"
"headers:\n"
"  myheader1: value_1\n"
"  myheader2: value_2\n"
msgstr ""

#. type: Plain text
msgid ""
"Anything defined in a configuration file can also be configured using "
"command line options, such as in this example."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"bin/{generic_adapter_name} \\\n"
"    --discovery-url=https://keycloak.example.com/auth/realms/<REALM_NAME> \\\n"
"    --client-id=<CLIENT_ID> \\\n"
"    --client-secret=<SECRET> \\\n"
"    --listen=127.0.0.1:3000 \\ # unix sockets format unix://path\n"
"    --redirection-url=http://127.0.0.1:3000 \\\n"
"    --enable-refresh-tokens=true \\\n"
"    --encryption-key=AgXa7xRcoClDEU0ZDSH4X0XhL5Qy2Z2j \\\n"
"    --upstream-url=http://127.0.0.1:80 \\\n"
"    --enable-default-deny=true \\\n"
"    --resources=\"uri=/admin*|roles=test1,test2\" \\\n"
"    --resources=\"uri=/backend*|roles=test1\" \\\n"
"    --resources=\"uri=/css/*|white-listed=true\" \\\n"
"    --resources=\"uri=/img/*|white-listed=true\" \\\n"
"    --resources=\"uri=/public/*|white-listed=true\" \\\n"
"    --headers=\"myheader1=value1\" \\\n"
"    --headers=\"myheader2=value2\"\n"
msgstr ""

#. type: Plain text
msgid ""
"By default the roles defined on a resource perform a logical `AND` so all "
"roles specified must be present in the claims, this behavior can be altered "
"by the `require-any-role` option, however, so as long as one role is present "
"the permission is granted."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "OpenID Provider Communication"
msgstr ""

#. type: Plain text
msgid ""
"By default the communication with the OpenID provider is direct. If you "
"wish, you can specify a forwarding proxy server in your configuration file:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "openid-provider-proxy: http://proxy.example.com:8080\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "HTTP routing"
msgstr ""

#. type: Plain text
msgid ""
"By default all requests will be proxyed on to the upstream, if you wish to "
"ensure all requests are authenticated you can use this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "--resource=uri=/* # note, unless specified the method is assumed to be 'any|ANY'\n"
msgstr ""

#. type: Plain text
msgid ""
"The HTTP routing rules follow the guidelines from link:https://github.com/go-"
"chi/chi#router-design[chi]. The ordering of the resources do not matter, the "
"router will handle that for you."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Session-only cookies"
msgstr ""

#. type: Plain text
msgid ""
"By default the access and refresh cookies are session-only and disposed of "
"on browser close; you can disable this feature using the `--enable-session-"
"cookies` option."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Forward-signing proxy"
msgstr ""

#. type: Plain text
msgid ""
"Forward-signing provides a mechanism for authentication and authorization "
"between services using tokens issued from the IdP. When operating in this "
"mode the proxy will automatically acquire an access token (handling the "
"refreshing or logins on your behalf) and tag outbound requests with a "
"Authorization header. You can control which domains are tagged with the --"
"forwarding-domains option. Note, this option use a **contains** comparison "
"on domains. So, if you wanted to match all domains under *.svc.cluster.local "
"you can use: --forwarding-domain=svc.cluster.local."
msgstr ""

#. type: Plain text
msgid ""
"At present the service performs a login using oauth client_credentials grant "
"type, so your IdP service must support direct (username/password) logins."
msgstr ""

#. type: Plain text
msgid "Example setup:"
msgstr ""

#. type: Plain text
msgid ""
"You have collection of micro-services which are permitted to speak to one "
"another; you have already set up the credentials, roles, and clients in "
"Keycloak, providing granular role controls over issue tokens."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"- name: {generic_adapter_name}\n"
"  image: quay.io/gambol99/keycloak-generic-adapter:latest\n"
"  args:\n"
"  - --enable-forwarding=true\n"
"  - --forwarding-username=projecta\n"
"  - --forwarding-password=some_password\n"
"  - --forwarding-domains=projecta.svc.cluster.local\n"
"  - --forwarding-domains=projectb.svc.cluster.local\n"
"  - --tls-ca-certificate=/etc/secrets/ca.pem\n"
"  - --tls-ca-key=/etc/secrets/ca-key.pem\n"
"  # Note: if you don't specify any forwarding domains, all domains will be signed; Also the code checks is the\n"
"  # domain 'contains' the value (it's not a regex) so if you wanted to sign all requests to svc.cluster.local, just use\n"
"  # svc.cluster.local\n"
"  volumeMounts:\n"
"  - name: keycloak-socket\n"
"    mountPoint: /var/run/keycloak\n"
"- name: projecta\n"
"  image: some_images\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"# test the forward proxy\n"
"$ curl -k --proxy http://127.0.0.1:3000 https://test.projesta.svc.cluster.local\n"
msgstr ""

#. type: Plain text
msgid ""
"On the receiver side you could set up the {generic_adapter_name_full} (--"
"no=redirects=true) and permit this to verify and handle admission for you. "
"Alternatively, the access token can found as a bearer token in the request."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Forwarding signed HTTPS connections"
msgstr ""

#. type: Plain text
msgid ""
"Handling HTTPS requires a man-in-the-middle sort of TLS connection. By "
"default, if no `--tls-ca-certificate` and `--tls-ca-key` are provided the "
"proxy will use the default certificate. If you wish to verify the trust, "
"you'll need to generate a CA, for example."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ca.key -out ca.pem\n"
"$ bin/{generic_adapter_name} \\\n"
"  --enable-forwarding \\\n"
"  --forwarding-username=USERNAME \\\n"
"  --forwarding-password=PASSWORD \\\n"
"  --client-id=CLIENT_ID \\\n"
"  --client-secret=SECRET \\\n"
"  --discovery-url=https://keycloak.example.com/auth/realms/test \\\n"
"  --tls-ca-certificate=ca.pem \\\n"
"  --tls-ca-key=ca-key.pem\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "HTTPS redirect"
msgstr ""

#. type: Plain text
msgid ""
"The proxy supports an HTTP listener, so the only real requirement here is to "
"perform an HTTP -> HTTPS redirect. You can enable the option like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"--listen-http=127.0.0.1:80\n"
"--enable-security-filter=true  # is required for the https redirect\n"
"--enable-https-redirection\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Let's Encrypt configuration"
msgstr ""

#. type: Plain text
msgid ""
"Here is an example of the required configuration for Let's Encrypt support:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"listen: 0.0.0.0:443\n"
"enable-https-redirection: true\n"
"enable-security-filter: true\n"
"use-letsencrypt: true\n"
"letsencrypt-cache-dir: ./cache/\n"
"redirection-url: https://domain.tld:443/\n"
"hostnames:\n"
"  - domain.tld\n"
msgstr ""

#. type: Plain text
msgid "Listening on port 443 is mandatory."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Access token encryption"
msgstr ""

#. type: Plain text
msgid ""
"By default, the session token is placed into a cookie in plaintext. If you "
"prefer to encrypt the session cookie, use the `--enable-encrypted-token` and "
"`--encryption-key` options. Note that the access token forwarded in the X-"
"Auth-Token header to upstream is unaffected."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Upstream headers"
msgstr ""

#. type: Plain text
msgid ""
"On protected resources, the upstream endpoint will receive a number of "
"headers added by the proxy, along with custom claims, like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"# add the header to the upstream endpoint\n"
"id := user.(*userContext)\n"
"cx.Request().Header.Set(\"X-Auth-Email\", id.email)\n"
"cx.Request().Header.Set(\"X-Auth-ExpiresIn\", id.expiresAt.String())\n"
"cx.Request().Header.Set(\"X-Auth-Groups\", strings.Join(id.groups, \",\"))\n"
"cx.Request().Header.Set(\"X-Auth-Roles\", strings.Join(id.roles, \",\"))\n"
"cx.Request().Header.Set(\"X-Auth-Subject\", id.id)\n"
"cx.Request().Header.Set(\"X-Auth-Token\", id.token.Encode())\n"
"cx.Request().Header.Set(\"X-Auth-Userid\", id.name)\n"
"cx.Request().Header.Set(\"X-Auth-Username\", id.name)\n"
"// step: add the authorization header if requested\n"
"if r.config.EnableAuthorizationHeader {\n"
"\tcx.Request().Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", id.token.Encode()))\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"To control the `Authorization` header use the `enable-authorization-header` "
"yaml configuration or the `--enable-authorization-header` command line "
"option. By default this option is set to `true`."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Custom claim headers"
msgstr ""

#. type: Plain text
msgid ""
"You can inject additional claims from the access token into the "
"authorization headers with the `--add-claims` option. For example, a token "
"from a {project_name} provider might include the following claims:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"\"resource_access\": {},\n"
"\"name\": \"Beloved User\",\n"
"\"preferred_username\": \"beloved.user\",\n"
"\"given_name\": \"Beloved\",\n"
"\"family_name\": \"User\",\n"
"\"email\": \"beloved@example.com\"\n"
msgstr ""

#. type: Plain text
msgid ""
"In order to request you receive the given_name, family_name and name in the "
"authentication header we would add `--add-claims=given_name` and `--add-"
"claims=family_name` and so on, or we can do it in the configuration file, "
"like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"add-claims:\n"
"- given_name\n"
"- family_name\n"
"- name\n"
msgstr ""

#. type: Plain text
msgid ""
"This would add the additional headers to the authenticated request along "
"with standard ones."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"X-Auth-Family-Name: User\n"
"X-Auth-Given-Name: Beloved\n"
"X-Auth-Name: Beloved User\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Custom headers"
msgstr ""

#. type: Plain text
msgid ""
"You can inject custom headers using the `--headers=\"name=value\"` option or "
"the configuration file:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"headers:\n"
"  name: value\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Encryption key"
msgstr ""

#. type: Plain text
msgid ""
"In order to remain stateless and not have to rely on a central cache to "
"persist the refresh_tokens, the refresh token is encrypted and added as a "
"cookie using *crypto/aes*. The key must be the same if you are running "
"behind a load balancer. The key length should be either 16 or 32 bytes, "
"depending or whether you want AES-128 or AES-256."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Claim matching"
msgstr ""

#. type: Plain text
msgid ""
"The proxy supports adding a variable list of claim matches against the "
"presented tokens for additional access control. You can match the 'iss' or "
"'aud' to the token or custom attributes; each of the matches are regex's. "
"For example, `--match-claims 'aud=sso.\\*'` or `--claim iss=https://.*'` or "
"via the configuration file, like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"match-claims:\n"
"  aud: openvpn\n"
"  iss: https://keycloak.example.com/auth/realms/commons\n"
msgstr ""

#. type: Plain text
msgid "or via the CLI, like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"--match-claims=auth=openvpn\n"
"--match-claims=iss=http://keycloak.example.com/realms/commons\n"
msgstr ""

#. type: Plain text
msgid ""
"You can limit the email domain permitted; for example if you want to limit "
"to only users on the example.com domain:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"match-claims:\n"
"  email: ^.*@example.com$\n"
msgstr ""

#. type: Plain text
msgid ""
"The adapter supports matching on multi-value strings claims. The match will "
"succeed if one of the values matches, for example:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"match-claims:\n"
"  perms: perm1\n"
msgstr ""

#. type: Plain text
msgid "will successfully match"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"{\n"
"  \"iss\": \"https://sso.example.com\",\n"
"  \"sub\": \"\",\n"
"  \"perms\": [\"perm1\", \"perm2\"]\n"
"}\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Group claims"
msgstr ""

#. type: Plain text
msgid ""
"You can match on the group claims within a token via the `groups` parameter "
"available within the resource. While roles are implicitly required, such as "
"`roles=admin,user` where the user MUST have roles 'admin' AND 'user', groups "
"are applied with an OR operation, so `groups=users,testers` requires that "
"the user MUST be within either 'users' OR 'testers'. The claim name is hard-"
"coded to `groups`, so a JWT token would look like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"{\n"
"  \"iss\": \"https://sso.example.com\",\n"
"  \"sub\": \"\",\n"
"  \"aud\": \"test\",\n"
"  \"exp\": 1515269245,\n"
"  \"iat\": 1515182845,\n"
"  \"email\": \"beloved@example.com\",\n"
"  \"groups\": [\n"
"    \"group_one\",\n"
"    \"group_two\"\n"
"  ],\n"
"  \"name\": \"Beloved\"\n"
"}\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Custom pages"
msgstr ""

#. type: Plain text
msgid ""
"By default, {generic_adapter_name_full} will immediately redirect you for "
"authentication and hand back a 403 for access denied. Most users will "
"probably want to present the user with a more friendly sign-in and access "
"denied page. You can pass the command line options (or via config file) "
"paths to the files with `--signin-page=PATH`. The sign-in page will have a "
"'redirect' variable passed into the scope and holding the oauth redirection "
"url. If you wish to pass additional variables into the templates, such as "
"title, sitename and so on, you can use the -`-tags key=pair` option, like "
"this: `--tags title=\"This is my site\"` and the variable would be "
"accessible from `{{ .title }}`."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<html>\n"
"<body>\n"
"<a href=\"{{ .redirect }}\">Sign-in</a>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "White-listed URL's"
msgstr ""

#. type: Plain text
msgid ""
"Depending on how the application URL's are laid out, you might want protect "
"the root / url but have exceptions on a list of paths, for example `/"
"health`. While this is best solved by adjusting the paths, you can add "
"exceptions to the protected resources, like this:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"  resources:\n"
"  - uri: /some_white_listed_url\n"
"    white-listed: true\n"
"  - uri: /*\n"
"    methods:\n"
"      - GET\n"
"    roles:\n"
"      - <CLIENT_APP_NAME>:<ROLE_NAME>\n"
"      - <CLIENT_APP_NAME>:<ROLE_NAME>\n"
msgstr ""

#. type: Plain text
msgid "Or on the command line"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"  --resources \"uri=/some_white_listed_url|white-listed=true\"\n"
"  --resources \"uri=/*\"  # requires authentication on the rest\n"
"  --resources \"uri=/admin*|roles=admin,superuser|methods=POST,DELETE\"\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Mutual TLS"
msgstr ""

#. type: Plain text
msgid ""
"The proxy support enforcing mutual TLS for the clients by adding the `--tls-"
"ca-certificate` command line option or configuration file option. All "
"clients connecting must present a certificate which was signed by the CA "
"being used."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Certificate rotation"
msgstr ""

#. type: Plain text
msgid ""
"The proxy will automatically rotate the server certificates if the files "
"change on disk. Note, no down time will occur as the change is made inline. "
"Clients who connected prior to the certificate rotation will be unaffected "
"and will continue as normal with all new connections presented with the new "
"certificate."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Refresh tokens"
msgstr ""

#. type: Plain text
msgid ""
"If a request for an access token contains a refresh token and `--enable-"
"refresh-tokens` is set to `true`, the proxy will automatically refresh the "
"access token for you. The tokens themselves are kept either as an encrypted "
"*(--encryption-key=KEY)* cookie *(cookie name: kc-state).* or a store "
"*(still requires encryption key)*."
msgstr ""

#. type: Plain text
msgid ""
"At present the only store options supported are link:https://github.com/"
"antirez/redis[Redis] and link:https://github.com/boltdb/bolt[Boltdb]."
msgstr ""

#. type: Plain text
msgid ""
"To enable a local boltdb store use `--store-url boltdb:///PATH` or using a "
"relative path `boltdb://PATH`."
msgstr ""

#. type: Plain text
msgid ""
"To enable a local redis store use `redis://[USER:PASSWORD@]HOST:PORT`. In "
"both cases the refresh token is encrypted before being placed into the store."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Logout endpoint"
msgstr ""

#. type: Plain text
msgid ""
"A */oauth/logout?redirect=url* is provided as a helper to log users out. In "
"addition to dropping any session cookies, we also attempt to revoke access "
"via revocation url (config *revocation-url* or *--revocation-url*) with the "
"provider. For Keycloak, the url for this would be https://keycloak.example."
"com/auth/realms/REALM_NAME/protocol/openid-connect/logout. If the url is not "
"specified we will attempt to grab the url from the OpenID discovery response."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Cross-origin resource sharing (CORS)"
msgstr ""

#. type: Plain text
msgid ""
"You can add a CORS header via the `--cors-[method]` with these configuration "
"options."
msgstr ""

#. type: Plain text
msgid "Access-Control-Allow-Origin"
msgstr ""

#. type: Plain text
msgid "Access-Control-Allow-Methods"
msgstr ""

#. type: Plain text
msgid "Access-Control-Allow-Headers"
msgstr ""

#. type: Plain text
msgid "Access-Control-Expose-Headers"
msgstr ""

#. type: Plain text
msgid "Access-Control-Allow-Credentials"
msgstr ""

#. type: Plain text
msgid "Access-Control-Max-Age"
msgstr ""

#. type: Plain text
msgid "You can add using the config file:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"cors-origins:\n"
"- '*'\n"
"cors-methods:\n"
"- GET\n"
"- POST\n"
msgstr ""

#. type: Plain text
msgid "or via the command line:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"--cors-origins [--cors-origins option]                  a set of origins to add to the CORS access control (Access-Control-Allow-Origin)\n"
"--cors-methods [--cors-methods option]                  the method permitted in the access control (Access-Control-Allow-Methods)\n"
"--cors-headers [--cors-headers option]                  a set of headers to add to the CORS access control (Access-Control-Allow-Headers)\n"
"--cors-exposes-headers [--cors-exposes-headers option]  set the expose cors headers access control (Access-Control-Expose-Headers)\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Upstream URL"
msgstr ""

#. type: Plain text
msgid ""
"You can control the upstream endpoint via the `--upstream-url` option. Both "
"HTTP and HTTPS are supported with TLS verification and keep-alive support "
"configured via the `--skip-upstream-tls-verify` / `--upstream-keepalives` "
"option. Note, the proxy can also upstream via a UNIX socket, `--upstream-url "
"unix://path/to/the/file.sock`."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/authorize** is authentication endpoint which will generate the OpenID redirect to the provider\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/callback** is provider OpenID callback endpoint\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/expired** is a helper endpoint to check if a access token has expired, 200 for ok and, 401 for no token and 401 for expired\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/health** is the health checking endpoint for the proxy, you can also grab version from headers\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/login** provides a relay endpoint to login via `grant_type=password`, for example, `POST /oauth/login` form values are `username=USERNAME&password=PASSWORD` (must be enabled)\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/logout** provides a convenient endpoint to log the user out, it will always attempt to perform a back channel log out of offline tokens\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/token** is a helper endpoint which will display the current access token for you\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "**/oauth/metrics** is a Prometheus metrics handler\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Metrics"
msgstr ""

#. type: Plain text
msgid ""
"Assuming `--enable-metrics` has been set, a Prometheus endpoint can be found "
"on */oauth/metrics*; at present the only metric being exposed is a counter "
"per HTTP code."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Plain text
msgid ""
"Keep in mind link:http://browsercookielimits.squawky.net/[browser cookie "
"limits] if you use access or refresh tokens in the browser cookie. Keycloak-"
"generic-adapter divides the cookie automatically if your cookie is longer "
"than 4093 bytes. Real size of the cookie depends on the content of the "
"issued access token. Also, encryption might add additional bytes to the "
"cookie size. If you have large cookies (>200 KB), you might reach browser "
"cookie limits."
msgstr ""

#. type: Plain text
msgid ""
"All cookies are part of the header request, so you might find a problem with "
"the max headers size limits in your infrastructure (some load balancers have "
"very low this value, such as 8 KB). Be sure that all network devices have "
"sufficient header size limits. Otherwise, your users won't be able to obtain "
"an access token."
msgstr ""

#. type: Title =
#, no-wrap
msgid "Known Issues"
msgstr ""

#. type: Plain text
msgid ""
"There is a known issue with the Keycloak server 4.6.0.Final in which "
"Gatekeeper is unable to find the _client_id_ in the _aud_ claim. This is due "
"to the fact the _client_id_ is not in the audience anymore. The workaround "
"is to add the \"Audience\" protocol mapper to the client with the audience "
"pointed to the _client_id_. For more information, see link:https://issues."
"redhat.com/browse/KEYCLOAK-8954[KEYCLOAK-8954]."
msgstr ""
