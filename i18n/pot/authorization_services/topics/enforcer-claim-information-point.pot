# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#, no-wrap
msgid "Claim Information Point"
msgstr ""

#. type: Plain text
msgid ""
"A Claim Information Point (CIP) is responsible for resolving claims and "
"pushing these claims to the {project_name} server in order to provide more "
"information about the access context to policies. They can be defined as a "
"configuration option to the policy-enforcer in order to resolve claims from "
"different sources, such as:"
msgstr ""

#. type: Plain text
msgid "HTTP Request (parameters, headers, body, etc)"
msgstr ""

#. type: Plain text
msgid "External HTTP Service"
msgstr ""

#. type: Plain text
msgid "Static values defined in configuration"
msgstr ""

#. type: Plain text
msgid "Any other source by implementing the Claim Information Provider SPI"
msgstr ""

#. type: Plain text
msgid ""
"When pushing claims to the {project_name} server, policies can base "
"decisions not only on who a user is but also by taking context and contents "
"into account, based on who, what, why, when, where, and which for a given "
"transaction. It is all about Contextual-based Authorization and how to use "
"runtime information in order to support fine-grained authorization decisions."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Obtaining information from the HTTP Request"
msgstr ""

#. type: Plain text
msgid ""
"Here are several examples showing how you can extract claims from an HTTP "
"request:"
msgstr ""

#. type: Block title
#, no-wrap
msgid "keycloak.json"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"\"policy-enforcer\": {\n"
"    \"paths\": [\n"
"      {\n"
"        \"path\": \"/protected/resource\",\n"
"        \"claim-information-point\": {\n"
"          \"claims\": {\n"
"            \"claim-from-request-parameter\": \"{request.parameter['a']}\",\n"
"            \"claim-from-header\": \"{request.header['b']}\",\n"
"            \"claim-from-cookie\": \"{request.cookie['c']}\",\n"
"            \"claim-from-remoteAddr\": \"{request.remoteAddr}\",\n"
"            \"claim-from-method\": \"{request.method}\",\n"
"            \"claim-from-uri\": \"{request.uri}\",\n"
"            \"claim-from-relativePath\": \"{request.relativePath}\",\n"
"            \"claim-from-secure\": \"{request.secure}\",\n"
"            \"claim-from-json-body-object\": \"{request.body['/a/b/c']}\",\n"
"            \"claim-from-json-body-array\": \"{request.body['/d/1']}\",\n"
"            \"claim-from-body\": \"{request.body}\",\n"
"            \"claim-from-static-value\": \"static value\",\n"
"            \"claim-from-multiple-static-value\": [\"static\", \"value\"],\n"
"            \"param-replace-multiple-placeholder\": \"Test {keycloak.access_token['/custom_claim/0']} and {request.parameter['a']} \"\n"
"          }\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Obtaining information from an External HTTP Service"
msgstr ""

#. type: Plain text
msgid ""
"Here are several examples showing how you can extract claims from an "
"external HTTP Service:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"\"policy-enforcer\": {\n"
"    \"paths\": [\n"
"      {\n"
"        \"path\": \"/protected/resource\",\n"
"        \"claim-information-point\": {\n"
"          \"http\": {\n"
"            \"claims\": {\n"
"              \"claim-a\": \"/a\",\n"
"              \"claim-d\": \"/d\",\n"
"              \"claim-d0\": \"/d/0\",\n"
"              \"claim-d-all\": [\"/d/0\", \"/d/1\"]\n"
"            },\n"
"            \"url\": \"http://mycompany/claim-provider\",\n"
"            \"method\": \"POST\",\n"
"            \"headers\": {\n"
"              \"Content-Type\": \"application/x-www-form-urlencoded\",\n"
"              \"header-b\": [\"header-b-value1\", \"header-b-value2\"],\n"
"              \"Authorization\": \"Bearer {keycloak.access_token}\"\n"
"            },\n"
"            \"parameters\": {\n"
"              \"param-a\": [\"param-a-value1\", \"param-a-value2\"],\n"
"              \"param-subject\": \"{keycloak.access_token['/sub']}\",\n"
"              \"param-user-name\": \"{keycloak.access_token['/preferred_username']}\",\n"
"              \"param-other-claims\": \"{keycloak.access_token['/custom_claim']}\"\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Static Claims"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"\"policy-enforcer\": {\n"
"    \"paths\": [\n"
"      {\n"
"        \"path\": \"/protected/resource\",\n"
"        \"claim-information-point\": {\n"
"          \"claims\": {\n"
"            \"claim-from-static-value\": \"static value\",\n"
"            \"claim-from-multiple-static-value\": [\"static\", \"value\"],\n"
"          }\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Claim Information Provider SPI"
msgstr ""

#. type: Plain text
msgid ""
"The Claim Information Provider SPI can be used by developers to support "
"different claim information points in case none of the built-ins providers "
"are enough to address their requirements."
msgstr ""

#. type: Plain text
msgid ""
"For example, to implement a new CIP provider you need to implement `org."
"keycloak.adapters.authorization.ClaimInformationPointProviderFactory` and "
"`ClaimInformationPointProvider` and also provide the file `META-INF/services/"
"org.keycloak.adapters.authorization.ClaimInformationPointProviderFactory` in "
"your application`s classpath."
msgstr ""

#. type: Plain text
msgid ""
"Example of `org.keycloak.adapters.authorization."
"ClaimInformationPointProviderFactory`:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"public class MyClaimInformationPointProviderFactory implements ClaimInformationPointProviderFactory<MyClaimInformationPointProvider> {\n"
"\n"
"    @Override\n"
"    public String getName() {\n"
"        return \"my-claims\";\n"
"    }\n"
"\n"
"    @Override\n"
"    public void init(PolicyEnforcer policyEnforcer) {\n"
"\n"
"    }\n"
"\n"
"    @Override\n"
"    public MyClaimInformationPointProvider create(Map<String, Object> config) {\n"
"        return new MyClaimInformationPointProvider(config);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"Every CIP provider must be associated with a name, as defined above in the "
"`MyClaimInformationPointProviderFactory.getName` method. The name will be "
"used to map the configuration from the `claim-information-point` section in "
"the `policy-enforcer` configuration to the implementation."
msgstr ""

#. type: Plain text
msgid ""
"When processing requests, the policy enforcer will call the "
"MyClaimInformationPointProviderFactory.create method in order to obtain an "
"instance of MyClaimInformationPointProvider. When called, any configuration "
"defined for this particular CIP provider (via claim-information-point) is "
"passed as a map."
msgstr ""

#. type: Plain text
msgid "Example of `ClaimInformationPointProvider`:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"public class MyClaimInformationPointProvider implements ClaimInformationPointProvider {\n"
"\n"
"    private final Map<String, Object> config;\n"
"\n"
"    public MyClaimInformationPointProvider(Map<String, Object> config) {\n"
"        this.config = config;\n"
"    }\n"
"\n"
"    @Override\n"
"    public Map<String, List<String>> resolve(HttpFacade httpFacade) {\n"
"        Map<String, List<String>> claims = new HashMap<>();\n"
"\n"
"        // put whatever claim you want into the map\n"
"\n"
"        return claims;\n"
"    }\n"
"}\n"
msgstr ""
