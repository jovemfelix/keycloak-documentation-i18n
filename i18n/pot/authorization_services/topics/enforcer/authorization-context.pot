# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ====
#: source/authorization_services/topics/enforcer/authorization-context.adoc:2
#, no-wrap
msgid "Obtaining the Authorization Context"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:6
msgid ""
"When policy enforcement is enabled, the permissions obtained from the server "
"are available through `org.keycloak.AuthorizationContext`.  This class "
"provides several methods you can use to obtain permissions and ascertain "
"whether a permission was granted for a particular resource or scope."
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:16
#, no-wrap
msgid ""
"Obtaining the Authorization Context in a Servlet Container\n"
"```java\n"
"    HttpServletRequest request = ... // obtain javax.servlet.http.HttpServletRequest\n"
"    KeycloakSecurityContext keycloakSecurityContext =\n"
"        (KeycloakSecurityContext) request\n"
"            .getAttribute(KeycloakSecurityContext.class.getName());\n"
"    AuthorizationContext authzContext =\n"
"        keycloakSecurityContext.getAuthorizationContext();\n"
"```\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:20
msgid ""
"For more details about how you can obtain a `KeycloakSecurityContext` "
"consult the adapter configuration. The example above should be sufficient to "
"obtain the context when running an application using any of the servlet "
"containers supported by {project_name}."
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:23
msgid ""
"The authorization context helps give you more control over the decisions "
"made and returned by the server. For example, you can use it to build a "
"dynamic menu where items are hidden or shown depending on the permissions "
"associated with a resource or scope."
msgstr ""

#. type: Code block
#: source/authorization_services/topics/enforcer/authorization-context.adoc:36
#, no-wrap
msgid ""
"if (authzContext.hasResourcePermission(\"Project Resource\")) {\n"
"    // user can access the Project Resource\n"
"}\n"
"\n"
"if (authzContext.hasResourcePermission(\"Admin Resource\")) {\n"
"    // user can access administration resources\n"
"}\n"
"\n"
"if (authzContext.hasScopePermission(\"urn:project.com:project:create\")) {\n"
"    // user can create new projects\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:39
msgid ""
"The `AuthorizationContext` represents one of the main capabilities of "
"{project_name} Authorization Services. From the examples above, you can see "
"that the protected resource is not directly associated with the policies "
"that govern them."
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:41
msgid "Consider some similar code using role-based access control (RBAC):"
msgstr ""

#. type: Code block
#: source/authorization_services/topics/enforcer/authorization-context.adoc:54
#, no-wrap
msgid ""
"if (User.hasRole('user')) {\n"
"    // user can access the Project Resource\n"
"}\n"
"\n"
"if (User.hasRole('admin')) {\n"
"    // user can access administration resources\n"
"}\n"
"\n"
"if (User.hasRole('project-manager')) {\n"
"    // user can create new projects\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:57
msgid ""
"Although both examples address the same requirements, they do so in "
"different ways. In RBAC, roles only _implicitly_ define access for their "
"resources. With {project_name} you gain the capability to create more "
"manageable code that focuses directly on your resources whether you are "
"using RBAC, attribute-based access control (ABAC), or any other BAC variant. "
"Either you have the permission for a given resource or scope, or you don't."
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:59
msgid ""
"Now, suppose your security requirements have changed and in addition to "
"project managers, PMOs can also create new projects."
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:61
msgid ""
"Security requirements change, but with {project_name} there is no need to "
"change your application code to address the new requirements. Once your "
"application is based on the resource and scope identifier, you need only "
"change the configuration of the permissions or policies associated with a "
"particular resource in the authorization server. In this case, the "
"permissions and policies associated with the `Project Resource` and/or the "
"scope `urn:project.com:project:create` would be changed."
msgstr ""

#. type: Title ====
#: source/authorization_services/topics/enforcer/authorization-context.adoc:62
#, no-wrap
msgid "Using the AuthorizationContext to obtain an Authorization Client Instance"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:65
msgid ""
"The ```AuthorizationContext``` can also be used to obtain a reference to the "
"<<_service_client_api, Authorization Client API>> configured to your "
"application:"
msgstr ""

#. type: Code block
#: source/authorization_services/topics/enforcer/authorization-context.adoc:69
#, no-wrap
msgid ""
"    ClientAuthorizationContext clientContext = ClientAuthorizationContext.class.cast(authzContext);\n"
"    AuthzClient authzClient = clientContext.getClient();\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:71
msgid ""
"In some cases, resource servers protected by the policy enforcer need to "
"access the APIs provided by the authorization server. With an "
"```AuthzClient``` instance in hands, resource servers can interact with the "
"server in order to create resources or check for specific permissions "
"programmatically."
msgstr ""
