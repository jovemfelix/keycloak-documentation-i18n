# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Code block
#, no-wrap
msgid ""
"HTTP/1.1 401 Unauthorized\n"
"WWW-Authenticate: UMA realm=\"${realm}\",\n"
"    as_uri=\"https://${host}:${port}/auth/realms/${realm}\",\n"
"    ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n"
msgstr ""

#. type: Title =
#, no-wrap
msgid "JavaScript Integration"
msgstr ""

#. type: Plain text
msgid ""
"The {project_name} Server comes with a JavaScript library you can use to "
"interact with a resource server protected by a policy enforcer.  This "
"library is based on the {project_name} JavaScript adapter, which can be "
"integrated to allow your client to obtain permissions from a {project_name} "
"Server."
msgstr ""

#. type: Plain text
msgid ""
"You can obtain this library from a running a {project_name} Server instance "
"by including the following `script` tag in your web page:"
msgstr ""

#. type: Code block
msgid "<script src=\"http://.../auth/js/keycloak-authz.js\"></script>"
msgstr ""

#. type: Plain text
msgid ""
"Once you do that, you can create a `KeycloakAuthorization` instance as "
"follows:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var keycloak = ... // obtain a Keycloak instance from keycloak.js library\n"
"var authorization = new KeycloakAuthorization(keycloak);\n"
msgstr ""

#. type: Plain text
msgid "The *keycloak-authz.js* library provides two main features:"
msgstr ""

#. type: Plain text
msgid ""
"Obtain permissions from the server using a permission ticket, if you are "
"accessing a UMA protected resource server."
msgstr ""

#. type: Plain text
msgid ""
"Obtain permissions from the server by sending the resources and scopes the "
"application wants to access."
msgstr ""

#. type: Plain text
msgid ""
"In both cases, the library allows you to easily interact with both resource "
"server and {project_name} Authorization Services to obtain tokens with "
"permissions your client can use as bearer tokens to access the protected "
"resources on a resource server."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Handling Authorization Responses from a UMA-Protected Resource Server"
msgstr ""

#. type: Plain text
msgid ""
"If a resource server is protected by a policy enforcer, it responds to "
"client requests based on the permissions carried along with a bearer token.  "
"Typically, when you try to access a resource server with a bearer token that "
"is lacking permissions to access a protected resource, the resource server "
"responds with a *401* status code and a `WWW-Authenticate` header."
msgstr ""

#. type: Plain text
msgid ""
"See <<_service_uma_authorization_process, UMA Authorization Process>> for "
"more information."
msgstr ""

#. type: Plain text
msgid ""
"What your client needs to do is extract the permission ticket from the "
"```WWW-Authenticate``` header returned by the resource server and use the "
"library to send an authorization request as follows:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"// prepare a authorization request with the permission ticket\n"
"var authorizationRequest = {};\n"
"authorizationRequest.ticket = ticket;\n"
"\n"
"// send the authorization request, if successful retry the request\n"
"Identity.authorization.authorize(authorizationRequest).then(function (rpt) {\n"
"    // onGrant\n"
"}, function () {\n"
"    // onDeny\n"
"}, function () {\n"
"    // onError\n"
"});\n"
msgstr ""

#. type: Plain text
msgid ""
"The `authorize` function is completely asynchronous and supports a few "
"callback functions to receive notifications from the server:"
msgstr ""

#. type: Plain text
msgid ""
"`onGrant`: The first argument of the function. If authorization was "
"successful and the server returned an RPT with the requested permissions, "
"the callback receives the RPT."
msgstr ""

#. type: Plain text
msgid ""
"`onDeny`: The second argument of the function. Only called if the server has "
"denied the authorization request."
msgstr ""

#. type: Plain text
msgid ""
"`onError`: The third argument of the function. Only called if the server "
"responds unexpectedly."
msgstr ""

#. type: Plain text
msgid ""
"Most applications should use the `onGrant` callback to retry a request after "
"a 401 response. Subsequent requests should include the RPT as a bearer token "
"for retries."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Obtaining Entitlements"
msgstr ""

#. type: Plain text
msgid ""
"The ```keycloak-authz.js``` library provides an `entitlement` function that "
"you can use to obtain an RPT from the server by providing the resources and "
"scopes your client wants to access."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Example about how to obtain an RPT with permissions for all resources and scopes the user can access"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"authorization.entitlement('my-resource-server-id').then(function (rpt) {\n"
"    // onGrant callback function.\n"
"    // If authorization was successful you'll receive an RPT\n"
"    // with the necessary permissions to access the resource server\n"
"});\n"
msgstr ""

#. type: Block title
#, no-wrap
msgid "Example about how to obtain an RPT with permissions for specific resources and scopes"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"authorization.entitlement('my-resource-server', {\n"
"    \"permissions\": [\n"
"        {\n"
"            \"id\" : \"Some Resource\"\n"
"        }\n"
"    ]\n"
"}).then(function (rpt) {\n"
"    // onGrant\n"
"});\n"
msgstr ""

#. type: Plain text
msgid ""
"When using the `entitlement` function, you must provide the _client_id_ of "
"the resource server you want to access."
msgstr ""

#. type: Plain text
msgid ""
"The `entitlement` function is completely asynchronous and supports a few "
"callback functions to receive notifications from the server:"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Authorization Request"
msgstr ""

#. type: Plain text
msgid ""
"Both ```authorize``` and ```entitlement``` functions accept an authorization "
"request object. This object can be set with the following properties:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*permissions*\n"
msgstr ""

#. type: Plain text
msgid "An array of objects representing the resource and scopes. For instance:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var authorizationRequest = {\n"
"   \"permissions\": [\n"
"       {\n"
"           \"id\" : \"Some Resource\",\n"
"           \"scopes\" : [\"view\", \"edit\"]\n"
"       }\n"
"   ]\n"
"}\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*metadata*\n"
msgstr ""

#. type: Plain text
msgid ""
"An object where its properties define how the authorization request should "
"be processed by the server."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "** *response_include_resource_name*\n"
msgstr ""

#. type: Plain text
msgid ""
"A boolean value indicating to the server if resource names should be "
"included in the RPT's permissions. If false, only the resource identifier is "
"included.  ** *response_permissions_limit*"
msgstr ""

#. type: Plain text
msgid ""
"An integer N that defines a limit for the amount of permissions an RPT can "
"have. When used together with `rpt` parameter, only the last N requested "
"permissions will be kept in the RPT"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*submit_request*\n"
msgstr ""

#. type: Plain text
msgid ""
"A boolean value indicating whether the server should create permission "
"requests to the resources and scopes referenced by a permission ticket.  "
"This parameter will only take effect when used together with the `ticket` "
"parameter as part of a UMA authorization process."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Obtaining the RPT"
msgstr ""

#. type: Plain text
msgid ""
"If you have already obtained an RPT using any of the authorization functions "
"provided by the library, you can always obtain the RPT as follows from the "
"authorization object (assuming that it has been initialized by one of the "
"techniques shown earlier):"
msgstr ""

#. type: Code block
msgid "var rpt = authorization.rpt;"
msgstr ""
