# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#, no-wrap
msgid "JavaScript Integration"
msgstr ""

#. type: Plain text
msgid ""
"The {project_name} Server comes with a JavaScript library you can use to "
"interact with a resource server protected by a policy enforcer.  This "
"library is based on the {project_name} JavaScript adapter, which can be "
"integrated to allow your client to obtain permissions from a {project_name} "
"Server."
msgstr ""

#. type: Plain text
msgid ""
"You can obtain this library from a running a {project_name} Server instance "
"by including the following `script` tag in your web page:"
msgstr ""

#. type: Code block
msgid "<script src=\"http://.../auth/js/keycloak-authz.js\"></script>"
msgstr ""

#. type: Plain text
msgid ""
"Once you do that, you can create a `KeycloakAuthorization` instance as "
"follows:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var keycloak = ... // obtain a Keycloak instance from keycloak.js library\n"
"var authorization = new KeycloakAuthorization(keycloak);\n"
msgstr ""

#. type: Plain text
msgid "The *keycloak-authz.js* library provides two main features:"
msgstr ""

#. type: Plain text
msgid ""
"Handle responses from a resource server protected by a <<_enforcer_overview, "
"{project_name} Policy Enforcer>> and obtain a requesting party token (RPT) "
"with the necessary permissions to gain access to the protected resources on "
"the resource server."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "** In this case, the library can handle whatever authorization protocol the resource server is using: <<_service_entitlement_api, Entitlements>>.\n"
msgstr ""

#. type: Plain text
msgid ""
"Obtain permissions from a {project_name} Server using the "
"<<_service_entitlement_api, Entitlement API>>."
msgstr ""

#. type: Plain text
msgid ""
"In both cases, the library allows you to easily interact with both resource "
"server and {project_name} Authorization Services to obtain tokens with "
"permissions your client can use as bearer tokens to access the protected "
"resources on a resource server."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Handling Authorization Responses from a Resource Server"
msgstr ""

#. type: Plain text
msgid ""
"If a resource server is protected by a policy enforcer, it responds to "
"client requests based on the permissions carried along with a "
"<<_enforcer_bearer, bearer token>>.  Typically, when you try to access a "
"resource server with a bearer token that is lacking permissions to access a "
"protected resource, the resource server responds with a *401* status code "
"and a `WWW-Authenticate` header."
msgstr ""

#. type: Plain text
msgid ""
"The value of the `WWW-Authenticate` header depends on the authorization "
"protocol in use by the resource server. Whatever protocol is in use, you can "
"use a `KeycloakAuthorization` instance to handle responses as follows:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var wwwAuthenticateHeader = ... // extract WWW-Authenticate Header from the response in case of a 401 status code\n"
"authorization.authorize(wwwAuthenticateHeader).then(function (rpt) {\n"
"    // onGrant callback function.\n"
"    // If authorization was successful you'll receive an RPT\n"
"    // with the necessary permissions to access the resource server\n"
"}, function () {\n"
"    // onDeny callback function.\n"
"    // Called when the authorization request is denied by the server\n"
"}, function () {\n"
"    // onError callback function. Called when the server responds unexpectedly\n"
"});\n"
msgstr ""

#. type: Plain text
msgid ""
"The `authorize` function is completely asynchronous and supports a few "
"callback functions to receive notifications from the server:"
msgstr ""

#. type: Plain text
msgid ""
"`onGrant`: The first argument of the function. If authorization was "
"successful and the server returned an RPT with the requested permissions, "
"the callback receives the RPT."
msgstr ""

#. type: Plain text
msgid ""
"`onDeny`: The second argument of the function. Only called if the server has "
"denied the authorization request."
msgstr ""

#. type: Plain text
msgid ""
"`onError`: The third argument of the function. Only called if the server "
"responds unexpectedly."
msgstr ""

#. type: Plain text
msgid ""
"Most applications should use the `onGrant` callback to retry a request after "
"a 401 response. Subsequent requests should include the RPT as a bearer token "
"for retries."
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Obtaining Entitlements"
msgstr ""

#. type: Plain text
msgid ""
"The keycloak-authz.js library provides an `entitlement` function that you "
"can use to obtain an RPT from the server using the Entitlement API."
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"authorization.entitlement('my-resource-server-id').then(function (rpt) {\n"
"    // onGrant callback function.\n"
"    // If authorization was successful you'll receive an RPT\n"
"    // with the necessary permissions to access the resource server\n"
"});\n"
msgstr ""

#. type: Plain text
msgid ""
"When using the `entitlement` function, you must provide the _client_id_ of "
"the resource server you want to access."
msgstr ""

#. type: Plain text
msgid ""
"The `entitlement` function is completely asynchronous and supports a few "
"callback functions to receive notifications from the server:"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Obtaining the RPT"
msgstr ""

#. type: Plain text
msgid ""
"If you have already obtained an RPT using any of the authorization functions "
"provided by the library, you can always obtain the RPT as follows from the "
"authorization object (assuming that it has been initialized by one of the "
"techniques shown earlier):"
msgstr ""

#. type: Code block
msgid "var rpt = authorization.rpt;"
msgstr ""
