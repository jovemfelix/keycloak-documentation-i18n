# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
msgid "image:images/pep-pattern-diagram.png[alt=\"PEP Overview\"]"
msgstr ""

#. type: Block title
#, no-wrap
msgid "keycloak.json"
msgstr ""

#. type: Title =
#, no-wrap
msgid "Policy Enforcers"
msgstr ""

#. type: Plain text
msgid ""
"Policy Enforcement Point (PEP) is a design pattern and as such you can "
"implement it in different ways. {project_name} provides all the necessary "
"means to implement PEPs for different platforms, environments, and "
"programming languages. {project_name} Authorization Services presents a "
"RESTful API, and leverages OAuth2 authorization capabilities for fine-"
"grained authorization using a centralized authorization server."
msgstr ""

#. type: Plain text
msgid ""
"A PEP is responsible for enforcing access decisions from the {project_name} "
"server where these decisions are taken by evaluating the policies associated "
"with a protected resource. It acts as a filter or interceptor in your "
"application in order to check whether or not a particular request to a "
"protected resource can be fulfilled based on the permissions granted by "
"these decisions."
msgstr ""

#. type: Plain text
msgid ""
"Permissions are enforced depending on the protocol you are using. When using "
"UMA, the policy enforcer always expects an RPT as a bearer token in order to "
"decide whether or not a request can be served. That means clients should "
"first obtain an RPT from {project_name} before sending requests to the "
"resource server."
msgstr ""

#. type: Plain text
msgid ""
"However, if you are not using UMA, you can also send regular access tokens "
"to the resource server. In this case, the policy enforcer will try to obtain "
"permissions directly from the server."
msgstr ""

#. type: Plain text
msgid ""
"If you are using any of the {project_name} OIDC adapters, you can easily "
"enable the policy enforcer by adding the following property to your "
"*keycloak.json* file:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"{\n"
" \"policy-enforcer\": {}\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"When you enable the policy enforcer all requests sent your application are "
"intercepted and access to protected resources will be granted depending on "
"the permissions granted by {project_name} to the identity making the request."
msgstr ""

#. type: Plain text
msgid ""
"Policy enforcement is strongly linked to your application's paths and the "
"<<_resource_overview, resources>> you created for a resource server using "
"the {project_name} Administration Console. By default, when you create a "
"resource server, {project_name} creates a <<_resource_server_default_config, "
"default configuration>> for your resource server so you can enable policy "
"enforcement quickly."
msgstr ""
