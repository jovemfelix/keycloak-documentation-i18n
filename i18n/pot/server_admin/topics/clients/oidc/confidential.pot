# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ====
#, no-wrap
msgid "Confidential Client Credentials"
msgstr ""

#. type: Plain text
msgid ""
"If you've set the client's <<_access-type, access type>> to `confidential` "
"in the client's `Settings` tab, a new `Credentials` tab will show up. As "
"part of dealing with this type of client you have to configure the client's "
"credentials."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Credentials Tab"
msgstr ""

#. type: Plain text
msgid "image:{project_images}/client-credentials.png[]"
msgstr ""

#. type: Plain text
msgid ""
"The `Client Authenticator` list box specifies the type of credential you are "
"going to use for your confidential client.  It defaults to client ID and "
"secret.  The secret is automatically generated for you and the `Regenerate "
"Secret` button allows you to recreate this secret if you want or need to."
msgstr ""

#. type: Plain text
msgid ""
"Alternatively, you can opt to use a signed Json Web Token (JWT) or x509 "
"certificate validation (also called Mutual TLS) instead of a secret."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Signed JWT"
msgstr ""

#. type: Plain text
msgid "image:{project_images}/client-credentials-jwt.png[]"
msgstr ""

#. type: Plain text
msgid ""
"When choosing this credential type you will have to also generate a private "
"key and certificate for the client.  The private key will be used to sign "
"the JWT, while the certificate is used by the server to verify the "
"signature.  Click on the `Generate new keys and certificate` button to start "
"this process."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Generate Keys"
msgstr ""

#. type: Plain text
msgid "image:{project_images}/generate-client-keys.png[]"
msgstr ""

#. type: Plain text
msgid ""
"When you generate these keys, {project_name} will store the certificate, and "
"you'll need to download the private key and certificate for your client to "
"use.  Pick the archive format you want and specify the password for the "
"private key and store."
msgstr ""

#. type: Plain text
msgid ""
"You can also opt to generate these via an external tool and just import the "
"client's certificate."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Import Certificate"
msgstr ""

#. type: Plain text
msgid "image:{project_images}/import-client-cert.png[]"
msgstr ""

#. type: Plain text
msgid ""
"There are multiple formats you can import from, just choose the archive "
"format you have the certificate stored in, select the file, and click the "
"`Import` button."
msgstr ""

#. type: Plain text
msgid ""
"Finally note that you don't even need to import certificate if you choose to "
"`Use JWKS URL` . In that case, you can provide the URL where client "
"publishes it's public key in https://self-issued.info/docs/draft-ietf-jose-"
"json-web-key.html[JWK] format. This is flexible because when client changes "
"it's keys, {project_name} will automatically download them without need to "
"re-import anything on {project_name} side."
msgstr ""

#. type: Plain text
msgid ""
"If you use client secured by {project_name} adapter, you can configure the "
"JWKS URL like https://myhost.com/myapp/k_jwks assuming that https://myhost."
"com/myapp is the root URL of your client application. See link:"
"{developerguide_link}[{developerguide_name}] for additional details."
msgstr ""

#. type: Plain text
msgid ""
"For the performance purposes, {project_name} caches the public keys of the "
"OIDC clients. If you think that private key of your client was compromised, "
"it is obviously good to update your keys, but it's also good to clear the "
"keys cache. See <<_clear-cache, Clearing the cache>> section for more "
"details."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Signed JWT with Client Secret"
msgstr ""

#. type: Plain text
msgid ""
"If you select this option in the `Client Authenticator` list box, you can "
"use a JWT signed by client secret instead of the private key."
msgstr ""

#. type: Plain text
msgid "This client secret will be used to sign the JWT by the client."
msgstr ""

#. type: Block title
#, no-wrap
msgid "X509 Certificate"
msgstr ""

#. type: Plain text
msgid ""
"By enabling this option {project_name} will validate if the client uses "
"proper X509 certificate during the TLS Handshake."
msgstr ""

#. type: Plain text
msgid ""
"This option requires mutual TLS in {project_name}, see <<_enable-mtls-"
"wildfly, Enable mutual SSL in WildFly>>."
msgstr ""

#. type: Plain text
msgid "image:{project_images}/x509-client-auth.png[]"
msgstr ""

#. type: Plain text
msgid ""
"The validator checks also the certificate's Subject DN field with configured "
"regexp validation expression. For some use cases, it is sufficient to accept "
"all certificates. In that case, you can use `(.*?)(?:$)` expression."
msgstr ""

#. type: Plain text
msgid ""
"There are two ways for {project_name} to obtain the Client ID from the "
"request. The first option is the `client_id` parameter in the query "
"(described in Section 2.2 of the https://tools.ietf.org/html/rfc6749[OAuth "
"2.0 Specification]).  The second option is to supply `client_id` as a query "
"parameter."
msgstr ""
